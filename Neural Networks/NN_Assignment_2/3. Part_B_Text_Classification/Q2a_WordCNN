{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Q2a_WordCNN","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOxJ7JGG+KQUmNQ95GfkKMl"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"_xm-Y7UPJeSc"},"source":["# Mount Drive"]},{"cell_type":"code","metadata":{"id":"-M48O3QXt0dc","executionInfo":{"status":"ok","timestamp":1604854646213,"user_tz":-480,"elapsed":30099,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"6c1ab9c3-c9a2-4e65-badf-89560260b0b2","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"4XTVL3gqJipD"},"source":["# Install Libraries"]},{"cell_type":"code","metadata":{"id":"Z2gdCDhmybWe","executionInfo":{"status":"ok","timestamp":1604854655880,"user_tz":-480,"elapsed":24895,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"caec7a64-3857-46c5-879a-0f2fa804b200","colab":{"base_uri":"https://localhost:8080/"}},"source":["!pip install wandb -qqq"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 1.8MB 4.9MB/s \n","\u001b[K     |████████████████████████████████| 163kB 17.3MB/s \n","\u001b[K     |████████████████████████████████| 102kB 11.2MB/s \n","\u001b[K     |████████████████████████████████| 133kB 34.6MB/s \n","\u001b[K     |████████████████████████████████| 102kB 11.2MB/s \n","\u001b[K     |████████████████████████████████| 71kB 10.7MB/s \n","\u001b[?25h  Building wheel for watchdog (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for subprocess32 (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"aUnW2mpR502Y","executionInfo":{"status":"ok","timestamp":1604854657786,"user_tz":-480,"elapsed":26620,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"7e49080e-6daf-4f0a-f508-9259bcb3b24e","colab":{"base_uri":"https://localhost:8080/"}},"source":["import nltk\n","nltk.download('punkt')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"jnKatQHhJsAn"},"source":["# Run Model"]},{"cell_type":"code","metadata":{"id":"YV-vgOrwzbhT"},"source":["# Preprocessing Functions\n","def clean_str(text):\n","    text = re.sub(r\"[^A-Za-z0-9(),!?\\'\\`\\\"]\", \" \", text)\n","    text = re.sub(r\"\\s{2,}\", \" \", text)\n","    text = text.strip().lower()\n","\n","    return text\n","\n","\n","def build_word_dict(contents):\n","    words = list()\n","    for content in contents:\n","        for word in word_tokenize(clean_str(content)):\n","            words.append(word)\n","\n","    word_counter = collections.Counter(words).most_common()\n","    word_dict = dict()\n","    word_dict[\"<pad>\"] = 0\n","    word_dict[\"<unk>\"] = 1\n","    word_dict[\"<eos>\"] = 2\n","    for word, _ in word_counter:\n","        word_dict[word] = len(word_dict)\n","    return word_dict\n","\n","\n","def preprocess(contents, word_dict, document_max_len):\n","    x = list(map(lambda d: word_tokenize(clean_str(d)), contents))\n","    x = list(map(lambda d: list(map(lambda w: word_dict.get(w, word_dict[\"<unk>\"]), d)), x))\n","    x = list(map(lambda d: d + [word_dict[\"<eos>\"]], x))\n","    x = list(map(lambda d: d[:document_max_len], x))\n","    x = list(map(lambda d: d + (document_max_len - len(d)) * [word_dict[\"<pad>\"]], x))\n","    return x\n","\n","\n","def read_data_words():\n","    x_train, y_train, x_test, y_test = [], [], [], []\n","    cop = re.compile(\"[^a-z^A-Z^0-9^,^.^' ']\")\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/train_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_train.append(data)\n","            y_train.append(int(row[0]))\n","\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/test_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_test.append(data)\n","            y_test.append(int(row[0]))\n","\n","    word_dict = build_word_dict(x_train+x_test)\n","    x_train = preprocess(x_train, word_dict, 100)\n","    y_train = np.array(y_train)\n","    x_test = preprocess(x_test, word_dict, 100)\n","    y_test = np.array(y_test)\n","\n","    x_train = [x[:100] for x in x_train]\n","    x_test = [x[:100] for x in x_test]\n","    x_train = tf.constant(x_train, dtype=tf.int64)\n","    y_train = tf.constant(y_train, dtype=tf.int64)\n","    x_test = tf.constant(x_test, dtype=tf.int64)\n","    y_test = tf.constant(y_test, dtype=tf.int64)\n","\n","    vocab_size = tf.get_static_value(tf.reduce_max(x_train))\n","    vocab_size = max(vocab_size, tf.get_static_value(tf.reduce_max(x_test))) + 1\n","    return x_train, y_train, x_test, y_test, vocab_size"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CnWPz07jyrXz","executionInfo":{"status":"ok","timestamp":1604854792895,"user_tz":-480,"elapsed":157805,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"17963af1-f560-4dd5-ec05-7b5e33245d9d","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import wandb\n","from wandb.keras import WandbCallback\n","import collections\n","import numpy as np\n","import tensorflow as tf\n","from nltk.tokenize import word_tokenize\n","from tensorflow.keras import Model, layers, models\n","import csv\n","import re\n","\n","# Hyperparameters\n","defaults = {\n","    'embedding_size' : 20,\n","    'num_filters_c1' : 10,\n","    'num_filters_c2' : 10,\n","    'wsize_c1' : (20, 20),\n","    'wsize_c2' :(20, 1),\n","    'batch_size' : 128,\n","    'epochs' : 250,\n","    'lr' : 0.01,\n","    'Dropout' : 'No'\n","}\n","\n","# Initiate wandb\n","wandb.init(config=defaults, resume=True, name='WordCNN Q2a', project='NNA2 Part B Redo')\n","config = wandb.config\n","\n","# Fix lucky seed!\n","seed = 7\n","tf.random.set_seed(seed)\n","\n","# Train test split\n","x_train, y_train, x_test, y_test, vocab_size = read_data_words()\n","\n","# Use `tf.data` to batch and shuffle the dataset:\n","train_ds = tf.data.Dataset.from_tensor_slices(\n","    (x_train, y_train)).shuffle(10000).batch(config.batch_size)\n","test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(config.batch_size)\n","\n","model = models.Sequential()\n","model.add(layers.Embedding(vocab_size, config.embedding_size, input_length=100))\n","model.add(layers.Reshape((1,100, config.embedding_size)))\n","model.add(layers.Conv2D(config.num_filters_c1, config.wsize_c1, padding='valid', activation='relu', data_format='channels_first'))\n","model.add(layers.MaxPool2D(pool_size=4, strides=2, padding='same'))\n","model.add(layers.Conv2D(config.num_filters_c2, config.wsize_c2, padding='valid', activation='relu', data_format='channels_first'))\n","model.add(layers.MaxPool2D(pool_size=4, strides=2, padding='same'))\n","model.add(layers.Flatten())\n","model.add(layers.Dense(15, activation='softmax'))\n","model.summary()\n","\n","# Choose optimizer and loss function\n","loss_object = tf.keras.losses.SparseCategoricalCrossentropy()\n","opt = tf.keras.optimizers.SGD(learning_rate=config.lr)\n","\n","# Compile model\n","model.compile(\n","    optimizer=opt,\n","    loss=loss_object,\n","    metrics=['accuracy'],\n",")\n","\n","# Train model\n","model.fit(\n","    train_ds,\n","    validation_data=test_ds,\n","    epochs=config.epochs,\n","    callbacks=[WandbCallback()],\n","    )"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","        window._wandbApiKey = new Promise((resolve, reject) => {\n","            function loadScript(url) {\n","            return new Promise(function(resolve, reject) {\n","                let newScript = document.createElement(\"script\");\n","                newScript.onerror = reject;\n","                newScript.onload = resolve;\n","                document.body.appendChild(newScript);\n","                newScript.src = url;\n","            });\n","            }\n","            loadScript(\"https://cdn.jsdelivr.net/npm/postmate/build/postmate.min.js\").then(() => {\n","            const iframe = document.createElement('iframe')\n","            iframe.style.cssText = \"width:0;height:0;border:none\"\n","            document.body.appendChild(iframe)\n","            const handshake = new Postmate({\n","                container: iframe,\n","                url: 'https://wandb.ai/authorize'\n","            });\n","            const timeout = setTimeout(() => reject(\"Couldn't auto authenticate\"), 5000)\n","            handshake.then(function(child) {\n","                child.on('authorize', data => {\n","                    clearTimeout(timeout)\n","                    resolve(data)\n","                });\n","            });\n","            })\n","        });\n","    "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n"],"name":"stderr"},{"output_type":"stream","text":["wandb: Paste an API key from your profile and hit enter: ··········\n"],"name":"stdout"},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.9<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">WordCNN Q2a</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo</a><br/>\n","                Run page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/2e51t00k\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/2e51t00k</a><br/>\n","                Run data is saved locally in <code>wandb/run-20201108_165814-2e51t00k</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding (Embedding)        (None, 100, 20)           705740    \n","_________________________________________________________________\n","reshape (Reshape)            (None, 1, 100, 20)        0         \n","_________________________________________________________________\n","conv2d (Conv2D)              (None, 10, 81, 1)         4010      \n","_________________________________________________________________\n","max_pooling2d (MaxPooling2D) (None, 5, 41, 1)          0         \n","_________________________________________________________________\n","conv2d_1 (Conv2D)            (None, 10, 22, 1)         1010      \n","_________________________________________________________________\n","max_pooling2d_1 (MaxPooling2 (None, 5, 11, 1)          0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 55)                0         \n","_________________________________________________________________\n","dense (Dense)                (None, 15)                840       \n","=================================================================\n","Total params: 711,600\n","Trainable params: 711,600\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/250\n","44/44 [==============================] - 1s 12ms/step - loss: 2.7038 - accuracy: 0.0727 - val_loss: 2.7003 - val_accuracy: 0.0786\n","Epoch 2/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6978 - accuracy: 0.0736 - val_loss: 2.6951 - val_accuracy: 0.0743\n","Epoch 3/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6929 - accuracy: 0.0739 - val_loss: 2.6906 - val_accuracy: 0.0743\n","Epoch 4/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6887 - accuracy: 0.0752 - val_loss: 2.6868 - val_accuracy: 0.0743\n","Epoch 5/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6850 - accuracy: 0.0739 - val_loss: 2.6834 - val_accuracy: 0.0729\n","Epoch 6/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6818 - accuracy: 0.0741 - val_loss: 2.6803 - val_accuracy: 0.0743\n","Epoch 7/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6787 - accuracy: 0.0725 - val_loss: 2.6773 - val_accuracy: 0.0743\n","Epoch 8/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6758 - accuracy: 0.0725 - val_loss: 2.6745 - val_accuracy: 0.0743\n","Epoch 9/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6729 - accuracy: 0.0736 - val_loss: 2.6716 - val_accuracy: 0.0743\n","Epoch 10/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6699 - accuracy: 0.0750 - val_loss: 2.6687 - val_accuracy: 0.0757\n","Epoch 11/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6670 - accuracy: 0.0757 - val_loss: 2.6657 - val_accuracy: 0.0800\n","Epoch 12/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6641 - accuracy: 0.0768 - val_loss: 2.6628 - val_accuracy: 0.0800\n","Epoch 13/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6611 - accuracy: 0.0777 - val_loss: 2.6597 - val_accuracy: 0.0814\n","Epoch 14/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6579 - accuracy: 0.0787 - val_loss: 2.6565 - val_accuracy: 0.0786\n","Epoch 15/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6546 - accuracy: 0.0809 - val_loss: 2.6534 - val_accuracy: 0.0857\n","Epoch 16/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6514 - accuracy: 0.0889 - val_loss: 2.6496 - val_accuracy: 0.0929\n","Epoch 17/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6479 - accuracy: 0.0952 - val_loss: 2.6460 - val_accuracy: 0.0986\n","Epoch 18/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6444 - accuracy: 0.0954 - val_loss: 2.6423 - val_accuracy: 0.1000\n","Epoch 19/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6407 - accuracy: 0.0952 - val_loss: 2.6385 - val_accuracy: 0.1000\n","Epoch 20/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6371 - accuracy: 0.0954 - val_loss: 2.6346 - val_accuracy: 0.1000\n","Epoch 21/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6334 - accuracy: 0.0996 - val_loss: 2.6310 - val_accuracy: 0.0971\n","Epoch 22/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6298 - accuracy: 0.0952 - val_loss: 2.6266 - val_accuracy: 0.1014\n","Epoch 23/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6261 - accuracy: 0.0966 - val_loss: 2.6229 - val_accuracy: 0.1000\n","Epoch 24/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6226 - accuracy: 0.0989 - val_loss: 2.6189 - val_accuracy: 0.0914\n","Epoch 25/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6191 - accuracy: 0.0995 - val_loss: 2.6154 - val_accuracy: 0.0929\n","Epoch 26/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6161 - accuracy: 0.1023 - val_loss: 2.6117 - val_accuracy: 0.0986\n","Epoch 27/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.6129 - accuracy: 0.1045 - val_loss: 2.6083 - val_accuracy: 0.1057\n","Epoch 28/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6100 - accuracy: 0.1075 - val_loss: 2.6052 - val_accuracy: 0.1043\n","Epoch 29/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6076 - accuracy: 0.1068 - val_loss: 2.6027 - val_accuracy: 0.0957\n","Epoch 30/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6052 - accuracy: 0.1091 - val_loss: 2.5999 - val_accuracy: 0.0986\n","Epoch 31/250\n","44/44 [==============================] - 0s 9ms/step - loss: 2.6030 - accuracy: 0.1121 - val_loss: 2.5974 - val_accuracy: 0.1029\n","Epoch 32/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6012 - accuracy: 0.1175 - val_loss: 2.5956 - val_accuracy: 0.1043\n","Epoch 33/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5994 - accuracy: 0.1184 - val_loss: 2.5943 - val_accuracy: 0.1143\n","Epoch 34/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5978 - accuracy: 0.1198 - val_loss: 2.5922 - val_accuracy: 0.1086\n","Epoch 35/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5963 - accuracy: 0.1200 - val_loss: 2.5904 - val_accuracy: 0.1029\n","Epoch 36/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5954 - accuracy: 0.1195 - val_loss: 2.5893 - val_accuracy: 0.1129\n","Epoch 37/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5940 - accuracy: 0.1146 - val_loss: 2.5876 - val_accuracy: 0.1143\n","Epoch 38/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5928 - accuracy: 0.1173 - val_loss: 2.5868 - val_accuracy: 0.1171\n","Epoch 39/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5920 - accuracy: 0.1187 - val_loss: 2.5857 - val_accuracy: 0.1157\n","Epoch 40/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5909 - accuracy: 0.1179 - val_loss: 2.5849 - val_accuracy: 0.1143\n","Epoch 41/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5900 - accuracy: 0.1214 - val_loss: 2.5840 - val_accuracy: 0.1157\n","Epoch 42/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5892 - accuracy: 0.1182 - val_loss: 2.5838 - val_accuracy: 0.1071\n","Epoch 43/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5887 - accuracy: 0.1166 - val_loss: 2.5824 - val_accuracy: 0.1114\n","Epoch 44/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5881 - accuracy: 0.1186 - val_loss: 2.5819 - val_accuracy: 0.1086\n","Epoch 45/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5871 - accuracy: 0.1211 - val_loss: 2.5814 - val_accuracy: 0.1143\n","Epoch 46/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5867 - accuracy: 0.1189 - val_loss: 2.5807 - val_accuracy: 0.1129\n","Epoch 47/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5864 - accuracy: 0.1205 - val_loss: 2.5802 - val_accuracy: 0.1086\n","Epoch 48/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5858 - accuracy: 0.1180 - val_loss: 2.5799 - val_accuracy: 0.1143\n","Epoch 49/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5849 - accuracy: 0.1166 - val_loss: 2.5794 - val_accuracy: 0.1143\n","Epoch 50/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5846 - accuracy: 0.1209 - val_loss: 2.5790 - val_accuracy: 0.1157\n","Epoch 51/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5836 - accuracy: 0.1211 - val_loss: 2.5794 - val_accuracy: 0.1100\n","Epoch 52/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5826 - accuracy: 0.1202 - val_loss: 2.5779 - val_accuracy: 0.1157\n","Epoch 53/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5824 - accuracy: 0.1211 - val_loss: 2.5782 - val_accuracy: 0.1143\n","Epoch 54/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5825 - accuracy: 0.1238 - val_loss: 2.5769 - val_accuracy: 0.1171\n","Epoch 55/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5815 - accuracy: 0.1209 - val_loss: 2.5774 - val_accuracy: 0.1129\n","Epoch 56/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5815 - accuracy: 0.1213 - val_loss: 2.5759 - val_accuracy: 0.1171\n","Epoch 57/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5809 - accuracy: 0.1213 - val_loss: 2.5753 - val_accuracy: 0.1186\n","Epoch 58/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5802 - accuracy: 0.1223 - val_loss: 2.5747 - val_accuracy: 0.1186\n","Epoch 59/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5795 - accuracy: 0.1243 - val_loss: 2.5744 - val_accuracy: 0.1229\n","Epoch 60/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5789 - accuracy: 0.1248 - val_loss: 2.5737 - val_accuracy: 0.1171\n","Epoch 61/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5786 - accuracy: 0.1227 - val_loss: 2.5737 - val_accuracy: 0.1143\n","Epoch 62/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5778 - accuracy: 0.1234 - val_loss: 2.5729 - val_accuracy: 0.1200\n","Epoch 63/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5773 - accuracy: 0.1234 - val_loss: 2.5727 - val_accuracy: 0.1114\n","Epoch 64/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5770 - accuracy: 0.1232 - val_loss: 2.5718 - val_accuracy: 0.1200\n","Epoch 65/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5763 - accuracy: 0.1225 - val_loss: 2.5709 - val_accuracy: 0.1214\n","Epoch 66/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5755 - accuracy: 0.1259 - val_loss: 2.5706 - val_accuracy: 0.1186\n","Epoch 67/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5753 - accuracy: 0.1277 - val_loss: 2.5702 - val_accuracy: 0.1257\n","Epoch 68/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5742 - accuracy: 0.1241 - val_loss: 2.5692 - val_accuracy: 0.1257\n","Epoch 69/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5734 - accuracy: 0.1302 - val_loss: 2.5686 - val_accuracy: 0.1229\n","Epoch 70/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5727 - accuracy: 0.1287 - val_loss: 2.5682 - val_accuracy: 0.1214\n","Epoch 71/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5720 - accuracy: 0.1268 - val_loss: 2.5675 - val_accuracy: 0.1271\n","Epoch 72/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5709 - accuracy: 0.1329 - val_loss: 2.5662 - val_accuracy: 0.1229\n","Epoch 73/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5701 - accuracy: 0.1268 - val_loss: 2.5655 - val_accuracy: 0.1186\n","Epoch 74/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5688 - accuracy: 0.1295 - val_loss: 2.5653 - val_accuracy: 0.1286\n","Epoch 75/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5684 - accuracy: 0.1289 - val_loss: 2.5646 - val_accuracy: 0.1271\n","Epoch 76/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5673 - accuracy: 0.1309 - val_loss: 2.5626 - val_accuracy: 0.1229\n","Epoch 77/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5656 - accuracy: 0.1307 - val_loss: 2.5608 - val_accuracy: 0.1243\n","Epoch 78/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5638 - accuracy: 0.1320 - val_loss: 2.5596 - val_accuracy: 0.1243\n","Epoch 79/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5620 - accuracy: 0.1325 - val_loss: 2.5578 - val_accuracy: 0.1257\n","Epoch 80/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5600 - accuracy: 0.1352 - val_loss: 2.5561 - val_accuracy: 0.1214\n","Epoch 81/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5581 - accuracy: 0.1329 - val_loss: 2.5538 - val_accuracy: 0.1257\n","Epoch 82/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5555 - accuracy: 0.1352 - val_loss: 2.5514 - val_accuracy: 0.1271\n","Epoch 83/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5531 - accuracy: 0.1334 - val_loss: 2.5496 - val_accuracy: 0.1214\n","Epoch 84/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5506 - accuracy: 0.1363 - val_loss: 2.5463 - val_accuracy: 0.1214\n","Epoch 85/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5470 - accuracy: 0.1368 - val_loss: 2.5439 - val_accuracy: 0.1286\n","Epoch 86/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5431 - accuracy: 0.1361 - val_loss: 2.5393 - val_accuracy: 0.1271\n","Epoch 87/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5386 - accuracy: 0.1391 - val_loss: 2.5353 - val_accuracy: 0.1286\n","Epoch 88/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5337 - accuracy: 0.1396 - val_loss: 2.5298 - val_accuracy: 0.1343\n","Epoch 89/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5277 - accuracy: 0.1400 - val_loss: 2.5244 - val_accuracy: 0.1429\n","Epoch 90/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5209 - accuracy: 0.1443 - val_loss: 2.5191 - val_accuracy: 0.1386\n","Epoch 91/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5125 - accuracy: 0.1473 - val_loss: 2.5086 - val_accuracy: 0.1486\n","Epoch 92/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5022 - accuracy: 0.1532 - val_loss: 2.4982 - val_accuracy: 0.1486\n","Epoch 93/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.4908 - accuracy: 0.1618 - val_loss: 2.4865 - val_accuracy: 0.1557\n","Epoch 94/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.4755 - accuracy: 0.1634 - val_loss: 2.4737 - val_accuracy: 0.1614\n","Epoch 95/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.4602 - accuracy: 0.1682 - val_loss: 2.4610 - val_accuracy: 0.1643\n","Epoch 96/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.4436 - accuracy: 0.1775 - val_loss: 2.4413 - val_accuracy: 0.1729\n","Epoch 97/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.4247 - accuracy: 0.1791 - val_loss: 2.4241 - val_accuracy: 0.1829\n","Epoch 98/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.4073 - accuracy: 0.1834 - val_loss: 2.4078 - val_accuracy: 0.1900\n","Epoch 99/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.3872 - accuracy: 0.1838 - val_loss: 2.3941 - val_accuracy: 0.1729\n","Epoch 100/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.3738 - accuracy: 0.1864 - val_loss: 2.3740 - val_accuracy: 0.1857\n","Epoch 101/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.3509 - accuracy: 0.1907 - val_loss: 2.3501 - val_accuracy: 0.1829\n","Epoch 102/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.3307 - accuracy: 0.1907 - val_loss: 2.3337 - val_accuracy: 0.1843\n","Epoch 103/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.3115 - accuracy: 0.1870 - val_loss: 2.3092 - val_accuracy: 0.1857\n","Epoch 104/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.2896 - accuracy: 0.1970 - val_loss: 2.2858 - val_accuracy: 0.1943\n","Epoch 105/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.2793 - accuracy: 0.1945 - val_loss: 2.2670 - val_accuracy: 0.1929\n","Epoch 106/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.2525 - accuracy: 0.2005 - val_loss: 2.2487 - val_accuracy: 0.2086\n","Epoch 107/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.2363 - accuracy: 0.1971 - val_loss: 2.2279 - val_accuracy: 0.2029\n","Epoch 108/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.2113 - accuracy: 0.2082 - val_loss: 2.2080 - val_accuracy: 0.1957\n","Epoch 109/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.1890 - accuracy: 0.2136 - val_loss: 2.1819 - val_accuracy: 0.2186\n","Epoch 110/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.1709 - accuracy: 0.2105 - val_loss: 2.1643 - val_accuracy: 0.2071\n","Epoch 111/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.1407 - accuracy: 0.2212 - val_loss: 2.1510 - val_accuracy: 0.2214\n","Epoch 112/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.1175 - accuracy: 0.2286 - val_loss: 2.1171 - val_accuracy: 0.2286\n","Epoch 113/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.1022 - accuracy: 0.2261 - val_loss: 2.0960 - val_accuracy: 0.2343\n","Epoch 114/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.0884 - accuracy: 0.2387 - val_loss: 2.0992 - val_accuracy: 0.2157\n","Epoch 115/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.0595 - accuracy: 0.2450 - val_loss: 2.0548 - val_accuracy: 0.2429\n","Epoch 116/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.0339 - accuracy: 0.2446 - val_loss: 2.0366 - val_accuracy: 0.2371\n","Epoch 117/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.0182 - accuracy: 0.2536 - val_loss: 2.0129 - val_accuracy: 0.2629\n","Epoch 118/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.9978 - accuracy: 0.2493 - val_loss: 1.9934 - val_accuracy: 0.2700\n","Epoch 119/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.9760 - accuracy: 0.2682 - val_loss: 1.9839 - val_accuracy: 0.2514\n","Epoch 120/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.9675 - accuracy: 0.2691 - val_loss: 1.9942 - val_accuracy: 0.2486\n","Epoch 121/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.9434 - accuracy: 0.2779 - val_loss: 1.9507 - val_accuracy: 0.2629\n","Epoch 122/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.9728 - accuracy: 0.2725 - val_loss: 1.9404 - val_accuracy: 0.2743\n","Epoch 123/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.8995 - accuracy: 0.2907 - val_loss: 1.9884 - val_accuracy: 0.2429\n","Epoch 124/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.8880 - accuracy: 0.2861 - val_loss: 1.9626 - val_accuracy: 0.2557\n","Epoch 125/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.8636 - accuracy: 0.2980 - val_loss: 1.9530 - val_accuracy: 0.2514\n","Epoch 126/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.8692 - accuracy: 0.2993 - val_loss: 1.9945 - val_accuracy: 0.2257\n","Epoch 127/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.8423 - accuracy: 0.3050 - val_loss: 1.8625 - val_accuracy: 0.2943\n","Epoch 128/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.8316 - accuracy: 0.3148 - val_loss: 1.9117 - val_accuracy: 0.2514\n","Epoch 129/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.8036 - accuracy: 0.3211 - val_loss: 1.8270 - val_accuracy: 0.3171\n","Epoch 130/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.7813 - accuracy: 0.3352 - val_loss: 1.8286 - val_accuracy: 0.3257\n","Epoch 131/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.8254 - accuracy: 0.3159 - val_loss: 1.8211 - val_accuracy: 0.3100\n","Epoch 132/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.7634 - accuracy: 0.3325 - val_loss: 1.8233 - val_accuracy: 0.3029\n","Epoch 133/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.7408 - accuracy: 0.3418 - val_loss: 1.8217 - val_accuracy: 0.3186\n","Epoch 134/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.7552 - accuracy: 0.3296 - val_loss: 1.8051 - val_accuracy: 0.3200\n","Epoch 135/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.7189 - accuracy: 0.3577 - val_loss: 1.7864 - val_accuracy: 0.3100\n","Epoch 136/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.7223 - accuracy: 0.3455 - val_loss: 1.7726 - val_accuracy: 0.3314\n","Epoch 137/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.7068 - accuracy: 0.3584 - val_loss: 1.8102 - val_accuracy: 0.3257\n","Epoch 138/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.6816 - accuracy: 0.3638 - val_loss: 1.7465 - val_accuracy: 0.3371\n","Epoch 139/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.6726 - accuracy: 0.3696 - val_loss: 1.7746 - val_accuracy: 0.3057\n","Epoch 140/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.6744 - accuracy: 0.3652 - val_loss: 1.7413 - val_accuracy: 0.3300\n","Epoch 141/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.6397 - accuracy: 0.3830 - val_loss: 1.7154 - val_accuracy: 0.3414\n","Epoch 142/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.6340 - accuracy: 0.3738 - val_loss: 1.7463 - val_accuracy: 0.3386\n","Epoch 143/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.6756 - accuracy: 0.3604 - val_loss: 1.7435 - val_accuracy: 0.3429\n","Epoch 144/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.6212 - accuracy: 0.3814 - val_loss: 1.7089 - val_accuracy: 0.3229\n","Epoch 145/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.6935 - accuracy: 0.3695 - val_loss: 1.7068 - val_accuracy: 0.3629\n","Epoch 146/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.5912 - accuracy: 0.3936 - val_loss: 1.6870 - val_accuracy: 0.3586\n","Epoch 147/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.5885 - accuracy: 0.3941 - val_loss: 1.6791 - val_accuracy: 0.3586\n","Epoch 148/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.5688 - accuracy: 0.3991 - val_loss: 1.6890 - val_accuracy: 0.3671\n","Epoch 149/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.5556 - accuracy: 0.4066 - val_loss: 1.6636 - val_accuracy: 0.3857\n","Epoch 150/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.6013 - accuracy: 0.3909 - val_loss: 1.6930 - val_accuracy: 0.3614\n","Epoch 151/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.5419 - accuracy: 0.4157 - val_loss: 1.6613 - val_accuracy: 0.3614\n","Epoch 152/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.5266 - accuracy: 0.4184 - val_loss: 1.7343 - val_accuracy: 0.3757\n","Epoch 153/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.5306 - accuracy: 0.4205 - val_loss: 1.7201 - val_accuracy: 0.3600\n","Epoch 154/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.5055 - accuracy: 0.4288 - val_loss: 1.6840 - val_accuracy: 0.3486\n","Epoch 155/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.5062 - accuracy: 0.4239 - val_loss: 1.6621 - val_accuracy: 0.3643\n","Epoch 156/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.4781 - accuracy: 0.4429 - val_loss: 1.6478 - val_accuracy: 0.4057\n","Epoch 157/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.4824 - accuracy: 0.4404 - val_loss: 1.7133 - val_accuracy: 0.3443\n","Epoch 158/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.4813 - accuracy: 0.4429 - val_loss: 1.6124 - val_accuracy: 0.3900\n","Epoch 159/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.5072 - accuracy: 0.4441 - val_loss: 2.1676 - val_accuracy: 0.2871\n","Epoch 160/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.4657 - accuracy: 0.4491 - val_loss: 1.6289 - val_accuracy: 0.4086\n","Epoch 161/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.4221 - accuracy: 0.4671 - val_loss: 1.6145 - val_accuracy: 0.4014\n","Epoch 162/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.4197 - accuracy: 0.4598 - val_loss: 1.6257 - val_accuracy: 0.4029\n","Epoch 163/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.3963 - accuracy: 0.4784 - val_loss: 1.5814 - val_accuracy: 0.4071\n","Epoch 164/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.3999 - accuracy: 0.4755 - val_loss: 1.5995 - val_accuracy: 0.4100\n","Epoch 165/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.3841 - accuracy: 0.4759 - val_loss: 1.5858 - val_accuracy: 0.3943\n","Epoch 166/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.5384 - accuracy: 0.4257 - val_loss: 1.5799 - val_accuracy: 0.4414\n","Epoch 167/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.3733 - accuracy: 0.4864 - val_loss: 1.6379 - val_accuracy: 0.3900\n","Epoch 168/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.3487 - accuracy: 0.4873 - val_loss: 1.5658 - val_accuracy: 0.4314\n","Epoch 169/250\n","44/44 [==============================] - 0s 8ms/step - loss: 1.3728 - accuracy: 0.4718 - val_loss: 1.5488 - val_accuracy: 0.4343\n","Epoch 170/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.3473 - accuracy: 0.4889 - val_loss: 1.5728 - val_accuracy: 0.4514\n","Epoch 171/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.3367 - accuracy: 0.4923 - val_loss: 1.5860 - val_accuracy: 0.4286\n","Epoch 172/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.3567 - accuracy: 0.4800 - val_loss: 4.3018 - val_accuracy: 0.1786\n","Epoch 173/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.5110 - accuracy: 0.4579 - val_loss: 1.6507 - val_accuracy: 0.4014\n","Epoch 174/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.3120 - accuracy: 0.5089 - val_loss: 1.5543 - val_accuracy: 0.4129\n","Epoch 175/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.2860 - accuracy: 0.5125 - val_loss: 1.5305 - val_accuracy: 0.4557\n","Epoch 176/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.3065 - accuracy: 0.4971 - val_loss: 1.5538 - val_accuracy: 0.4200\n","Epoch 177/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.2808 - accuracy: 0.5188 - val_loss: 1.6173 - val_accuracy: 0.4514\n","Epoch 178/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.2674 - accuracy: 0.5193 - val_loss: 1.5933 - val_accuracy: 0.4529\n","Epoch 179/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.2355 - accuracy: 0.5377 - val_loss: 1.7623 - val_accuracy: 0.3643\n","Epoch 180/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.2968 - accuracy: 0.5057 - val_loss: 1.5544 - val_accuracy: 0.4257\n","Epoch 181/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.2563 - accuracy: 0.5241 - val_loss: 1.5025 - val_accuracy: 0.4814\n","Epoch 182/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.2342 - accuracy: 0.5264 - val_loss: 1.5266 - val_accuracy: 0.4629\n","Epoch 183/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.2053 - accuracy: 0.5552 - val_loss: 1.5733 - val_accuracy: 0.4071\n","Epoch 184/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.2105 - accuracy: 0.5470 - val_loss: 1.6288 - val_accuracy: 0.4171\n","Epoch 185/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.2087 - accuracy: 0.5532 - val_loss: 1.5459 - val_accuracy: 0.4243\n","Epoch 186/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.2599 - accuracy: 0.5321 - val_loss: 1.6694 - val_accuracy: 0.4043\n","Epoch 187/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.2108 - accuracy: 0.5414 - val_loss: 1.4991 - val_accuracy: 0.4771\n","Epoch 188/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.1681 - accuracy: 0.5557 - val_loss: 1.5662 - val_accuracy: 0.4357\n","Epoch 189/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.1972 - accuracy: 0.5471 - val_loss: 1.5284 - val_accuracy: 0.4571\n","Epoch 190/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.2004 - accuracy: 0.5407 - val_loss: 1.5051 - val_accuracy: 0.4686\n","Epoch 191/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.1590 - accuracy: 0.5641 - val_loss: 1.5801 - val_accuracy: 0.4543\n","Epoch 192/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.1417 - accuracy: 0.5664 - val_loss: 1.4881 - val_accuracy: 0.4929\n","Epoch 193/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.1265 - accuracy: 0.5782 - val_loss: 1.5199 - val_accuracy: 0.4543\n","Epoch 194/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.0905 - accuracy: 0.5982 - val_loss: 1.4852 - val_accuracy: 0.4757\n","Epoch 195/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.0998 - accuracy: 0.5875 - val_loss: 1.5587 - val_accuracy: 0.4543\n","Epoch 196/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.1265 - accuracy: 0.5666 - val_loss: 1.5302 - val_accuracy: 0.4800\n","Epoch 197/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.1004 - accuracy: 0.5846 - val_loss: 1.5334 - val_accuracy: 0.4729\n","Epoch 198/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.0956 - accuracy: 0.5896 - val_loss: 1.5623 - val_accuracy: 0.4686\n","Epoch 199/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.1118 - accuracy: 0.5741 - val_loss: 1.5145 - val_accuracy: 0.4900\n","Epoch 200/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.0748 - accuracy: 0.5925 - val_loss: 1.4699 - val_accuracy: 0.4757\n","Epoch 201/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.0434 - accuracy: 0.6116 - val_loss: 1.4608 - val_accuracy: 0.5286\n","Epoch 202/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.0427 - accuracy: 0.6141 - val_loss: 1.5034 - val_accuracy: 0.4857\n","Epoch 203/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.0201 - accuracy: 0.6223 - val_loss: 1.5686 - val_accuracy: 0.4814\n","Epoch 204/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.0169 - accuracy: 0.6259 - val_loss: 1.5783 - val_accuracy: 0.4786\n","Epoch 205/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.4421 - accuracy: 0.5312 - val_loss: 1.4646 - val_accuracy: 0.4986\n","Epoch 206/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.9930 - accuracy: 0.6500 - val_loss: 1.4580 - val_accuracy: 0.5286\n","Epoch 207/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.9633 - accuracy: 0.6530 - val_loss: 1.4461 - val_accuracy: 0.5314\n","Epoch 208/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.9972 - accuracy: 0.6429 - val_loss: 1.4599 - val_accuracy: 0.5429\n","Epoch 209/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.0178 - accuracy: 0.6230 - val_loss: 1.4663 - val_accuracy: 0.4986\n","Epoch 210/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.9606 - accuracy: 0.6477 - val_loss: 1.5173 - val_accuracy: 0.4971\n","Epoch 211/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.9376 - accuracy: 0.6562 - val_loss: 1.5471 - val_accuracy: 0.4771\n","Epoch 212/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.9404 - accuracy: 0.6595 - val_loss: 1.5147 - val_accuracy: 0.4971\n","Epoch 213/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.9744 - accuracy: 0.6407 - val_loss: 1.4438 - val_accuracy: 0.5243\n","Epoch 214/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.9166 - accuracy: 0.6686 - val_loss: 1.4363 - val_accuracy: 0.5486\n","Epoch 215/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.9210 - accuracy: 0.6611 - val_loss: 1.5680 - val_accuracy: 0.4900\n","Epoch 216/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.9245 - accuracy: 0.6627 - val_loss: 1.4563 - val_accuracy: 0.5143\n","Epoch 217/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.8946 - accuracy: 0.6775 - val_loss: 1.4442 - val_accuracy: 0.5229\n","Epoch 218/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8842 - accuracy: 0.6777 - val_loss: 1.5754 - val_accuracy: 0.5300\n","Epoch 219/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.9678 - accuracy: 0.6500 - val_loss: 1.5702 - val_accuracy: 0.4957\n","Epoch 220/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.8815 - accuracy: 0.6820 - val_loss: 1.5980 - val_accuracy: 0.4843\n","Epoch 221/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.8829 - accuracy: 0.6827 - val_loss: 1.4552 - val_accuracy: 0.5257\n","Epoch 222/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8747 - accuracy: 0.6834 - val_loss: 1.4327 - val_accuracy: 0.5500\n","Epoch 223/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8305 - accuracy: 0.7052 - val_loss: 1.4345 - val_accuracy: 0.5557\n","Epoch 224/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.9142 - accuracy: 0.6684 - val_loss: 1.6884 - val_accuracy: 0.4857\n","Epoch 225/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8234 - accuracy: 0.7046 - val_loss: 1.4689 - val_accuracy: 0.5314\n","Epoch 226/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.8018 - accuracy: 0.7159 - val_loss: 1.4499 - val_accuracy: 0.5329\n","Epoch 227/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.8139 - accuracy: 0.7125 - val_loss: 1.4434 - val_accuracy: 0.5557\n","Epoch 228/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.8215 - accuracy: 0.7038 - val_loss: 1.5245 - val_accuracy: 0.5257\n","Epoch 229/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8961 - accuracy: 0.6718 - val_loss: 1.4427 - val_accuracy: 0.5343\n","Epoch 230/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.7598 - accuracy: 0.7355 - val_loss: 1.4425 - val_accuracy: 0.5343\n","Epoch 231/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.7750 - accuracy: 0.7211 - val_loss: 1.5502 - val_accuracy: 0.5100\n","Epoch 232/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.8250 - accuracy: 0.6996 - val_loss: 1.5526 - val_accuracy: 0.5086\n","Epoch 233/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7610 - accuracy: 0.7336 - val_loss: 1.4736 - val_accuracy: 0.5471\n","Epoch 234/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7954 - accuracy: 0.7161 - val_loss: 1.7765 - val_accuracy: 0.4900\n","Epoch 235/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.8266 - accuracy: 0.6950 - val_loss: 1.4964 - val_accuracy: 0.5271\n","Epoch 236/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7204 - accuracy: 0.7473 - val_loss: 1.5457 - val_accuracy: 0.5486\n","Epoch 237/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7586 - accuracy: 0.7316 - val_loss: 1.5455 - val_accuracy: 0.5357\n","Epoch 238/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7263 - accuracy: 0.7493 - val_loss: 1.9097 - val_accuracy: 0.4457\n","Epoch 239/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7125 - accuracy: 0.7541 - val_loss: 1.4720 - val_accuracy: 0.5571\n","Epoch 240/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.9372 - accuracy: 0.6604 - val_loss: 2.3448 - val_accuracy: 0.4100\n","Epoch 241/250\n","44/44 [==============================] - 0s 7ms/step - loss: 6.4863 - accuracy: 0.4155 - val_loss: 2.2045 - val_accuracy: 0.3929\n","Epoch 242/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.4759 - accuracy: 0.5525 - val_loss: 1.6547 - val_accuracy: 0.4429\n","Epoch 243/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.1092 - accuracy: 0.6421 - val_loss: 1.5034 - val_accuracy: 0.5043\n","Epoch 244/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.9793 - accuracy: 0.6843 - val_loss: 1.4447 - val_accuracy: 0.5171\n","Epoch 245/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.9102 - accuracy: 0.7098 - val_loss: 1.4234 - val_accuracy: 0.5314\n","Epoch 246/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8672 - accuracy: 0.7252 - val_loss: 1.4193 - val_accuracy: 0.5500\n","Epoch 247/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8326 - accuracy: 0.7457 - val_loss: 1.4230 - val_accuracy: 0.5443\n","Epoch 248/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8012 - accuracy: 0.7509 - val_loss: 1.3980 - val_accuracy: 0.5600\n","Epoch 249/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7786 - accuracy: 0.7555 - val_loss: 1.4197 - val_accuracy: 0.5457\n","Epoch 250/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7564 - accuracy: 0.7609 - val_loss: 1.4003 - val_accuracy: 0.5443\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7fb246e74c18>"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"eLzrSopnylnq"},"source":[""],"execution_count":null,"outputs":[]}]}