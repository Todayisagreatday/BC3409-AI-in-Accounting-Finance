{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CharRNN_Q6c","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOK5X0eX6MwwL/4TBxctGsI"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"MsObL7B7Siou","executionInfo":{"status":"ok","timestamp":1604858797853,"user_tz":-480,"elapsed":51548,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"e8f21a95-f2c7-430e-ce67-29e1200969b6","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"NdaTK82wnP1b","executionInfo":{"status":"ok","timestamp":1604858842329,"user_tz":-480,"elapsed":9693,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"6b0c7919-f80f-40d4-a4da-b3b036f2efd2","colab":{"base_uri":"https://localhost:8080/"}},"source":["!pip install wandb -qqq"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 1.8MB 11.1MB/s \n","\u001b[K     |████████████████████████████████| 102kB 13.7MB/s \n","\u001b[K     |████████████████████████████████| 133kB 48.3MB/s \n","\u001b[K     |████████████████████████████████| 163kB 51.7MB/s \n","\u001b[K     |████████████████████████████████| 102kB 13.9MB/s \n","\u001b[K     |████████████████████████████████| 71kB 10.9MB/s \n","\u001b[?25h  Building wheel for subprocess32 (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for watchdog (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9oGQD0F_dqYS"},"source":["# Preprocessing Functions\n","def vocabulary(strings):\n","    chars = sorted(list(set(list(''.join(strings)))))\n","    char_to_ix = { ch:i for i,ch in enumerate(chars) }\n","    vocab_size = len(chars)\n","    return vocab_size, char_to_ix\n","\n","def preprocess(strings, char_to_ix, MAX_LENGTH):\n","    data_chars = [list(d.lower()) for _, d in enumerate(strings)]\n","    for i, d in enumerate(data_chars):\n","        if len(d)>MAX_LENGTH:\n","            d = d[:MAX_LENGTH]\n","        elif len(d) < MAX_LENGTH:\n","            d += [' '] * (MAX_LENGTH - len(d))\n","            \n","    data_ids = np.zeros([len(data_chars), MAX_LENGTH], dtype=np.int64)\n","    for i in range(len(data_chars)):\n","        for j in range(MAX_LENGTH):\n","            data_ids[i, j] = char_to_ix[data_chars[i][j]]\n","    return np.array(data_ids)\n","\n","def read_data_chars():\n","    x_train, y_train, x_test, y_test = [], [], [], []\n","    cop = re.compile(\"[^a-z^A-Z^0-9^,^.^' ']\")\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/train_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_train.append(data)\n","            y_train.append(int(row[0]))\n","\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/test_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_test.append(data)\n","            y_test.append(int(row[0]))\n","\n","\n","    vocab_size, char_to_ix = vocabulary(x_train+x_test)\n","    x_train = preprocess(x_train, char_to_ix, 100)\n","    y_train = np.array(y_train)\n","    x_test = preprocess(x_test, char_to_ix, 100)\n","    y_test = np.array(y_test)\n","\n","    x_train = tf.constant(x_train, dtype=tf.int64)\n","    y_train = tf.constant(y_train, dtype=tf.int64)\n","    x_test = tf.constant(x_test, dtype=tf.int64)\n","    y_test = tf.constant(y_test, dtype=tf.int64)\n","\n","    return x_train, y_train, x_test, y_test\n","\n","def OneHot(input_dim=None, input_length=None):\n","    # Check if inputs were supplied correctly\n","    if input_dim is None or input_length is None:\n","        raise TypeError(\"input_dim or input_length is not set\")\n","\n","    # Helper method (not inlined for clarity)\n","    def _one_hot(x, num_classes):\n","        return K.one_hot(K.cast(x, 'uint8'),\n","                          num_classes=num_classes)\n","\n","    # Final layer representation as a Lambda layer\n","    return layers.Lambda(_one_hot,\n","                  arguments={'num_classes': input_dim},\n","                  input_shape=(input_length,))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ugg05UW4QnW8","executionInfo":{"status":"ok","timestamp":1604859298495,"user_tz":-480,"elapsed":441991,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"2241e004-ea08-4051-b113-3c1bcb883585","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import wandb\n","from wandb.keras import WandbCallback\n","from keras.preprocessing.text import Tokenizer\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow.keras import Model, layers, models\n","from keras import backend as K\n","import csv\n","import re\n","\n","# Hyperparameters\n","defaults = {\n","    'embedding_size' : 50,\n","    'hidden_size' : 20,\n","    'batch_size' : 128,\n","    'epochs' : 100,\n","    'lr' : 0.01,\n","    'Dropout' : 'Yes'\n","}\n","\n","# Initiate wandb\n","wandb.init(config=defaults, resume=True, name='CharRNN Q6c', project='NNA2 Part B Redo')\n","config = wandb.config\n","\n","# Fix lucky seed!\n","seed = 7\n","tf.random.set_seed(seed)\n","\n","# Train test split\n","x_train, y_train, x_test, y_test = read_data_chars()\n","\n","# Use `tf.data` to batch and shuffle the dataset:\n","train_ds = tf.data.Dataset.from_tensor_slices(\n","    (x_train, y_train)).shuffle(10000).batch(config.batch_size)\n","test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(config.batch_size)\n","\n","# Define model\n","tf.keras.backend.set_floatx('float32')\n","model = models.Sequential()\n","model.add(OneHot(input_dim=256, input_length=100))\n","model.add(layers.RNN(layers.GRUCell(config.hidden_size), unroll=True, return_sequences=True))\n","model.add(layers.RNN(layers.GRUCell(config.hidden_size), unroll=True))\n","model.add(layers.Dropout(0.5))\n","model.add(layers.Dense(15, activation=None))\n","model.summary()\n","\n","# Choose optimizer and loss function\n","opt = tf.keras.optimizers.Adam(learning_rate=config.lr, clipvalue=2)\n","loss_object = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n","\n","# Compile model\n","model.compile(\n","    optimizer=opt,\n","    loss=loss_object,\n","    metrics=['accuracy'],\n",")\n","\n","# Train model\n","model.fit(\n","    train_ds,\n","    validation_data=test_ds,\n","    epochs=config.epochs,\n","    callbacks=[WandbCallback()],\n","    )"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","        window._wandbApiKey = new Promise((resolve, reject) => {\n","            function loadScript(url) {\n","            return new Promise(function(resolve, reject) {\n","                let newScript = document.createElement(\"script\");\n","                newScript.onerror = reject;\n","                newScript.onload = resolve;\n","                document.body.appendChild(newScript);\n","                newScript.src = url;\n","            });\n","            }\n","            loadScript(\"https://cdn.jsdelivr.net/npm/postmate/build/postmate.min.js\").then(() => {\n","            const iframe = document.createElement('iframe')\n","            iframe.style.cssText = \"width:0;height:0;border:none\"\n","            document.body.appendChild(iframe)\n","            const handshake = new Postmate({\n","                container: iframe,\n","                url: 'https://wandb.ai/authorize'\n","            });\n","            const timeout = setTimeout(() => reject(\"Couldn't auto authenticate\"), 5000)\n","            handshake.then(function(child) {\n","                child.on('authorize', data => {\n","                    clearTimeout(timeout)\n","                    resolve(data)\n","                });\n","            });\n","            })\n","        });\n","    "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n"],"name":"stderr"},{"output_type":"stream","text":["wandb: Paste an API key from your profile and hit enter: ··········\n"],"name":"stdout"},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.9<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">CharRNN Q6c</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo</a><br/>\n","                Run page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/2mrjrrrp\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/2mrjrrrp</a><br/>\n","                Run data is saved locally in <code>wandb/run-20201108_180749-2mrjrrrp</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","lambda (Lambda)              (None, 100, 256)          0         \n","_________________________________________________________________\n","rnn (RNN)                    (None, 100, 20)           16680     \n","_________________________________________________________________\n","rnn_1 (RNN)                  (None, 20)                2520      \n","_________________________________________________________________\n","dropout (Dropout)            (None, 20)                0         \n","_________________________________________________________________\n","dense (Dense)                (None, 15)                315       \n","=================================================================\n","Total params: 19,515\n","Trainable params: 19,515\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/100\n","44/44 [==============================] - 8s 192ms/step - loss: 2.6688 - accuracy: 0.0866 - val_loss: 2.6083 - val_accuracy: 0.0914\n","Epoch 2/100\n","44/44 [==============================] - 4s 86ms/step - loss: 2.6117 - accuracy: 0.1037 - val_loss: 2.4984 - val_accuracy: 0.1843\n","Epoch 3/100\n","44/44 [==============================] - 4s 92ms/step - loss: 2.4502 - accuracy: 0.1500 - val_loss: 2.2871 - val_accuracy: 0.1714\n","Epoch 4/100\n","44/44 [==============================] - 4s 86ms/step - loss: 2.1886 - accuracy: 0.2130 - val_loss: 2.0224 - val_accuracy: 0.3171\n","Epoch 5/100\n","44/44 [==============================] - 4s 88ms/step - loss: 1.9099 - accuracy: 0.3164 - val_loss: 1.6793 - val_accuracy: 0.3929\n","Epoch 6/100\n","44/44 [==============================] - 4s 96ms/step - loss: 1.6404 - accuracy: 0.4121 - val_loss: 1.4640 - val_accuracy: 0.4771\n","Epoch 7/100\n","44/44 [==============================] - 4s 86ms/step - loss: 1.4741 - accuracy: 0.4739 - val_loss: 1.3483 - val_accuracy: 0.4943\n","Epoch 8/100\n","44/44 [==============================] - 4s 87ms/step - loss: 1.3488 - accuracy: 0.5123 - val_loss: 1.2668 - val_accuracy: 0.5371\n","Epoch 9/100\n","44/44 [==============================] - 4s 88ms/step - loss: 1.2443 - accuracy: 0.5561 - val_loss: 1.1658 - val_accuracy: 0.5757\n","Epoch 10/100\n","44/44 [==============================] - 4s 86ms/step - loss: 1.1440 - accuracy: 0.5911 - val_loss: 1.0845 - val_accuracy: 0.5871\n","Epoch 11/100\n","44/44 [==============================] - 4s 85ms/step - loss: 1.0972 - accuracy: 0.6052 - val_loss: 1.0553 - val_accuracy: 0.6300\n","Epoch 12/100\n","44/44 [==============================] - 4s 88ms/step - loss: 1.0505 - accuracy: 0.6225 - val_loss: 1.0286 - val_accuracy: 0.6429\n","Epoch 13/100\n","44/44 [==============================] - 4s 86ms/step - loss: 1.0031 - accuracy: 0.6427 - val_loss: 1.0120 - val_accuracy: 0.6600\n","Epoch 14/100\n","44/44 [==============================] - 4s 86ms/step - loss: 0.9581 - accuracy: 0.6545 - val_loss: 0.9954 - val_accuracy: 0.6543\n","Epoch 15/100\n","44/44 [==============================] - 4s 85ms/step - loss: 0.9416 - accuracy: 0.6654 - val_loss: 0.9738 - val_accuracy: 0.6700\n","Epoch 16/100\n","44/44 [==============================] - 4s 85ms/step - loss: 0.8772 - accuracy: 0.6900 - val_loss: 0.9771 - val_accuracy: 0.6929\n","Epoch 17/100\n","44/44 [==============================] - 4s 84ms/step - loss: 0.8569 - accuracy: 0.6975 - val_loss: 0.9917 - val_accuracy: 0.6757\n","Epoch 18/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.8554 - accuracy: 0.7030 - val_loss: 0.9584 - val_accuracy: 0.6900\n","Epoch 19/100\n","44/44 [==============================] - 4s 84ms/step - loss: 0.8199 - accuracy: 0.7157 - val_loss: 0.9575 - val_accuracy: 0.7100\n","Epoch 20/100\n","44/44 [==============================] - 4s 85ms/step - loss: 0.7831 - accuracy: 0.7280 - val_loss: 0.8782 - val_accuracy: 0.7129\n","Epoch 21/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.7562 - accuracy: 0.7396 - val_loss: 0.9186 - val_accuracy: 0.7286\n","Epoch 22/100\n","44/44 [==============================] - 4s 87ms/step - loss: 0.7257 - accuracy: 0.7550 - val_loss: 0.9921 - val_accuracy: 0.7029\n","Epoch 23/100\n","44/44 [==============================] - 4s 84ms/step - loss: 0.7334 - accuracy: 0.7457 - val_loss: 0.9654 - val_accuracy: 0.7086\n","Epoch 24/100\n","44/44 [==============================] - 4s 88ms/step - loss: 0.7054 - accuracy: 0.7648 - val_loss: 0.9244 - val_accuracy: 0.7157\n","Epoch 25/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.6953 - accuracy: 0.7623 - val_loss: 0.9296 - val_accuracy: 0.7143\n","Epoch 26/100\n","44/44 [==============================] - 4s 84ms/step - loss: 0.6525 - accuracy: 0.7795 - val_loss: 0.9173 - val_accuracy: 0.7129\n","Epoch 27/100\n","44/44 [==============================] - 4s 88ms/step - loss: 0.6892 - accuracy: 0.7725 - val_loss: 0.9091 - val_accuracy: 0.7343\n","Epoch 28/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.6578 - accuracy: 0.7820 - val_loss: 0.9060 - val_accuracy: 0.7329\n","Epoch 29/100\n","44/44 [==============================] - 4s 83ms/step - loss: 0.6061 - accuracy: 0.7954 - val_loss: 0.9047 - val_accuracy: 0.7286\n","Epoch 30/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.6176 - accuracy: 0.7914 - val_loss: 0.8816 - val_accuracy: 0.7386\n","Epoch 31/100\n","44/44 [==============================] - 4s 89ms/step - loss: 0.6221 - accuracy: 0.7934 - val_loss: 0.9768 - val_accuracy: 0.7271\n","Epoch 32/100\n","44/44 [==============================] - 4s 83ms/step - loss: 0.6112 - accuracy: 0.7959 - val_loss: 0.9505 - val_accuracy: 0.7286\n","Epoch 33/100\n","44/44 [==============================] - 4s 84ms/step - loss: 0.5799 - accuracy: 0.8025 - val_loss: 0.9159 - val_accuracy: 0.7229\n","Epoch 34/100\n","44/44 [==============================] - 4s 84ms/step - loss: 0.5825 - accuracy: 0.8080 - val_loss: 0.8766 - val_accuracy: 0.7371\n","Epoch 35/100\n","44/44 [==============================] - 4s 83ms/step - loss: 0.6100 - accuracy: 0.7991 - val_loss: 0.9367 - val_accuracy: 0.7414\n","Epoch 36/100\n","44/44 [==============================] - 4s 83ms/step - loss: 0.5641 - accuracy: 0.8123 - val_loss: 0.9168 - val_accuracy: 0.7614\n","Epoch 37/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.5902 - accuracy: 0.8034 - val_loss: 0.9147 - val_accuracy: 0.7486\n","Epoch 38/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.5540 - accuracy: 0.8171 - val_loss: 0.9357 - val_accuracy: 0.7414\n","Epoch 39/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.5635 - accuracy: 0.8232 - val_loss: 0.9055 - val_accuracy: 0.7543\n","Epoch 40/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.5431 - accuracy: 0.8225 - val_loss: 0.8787 - val_accuracy: 0.7600\n","Epoch 41/100\n","44/44 [==============================] - 4s 84ms/step - loss: 0.5262 - accuracy: 0.8218 - val_loss: 0.8672 - val_accuracy: 0.7486\n","Epoch 42/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.5120 - accuracy: 0.8316 - val_loss: 0.9305 - val_accuracy: 0.7471\n","Epoch 43/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.5154 - accuracy: 0.8309 - val_loss: 0.9149 - val_accuracy: 0.7557\n","Epoch 44/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.5107 - accuracy: 0.8254 - val_loss: 0.8571 - val_accuracy: 0.7629\n","Epoch 45/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.5181 - accuracy: 0.8302 - val_loss: 0.8479 - val_accuracy: 0.7671\n","Epoch 46/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.5192 - accuracy: 0.8298 - val_loss: 0.9576 - val_accuracy: 0.7443\n","Epoch 47/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.4959 - accuracy: 0.8380 - val_loss: 0.9900 - val_accuracy: 0.7471\n","Epoch 48/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.4883 - accuracy: 0.8323 - val_loss: 0.8831 - val_accuracy: 0.7457\n","Epoch 49/100\n","44/44 [==============================] - 4s 91ms/step - loss: 0.5058 - accuracy: 0.8302 - val_loss: 0.9230 - val_accuracy: 0.7543\n","Epoch 50/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.5426 - accuracy: 0.8225 - val_loss: 0.9380 - val_accuracy: 0.7429\n","Epoch 51/100\n","44/44 [==============================] - 4s 86ms/step - loss: 0.4895 - accuracy: 0.8388 - val_loss: 1.0032 - val_accuracy: 0.7514\n","Epoch 52/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.4700 - accuracy: 0.8489 - val_loss: 0.9922 - val_accuracy: 0.7486\n","Epoch 53/100\n","44/44 [==============================] - 3s 78ms/step - loss: 0.4694 - accuracy: 0.8486 - val_loss: 0.9814 - val_accuracy: 0.7443\n","Epoch 54/100\n","44/44 [==============================] - 4s 84ms/step - loss: 0.4444 - accuracy: 0.8580 - val_loss: 0.9400 - val_accuracy: 0.7571\n","Epoch 55/100\n","44/44 [==============================] - 4s 86ms/step - loss: 0.6468 - accuracy: 0.7966 - val_loss: 0.9131 - val_accuracy: 0.7657\n","Epoch 56/100\n","44/44 [==============================] - 4s 87ms/step - loss: 0.5471 - accuracy: 0.8229 - val_loss: 0.8492 - val_accuracy: 0.7643\n","Epoch 57/100\n","44/44 [==============================] - 3s 79ms/step - loss: 0.4524 - accuracy: 0.8582 - val_loss: 0.8658 - val_accuracy: 0.7657\n","Epoch 58/100\n","44/44 [==============================] - 4s 84ms/step - loss: 0.4554 - accuracy: 0.8529 - val_loss: 0.8935 - val_accuracy: 0.7757\n","Epoch 59/100\n","44/44 [==============================] - 4s 97ms/step - loss: 0.4901 - accuracy: 0.8409 - val_loss: 0.8889 - val_accuracy: 0.7771\n","Epoch 60/100\n","44/44 [==============================] - 4s 84ms/step - loss: 0.4974 - accuracy: 0.8313 - val_loss: 0.9302 - val_accuracy: 0.7671\n","Epoch 61/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.4169 - accuracy: 0.8679 - val_loss: 0.9502 - val_accuracy: 0.7743\n","Epoch 62/100\n","44/44 [==============================] - 4s 88ms/step - loss: 0.4025 - accuracy: 0.8641 - val_loss: 0.8892 - val_accuracy: 0.7786\n","Epoch 63/100\n","44/44 [==============================] - 3s 79ms/step - loss: 0.4139 - accuracy: 0.8657 - val_loss: 0.9191 - val_accuracy: 0.7729\n","Epoch 64/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.4017 - accuracy: 0.8698 - val_loss: 0.9577 - val_accuracy: 0.7600\n","Epoch 65/100\n","44/44 [==============================] - 3s 79ms/step - loss: 0.3932 - accuracy: 0.8757 - val_loss: 0.9741 - val_accuracy: 0.7743\n","Epoch 66/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.3942 - accuracy: 0.8711 - val_loss: 0.9755 - val_accuracy: 0.7729\n","Epoch 67/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.3875 - accuracy: 0.8729 - val_loss: 0.9863 - val_accuracy: 0.7557\n","Epoch 68/100\n","44/44 [==============================] - 4s 83ms/step - loss: 0.4124 - accuracy: 0.8711 - val_loss: 0.9817 - val_accuracy: 0.7571\n","Epoch 69/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.4799 - accuracy: 0.8457 - val_loss: 0.9285 - val_accuracy: 0.7743\n","Epoch 70/100\n","44/44 [==============================] - 4s 83ms/step - loss: 0.4449 - accuracy: 0.8582 - val_loss: 0.9931 - val_accuracy: 0.7543\n","Epoch 71/100\n","44/44 [==============================] - 3s 79ms/step - loss: 0.5386 - accuracy: 0.8298 - val_loss: 0.9747 - val_accuracy: 0.7586\n","Epoch 72/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.4651 - accuracy: 0.8441 - val_loss: 0.9560 - val_accuracy: 0.7729\n","Epoch 73/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.4215 - accuracy: 0.8609 - val_loss: 0.9406 - val_accuracy: 0.7757\n","Epoch 74/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.3847 - accuracy: 0.8750 - val_loss: 0.9802 - val_accuracy: 0.7629\n","Epoch 75/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.3822 - accuracy: 0.8737 - val_loss: 1.0591 - val_accuracy: 0.7700\n","Epoch 76/100\n","44/44 [==============================] - 3s 79ms/step - loss: 0.4129 - accuracy: 0.8680 - val_loss: 1.0377 - val_accuracy: 0.7671\n","Epoch 77/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.3801 - accuracy: 0.8773 - val_loss: 1.0326 - val_accuracy: 0.7757\n","Epoch 78/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.3610 - accuracy: 0.8809 - val_loss: 1.1193 - val_accuracy: 0.7671\n","Epoch 79/100\n","44/44 [==============================] - 4s 83ms/step - loss: 0.3765 - accuracy: 0.8818 - val_loss: 1.0543 - val_accuracy: 0.7657\n","Epoch 80/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.3724 - accuracy: 0.8782 - val_loss: 1.0699 - val_accuracy: 0.7643\n","Epoch 81/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.4425 - accuracy: 0.8586 - val_loss: 0.9033 - val_accuracy: 0.7600\n","Epoch 82/100\n","44/44 [==============================] - 3s 79ms/step - loss: 0.4765 - accuracy: 0.8486 - val_loss: 0.9872 - val_accuracy: 0.7600\n","Epoch 83/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.4144 - accuracy: 0.8707 - val_loss: 0.9599 - val_accuracy: 0.7700\n","Epoch 84/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.3723 - accuracy: 0.8830 - val_loss: 1.0011 - val_accuracy: 0.7500\n","Epoch 85/100\n","44/44 [==============================] - 3s 79ms/step - loss: 0.3487 - accuracy: 0.8873 - val_loss: 1.0349 - val_accuracy: 0.7657\n","Epoch 86/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.3535 - accuracy: 0.8827 - val_loss: 1.0022 - val_accuracy: 0.7543\n","Epoch 87/100\n","44/44 [==============================] - 4s 85ms/step - loss: 0.3573 - accuracy: 0.8795 - val_loss: 1.0432 - val_accuracy: 0.7557\n","Epoch 88/100\n","44/44 [==============================] - 4s 93ms/step - loss: 0.4477 - accuracy: 0.8566 - val_loss: 1.0674 - val_accuracy: 0.7486\n","Epoch 89/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.4523 - accuracy: 0.8546 - val_loss: 0.9876 - val_accuracy: 0.7614\n","Epoch 90/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.4047 - accuracy: 0.8725 - val_loss: 0.9747 - val_accuracy: 0.7671\n","Epoch 91/100\n","44/44 [==============================] - 3s 79ms/step - loss: 0.3600 - accuracy: 0.8870 - val_loss: 1.0399 - val_accuracy: 0.7643\n","Epoch 92/100\n","44/44 [==============================] - 4s 83ms/step - loss: 0.3810 - accuracy: 0.8732 - val_loss: 1.0013 - val_accuracy: 0.7600\n","Epoch 93/100\n","44/44 [==============================] - 4s 84ms/step - loss: 0.3758 - accuracy: 0.8830 - val_loss: 1.1017 - val_accuracy: 0.7586\n","Epoch 94/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.3288 - accuracy: 0.8920 - val_loss: 1.0782 - val_accuracy: 0.7543\n","Epoch 95/100\n","44/44 [==============================] - 3s 79ms/step - loss: 0.3425 - accuracy: 0.8923 - val_loss: 1.0485 - val_accuracy: 0.7586\n","Epoch 96/100\n","44/44 [==============================] - 3s 79ms/step - loss: 0.3618 - accuracy: 0.8850 - val_loss: 1.0123 - val_accuracy: 0.7700\n","Epoch 97/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.3485 - accuracy: 0.8896 - val_loss: 1.0989 - val_accuracy: 0.7600\n","Epoch 98/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.3389 - accuracy: 0.8868 - val_loss: 1.0362 - val_accuracy: 0.7714\n","Epoch 99/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.3488 - accuracy: 0.8868 - val_loss: 1.0068 - val_accuracy: 0.7671\n","Epoch 100/100\n","44/44 [==============================] - 3s 79ms/step - loss: 0.3527 - accuracy: 0.8882 - val_loss: 1.0712 - val_accuracy: 0.7557\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7ff1bfd5e7f0>"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"C-60Y8FPS7Ki"},"source":[""],"execution_count":null,"outputs":[]}]}