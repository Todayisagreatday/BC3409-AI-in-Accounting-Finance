{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"text_class_4b_redo","provenance":[],"authorship_tag":"ABX9TyOAyfIP6BvixK0hZ5wLwEoi"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"-M48O3QXt0dc","executionInfo":{"status":"ok","timestamp":1604845568189,"user_tz":-480,"elapsed":38212,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"023ab017-15f3-4c7f-a280-85a5351dd490","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Z2gdCDhmybWe","executionInfo":{"status":"ok","timestamp":1604845666484,"user_tz":-480,"elapsed":10782,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"5c28ee08-e013-4e74-f2fe-a88209b75eaf","colab":{"base_uri":"https://localhost:8080/"}},"source":["!pip install wandb -qqq"],"execution_count":2,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 1.8MB 10.8MB/s \n","\u001b[K     |████████████████████████████████| 102kB 12.3MB/s \n","\u001b[K     |████████████████████████████████| 163kB 52.2MB/s \n","\u001b[K     |████████████████████████████████| 102kB 13.7MB/s \n","\u001b[K     |████████████████████████████████| 133kB 51.3MB/s \n","\u001b[K     |████████████████████████████████| 71kB 11.3MB/s \n","\u001b[?25h  Building wheel for watchdog (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for subprocess32 (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"aUnW2mpR502Y","executionInfo":{"status":"ok","timestamp":1604845668050,"user_tz":-480,"elapsed":9467,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"9d6c08b4-db20-41cf-d6e0-9e1bbdea90b1","colab":{"base_uri":"https://localhost:8080/"}},"source":["import nltk\n","nltk.download('punkt')"],"execution_count":3,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"YV-vgOrwzbhT","executionInfo":{"status":"ok","timestamp":1604845668058,"user_tz":-480,"elapsed":8833,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}}},"source":["# Preprocessing Functions\n","def clean_str(text):\n","    text = re.sub(r\"[^A-Za-z0-9(),!?\\'\\`\\\"]\", \" \", text)\n","    text = re.sub(r\"\\s{2,}\", \" \", text)\n","    text = text.strip().lower()\n","\n","    return text\n","\n","\n","def build_word_dict(contents):\n","    words = list()\n","    for content in contents:\n","        for word in word_tokenize(clean_str(content)):\n","            words.append(word)\n","\n","    word_counter = collections.Counter(words).most_common()\n","    word_dict = dict()\n","    word_dict[\"<pad>\"] = 0\n","    word_dict[\"<unk>\"] = 1\n","    word_dict[\"<eos>\"] = 2\n","    for word, _ in word_counter:\n","        word_dict[word] = len(word_dict)\n","    return word_dict\n","\n","\n","def preprocess(contents, word_dict, document_max_len):\n","    x = list(map(lambda d: word_tokenize(clean_str(d)), contents))\n","    x = list(map(lambda d: list(map(lambda w: word_dict.get(w, word_dict[\"<unk>\"]), d)), x))\n","    x = list(map(lambda d: d + [word_dict[\"<eos>\"]], x))\n","    x = list(map(lambda d: d[:document_max_len], x))\n","    x = list(map(lambda d: d + (document_max_len - len(d)) * [word_dict[\"<pad>\"]], x))\n","    return x\n","\n","\n","def read_data_words():\n","    x_train, y_train, x_test, y_test = [], [], [], []\n","    cop = re.compile(\"[^a-z^A-Z^0-9^,^.^' ']\")\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/train_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_train.append(data)\n","            y_train.append(int(row[0]))\n","\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/test_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_test.append(data)\n","            y_test.append(int(row[0]))\n","\n","    word_dict = build_word_dict(x_train+x_test)\n","    x_train = preprocess(x_train, word_dict, 100)\n","    y_train = np.array(y_train)\n","    x_test = preprocess(x_test, word_dict, 100)\n","    y_test = np.array(y_test)\n","\n","    x_train = [x[:100] for x in x_train]\n","    x_test = [x[:100] for x in x_test]\n","    x_train = tf.constant(x_train, dtype=tf.int64)\n","    y_train = tf.constant(y_train, dtype=tf.int64)\n","    x_test = tf.constant(x_test, dtype=tf.int64)\n","    y_test = tf.constant(y_test, dtype=tf.int64)\n","\n","    vocab_size = tf.get_static_value(tf.reduce_max(x_train))\n","    vocab_size = max(vocab_size, tf.get_static_value(tf.reduce_max(x_test))) + 1\n","    return x_train, y_train, x_test, y_test, vocab_size"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"CnWPz07jyrXz","executionInfo":{"status":"ok","timestamp":1604847111550,"user_tz":-480,"elapsed":980429,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"e8d0a0be-95fe-4f6c-8114-95926e5ea359","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import wandb\n","from wandb.keras import WandbCallback\n","import collections\n","import numpy as np\n","import tensorflow as tf\n","from nltk.tokenize import word_tokenize\n","from tensorflow.keras import Model, layers, models\n","import csv\n","import re\n","\n","# Hyperparameters\n","defaults = {\n","    'embedding_size' : 50,\n","    'hidden_size' : 20,\n","    'hidden_dim' : 10,\n","    'batch_size' : 128,\n","    'epochs' : 100,\n","    'lr' : 0.01,\n","    'Dropout' : 'Yes'\n","}\n","\n","# Initiate wandb\n","wandb.init(config=defaults, resume=True, name='WordRNN Q4b redo', project='NNA2 Part B', notes ='hidden size = 20')\n","config = wandb.config\n","\n","# Fix lucky seed!\n","seed = 7\n","tf.random.set_seed(seed)\n","\n","# Train test split\n","x_train, y_train, x_test, y_test, vocab_size = read_data_words()\n","\n","# Use `tf.data` to batch and shuffle the dataset:\n","train_ds = tf.data.Dataset.from_tensor_slices(\n","    (x_train, y_train)).shuffle(10000).batch(config.batch_size)\n","test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(config.batch_size)\n","\n","# Define model\n","tf.keras.backend.set_floatx('float32')\n","model = models.Sequential()\n","model.add(layers.Embedding(vocab_size, config.embedding_size, input_length=100))\n","model.add(layers.Dropout(0.5))\n","model.add(layers.RNN(layers.GRUCell(config.hidden_size), unroll=True))\n","model.add(layers.Dense(15, activation=None))\n","model.summary()\n","\n","# Choose optimizer and loss function\n","opt = tf.keras.optimizers.Adam(learning_rate=config.lr)\n","loss_object = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n","\n","# Compile model\n","model.compile(\n","    optimizer=opt,\n","    loss=loss_object,\n","    metrics=['accuracy'],\n",")\n","\n","# Train model\n","model.fit(\n","    x_train, y_train,\n","    validation_data=(x_test, y_test),\n","    epochs=config.epochs,\n","    callbacks=[WandbCallback()],\n","    )"],"execution_count":5,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","        window._wandbApiKey = new Promise((resolve, reject) => {\n","            function loadScript(url) {\n","            return new Promise(function(resolve, reject) {\n","                let newScript = document.createElement(\"script\");\n","                newScript.onerror = reject;\n","                newScript.onload = resolve;\n","                document.body.appendChild(newScript);\n","                newScript.src = url;\n","            });\n","            }\n","            loadScript(\"https://cdn.jsdelivr.net/npm/postmate/build/postmate.min.js\").then(() => {\n","            const iframe = document.createElement('iframe')\n","            iframe.style.cssText = \"width:0;height:0;border:none\"\n","            document.body.appendChild(iframe)\n","            const handshake = new Postmate({\n","                container: iframe,\n","                url: 'https://wandb.ai/authorize'\n","            });\n","            const timeout = setTimeout(() => reject(\"Couldn't auto authenticate\"), 5000)\n","            handshake.then(function(child) {\n","                child.on('authorize', data => {\n","                    clearTimeout(timeout)\n","                    resolve(data)\n","                });\n","            });\n","            })\n","        });\n","    "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n"],"name":"stderr"},{"output_type":"stream","text":["wandb: Paste an API key from your profile and hit enter: ··········\n"],"name":"stdout"},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.9<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">WordRNN Q4b redo</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B</a><br/>\n","                Run page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B/runs/l25ofh9j\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B/runs/l25ofh9j</a><br/>\n","                Run data is saved locally in <code>wandb/run-20201108_143548-l25ofh9j</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding (Embedding)        (None, 100, 50)           1764350   \n","_________________________________________________________________\n","dropout (Dropout)            (None, 100, 50)           0         \n","_________________________________________________________________\n","rnn (RNN)                    (None, 20)                4320      \n","_________________________________________________________________\n","dense (Dense)                (None, 15)                315       \n","=================================================================\n","Total params: 1,768,985\n","Trainable params: 1,768,985\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/100\n","175/175 [==============================] - 12s 67ms/step - loss: 2.6639 - accuracy: 0.0661 - val_loss: 2.6452 - val_accuracy: 0.0714\n","Epoch 2/100\n","175/175 [==============================] - 9s 53ms/step - loss: 2.6477 - accuracy: 0.0748 - val_loss: 2.6473 - val_accuracy: 0.0714\n","Epoch 3/100\n","175/175 [==============================] - 9s 53ms/step - loss: 2.6479 - accuracy: 0.0761 - val_loss: 2.6425 - val_accuracy: 0.0714\n","Epoch 4/100\n","175/175 [==============================] - 9s 54ms/step - loss: 2.6464 - accuracy: 0.0639 - val_loss: 2.6411 - val_accuracy: 0.0729\n","Epoch 5/100\n","175/175 [==============================] - 9s 53ms/step - loss: 2.1982 - accuracy: 0.2118 - val_loss: 1.4559 - val_accuracy: 0.4900\n","Epoch 6/100\n","175/175 [==============================] - 9s 54ms/step - loss: 1.1394 - accuracy: 0.6118 - val_loss: 0.7668 - val_accuracy: 0.7286\n","Epoch 7/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.6849 - accuracy: 0.7793 - val_loss: 0.6576 - val_accuracy: 0.7943\n","Epoch 8/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.4944 - accuracy: 0.8484 - val_loss: 0.5565 - val_accuracy: 0.8214\n","Epoch 9/100\n","175/175 [==============================] - 10s 54ms/step - loss: 0.3544 - accuracy: 0.8934 - val_loss: 0.4842 - val_accuracy: 0.8357\n","Epoch 10/100\n","175/175 [==============================] - 10s 54ms/step - loss: 0.2935 - accuracy: 0.9123 - val_loss: 0.4615 - val_accuracy: 0.8643\n","Epoch 11/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.2319 - accuracy: 0.9311 - val_loss: 0.4576 - val_accuracy: 0.8471\n","Epoch 12/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.1973 - accuracy: 0.9436 - val_loss: 0.4509 - val_accuracy: 0.8657\n","Epoch 13/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.1652 - accuracy: 0.9525 - val_loss: 0.4522 - val_accuracy: 0.8714\n","Epoch 14/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.1368 - accuracy: 0.9596 - val_loss: 0.4357 - val_accuracy: 0.8671\n","Epoch 15/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.1296 - accuracy: 0.9613 - val_loss: 0.4290 - val_accuracy: 0.8771\n","Epoch 16/100\n","175/175 [==============================] - 10s 55ms/step - loss: 0.1202 - accuracy: 0.9641 - val_loss: 0.4634 - val_accuracy: 0.8686\n","Epoch 17/100\n","175/175 [==============================] - 10s 54ms/step - loss: 0.1005 - accuracy: 0.9702 - val_loss: 0.4445 - val_accuracy: 0.8714\n","Epoch 18/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0957 - accuracy: 0.9709 - val_loss: 0.4518 - val_accuracy: 0.8743\n","Epoch 19/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0935 - accuracy: 0.9714 - val_loss: 0.4445 - val_accuracy: 0.8829\n","Epoch 20/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0786 - accuracy: 0.9770 - val_loss: 0.4478 - val_accuracy: 0.8843\n","Epoch 21/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0787 - accuracy: 0.9771 - val_loss: 0.4589 - val_accuracy: 0.8929\n","Epoch 22/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0751 - accuracy: 0.9777 - val_loss: 0.4816 - val_accuracy: 0.8800\n","Epoch 23/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0625 - accuracy: 0.9811 - val_loss: 0.4549 - val_accuracy: 0.8829\n","Epoch 24/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0565 - accuracy: 0.9836 - val_loss: 0.4505 - val_accuracy: 0.8829\n","Epoch 25/100\n","175/175 [==============================] - 9s 52ms/step - loss: 0.0749 - accuracy: 0.9786 - val_loss: 0.4302 - val_accuracy: 0.8857\n","Epoch 26/100\n","175/175 [==============================] - 9s 52ms/step - loss: 0.0593 - accuracy: 0.9814 - val_loss: 0.4273 - val_accuracy: 0.8886\n","Epoch 27/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0728 - accuracy: 0.9779 - val_loss: 0.4065 - val_accuracy: 0.8971\n","Epoch 28/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0681 - accuracy: 0.9802 - val_loss: 0.4034 - val_accuracy: 0.8971\n","Epoch 29/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0604 - accuracy: 0.9795 - val_loss: 0.4105 - val_accuracy: 0.8957\n","Epoch 30/100\n","175/175 [==============================] - 9s 52ms/step - loss: 0.0605 - accuracy: 0.9837 - val_loss: 0.4433 - val_accuracy: 0.8843\n","Epoch 31/100\n","175/175 [==============================] - 9s 52ms/step - loss: 0.0509 - accuracy: 0.9845 - val_loss: 0.4279 - val_accuracy: 0.8914\n","Epoch 32/100\n","175/175 [==============================] - 9s 52ms/step - loss: 0.0486 - accuracy: 0.9855 - val_loss: 0.4475 - val_accuracy: 0.8900\n","Epoch 33/100\n","175/175 [==============================] - 9s 52ms/step - loss: 0.0622 - accuracy: 0.9812 - val_loss: 0.4336 - val_accuracy: 0.8929\n","Epoch 34/100\n","175/175 [==============================] - 9s 52ms/step - loss: 0.0531 - accuracy: 0.9843 - val_loss: 0.4522 - val_accuracy: 0.8886\n","Epoch 35/100\n","175/175 [==============================] - 9s 52ms/step - loss: 0.0478 - accuracy: 0.9857 - val_loss: 0.4456 - val_accuracy: 0.8814\n","Epoch 36/100\n","175/175 [==============================] - 9s 52ms/step - loss: 0.0485 - accuracy: 0.9855 - val_loss: 0.4667 - val_accuracy: 0.8857\n","Epoch 37/100\n","175/175 [==============================] - 9s 52ms/step - loss: 0.0684 - accuracy: 0.9802 - val_loss: 0.4468 - val_accuracy: 0.8857\n","Epoch 38/100\n","175/175 [==============================] - 9s 52ms/step - loss: 0.0456 - accuracy: 0.9864 - val_loss: 0.4427 - val_accuracy: 0.8929\n","Epoch 39/100\n","175/175 [==============================] - 9s 52ms/step - loss: 0.0447 - accuracy: 0.9868 - val_loss: 0.4612 - val_accuracy: 0.8871\n","Epoch 40/100\n","175/175 [==============================] - 9s 52ms/step - loss: 0.0409 - accuracy: 0.9870 - val_loss: 0.4349 - val_accuracy: 0.8871\n","Epoch 41/100\n","175/175 [==============================] - 9s 52ms/step - loss: 0.0332 - accuracy: 0.9896 - val_loss: 0.4942 - val_accuracy: 0.8857\n","Epoch 42/100\n","175/175 [==============================] - 9s 52ms/step - loss: 0.0568 - accuracy: 0.9834 - val_loss: 0.4853 - val_accuracy: 0.8843\n","Epoch 43/100\n","175/175 [==============================] - 9s 52ms/step - loss: 0.0542 - accuracy: 0.9850 - val_loss: 0.4735 - val_accuracy: 0.8900\n","Epoch 44/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0524 - accuracy: 0.9843 - val_loss: 0.4746 - val_accuracy: 0.8714\n","Epoch 45/100\n","175/175 [==============================] - 9s 52ms/step - loss: 0.0434 - accuracy: 0.9864 - val_loss: 0.4462 - val_accuracy: 0.8914\n","Epoch 46/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0488 - accuracy: 0.9836 - val_loss: 0.5299 - val_accuracy: 0.8714\n","Epoch 47/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0428 - accuracy: 0.9868 - val_loss: 0.4234 - val_accuracy: 0.8857\n","Epoch 48/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0400 - accuracy: 0.9875 - val_loss: 0.4337 - val_accuracy: 0.8886\n","Epoch 49/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0479 - accuracy: 0.9848 - val_loss: 0.4813 - val_accuracy: 0.8700\n","Epoch 50/100\n","175/175 [==============================] - 10s 55ms/step - loss: 0.0396 - accuracy: 0.9879 - val_loss: 0.5107 - val_accuracy: 0.8629\n","Epoch 51/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0337 - accuracy: 0.9904 - val_loss: 0.5231 - val_accuracy: 0.8700\n","Epoch 52/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0551 - accuracy: 0.9827 - val_loss: 0.4877 - val_accuracy: 0.8686\n","Epoch 53/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0485 - accuracy: 0.9861 - val_loss: 0.4790 - val_accuracy: 0.8586\n","Epoch 54/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0418 - accuracy: 0.9848 - val_loss: 0.4572 - val_accuracy: 0.8771\n","Epoch 55/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0402 - accuracy: 0.9862 - val_loss: 0.4159 - val_accuracy: 0.8914\n","Epoch 56/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0391 - accuracy: 0.9884 - val_loss: 0.4572 - val_accuracy: 0.8829\n","Epoch 57/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0449 - accuracy: 0.9845 - val_loss: 0.4260 - val_accuracy: 0.8814\n","Epoch 58/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0454 - accuracy: 0.9855 - val_loss: 0.4934 - val_accuracy: 0.8700\n","Epoch 59/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0438 - accuracy: 0.9868 - val_loss: 0.4336 - val_accuracy: 0.8829\n","Epoch 60/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0421 - accuracy: 0.9871 - val_loss: 0.4485 - val_accuracy: 0.8800\n","Epoch 61/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0391 - accuracy: 0.9882 - val_loss: 0.4846 - val_accuracy: 0.8757\n","Epoch 62/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0447 - accuracy: 0.9852 - val_loss: 0.5180 - val_accuracy: 0.8729\n","Epoch 63/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0461 - accuracy: 0.9862 - val_loss: 0.4410 - val_accuracy: 0.8843\n","Epoch 64/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0376 - accuracy: 0.9893 - val_loss: 0.4399 - val_accuracy: 0.8914\n","Epoch 65/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0475 - accuracy: 0.9848 - val_loss: 0.4461 - val_accuracy: 0.8800\n","Epoch 66/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0344 - accuracy: 0.9893 - val_loss: 0.4586 - val_accuracy: 0.8843\n","Epoch 67/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0339 - accuracy: 0.9891 - val_loss: 0.4152 - val_accuracy: 0.8843\n","Epoch 68/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0389 - accuracy: 0.9880 - val_loss: 0.4586 - val_accuracy: 0.8800\n","Epoch 69/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0322 - accuracy: 0.9898 - val_loss: 0.4656 - val_accuracy: 0.8800\n","Epoch 70/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0405 - accuracy: 0.9871 - val_loss: 0.4852 - val_accuracy: 0.8800\n","Epoch 71/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0348 - accuracy: 0.9879 - val_loss: 0.5051 - val_accuracy: 0.8757\n","Epoch 72/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0422 - accuracy: 0.9882 - val_loss: 0.4973 - val_accuracy: 0.8671\n","Epoch 73/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0475 - accuracy: 0.9850 - val_loss: 0.4557 - val_accuracy: 0.8757\n","Epoch 74/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0355 - accuracy: 0.9886 - val_loss: 0.4668 - val_accuracy: 0.8671\n","Epoch 75/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0320 - accuracy: 0.9902 - val_loss: 0.5007 - val_accuracy: 0.8714\n","Epoch 76/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0303 - accuracy: 0.9900 - val_loss: 0.4656 - val_accuracy: 0.8714\n","Epoch 77/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0310 - accuracy: 0.9904 - val_loss: 0.4818 - val_accuracy: 0.8714\n","Epoch 78/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0439 - accuracy: 0.9861 - val_loss: 0.5303 - val_accuracy: 0.8686\n","Epoch 79/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0447 - accuracy: 0.9875 - val_loss: 0.4489 - val_accuracy: 0.8771\n","Epoch 80/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0295 - accuracy: 0.9902 - val_loss: 0.4583 - val_accuracy: 0.8757\n","Epoch 81/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0327 - accuracy: 0.9895 - val_loss: 0.4648 - val_accuracy: 0.8786\n","Epoch 82/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0335 - accuracy: 0.9900 - val_loss: 0.4799 - val_accuracy: 0.8800\n","Epoch 83/100\n","175/175 [==============================] - 10s 55ms/step - loss: 0.0449 - accuracy: 0.9850 - val_loss: 0.5163 - val_accuracy: 0.8829\n","Epoch 84/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0388 - accuracy: 0.9898 - val_loss: 0.4667 - val_accuracy: 0.8786\n","Epoch 85/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0486 - accuracy: 0.9866 - val_loss: 0.4591 - val_accuracy: 0.8886\n","Epoch 86/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0391 - accuracy: 0.9877 - val_loss: 0.4475 - val_accuracy: 0.8857\n","Epoch 87/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0404 - accuracy: 0.9875 - val_loss: 0.5213 - val_accuracy: 0.8714\n","Epoch 88/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0429 - accuracy: 0.9871 - val_loss: 0.5029 - val_accuracy: 0.8743\n","Epoch 89/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0429 - accuracy: 0.9864 - val_loss: 0.4853 - val_accuracy: 0.8843\n","Epoch 90/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0376 - accuracy: 0.9879 - val_loss: 0.5107 - val_accuracy: 0.8900\n","Epoch 91/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0600 - accuracy: 0.9823 - val_loss: 0.5017 - val_accuracy: 0.8900\n","Epoch 92/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0528 - accuracy: 0.9848 - val_loss: 0.4591 - val_accuracy: 0.8800\n","Epoch 93/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0377 - accuracy: 0.9880 - val_loss: 0.5057 - val_accuracy: 0.8786\n","Epoch 94/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0401 - accuracy: 0.9887 - val_loss: 0.4997 - val_accuracy: 0.8757\n","Epoch 95/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0311 - accuracy: 0.9904 - val_loss: 0.4813 - val_accuracy: 0.8829\n","Epoch 96/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0358 - accuracy: 0.9880 - val_loss: 0.5018 - val_accuracy: 0.8771\n","Epoch 97/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0326 - accuracy: 0.9905 - val_loss: 0.4719 - val_accuracy: 0.8857\n","Epoch 98/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0424 - accuracy: 0.9861 - val_loss: 0.4830 - val_accuracy: 0.8871\n","Epoch 99/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0388 - accuracy: 0.9882 - val_loss: 0.4986 - val_accuracy: 0.8871\n","Epoch 100/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0419 - accuracy: 0.9886 - val_loss: 0.5270 - val_accuracy: 0.8814\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f790a45ea58>"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"10s9udsJChxm"},"source":[""],"execution_count":null,"outputs":[]}]}