{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"text_class_4a_redo","provenance":[],"authorship_tag":"ABX9TyO6yatXpWDdpWGUjgv9E39x"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"-M48O3QXt0dc","executionInfo":{"status":"ok","timestamp":1604844644626,"user_tz":-480,"elapsed":30650,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"2262bc91-5196-4359-8638-a88d004c7ac1","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Z2gdCDhmybWe","executionInfo":{"status":"ok","timestamp":1604844653962,"user_tz":-480,"elapsed":39957,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"4f7e7e17-536c-4256-e1e6-f1091091d023","colab":{"base_uri":"https://localhost:8080/"}},"source":["!pip install wandb -qqq"],"execution_count":2,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 1.8MB 9.2MB/s \n","\u001b[K     |████████████████████████████████| 102kB 12.0MB/s \n","\u001b[K     |████████████████████████████████| 102kB 13.1MB/s \n","\u001b[K     |████████████████████████████████| 163kB 50.7MB/s \n","\u001b[K     |████████████████████████████████| 133kB 57.8MB/s \n","\u001b[K     |████████████████████████████████| 71kB 11.1MB/s \n","\u001b[?25h  Building wheel for watchdog (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for subprocess32 (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"aUnW2mpR502Y","executionInfo":{"status":"ok","timestamp":1604844655929,"user_tz":-480,"elapsed":41894,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"a24dcba1-c5bb-4331-fb2e-730c019cb2b9","colab":{"base_uri":"https://localhost:8080/"}},"source":["import nltk\n","nltk.download('punkt')"],"execution_count":3,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"YV-vgOrwzbhT","executionInfo":{"status":"ok","timestamp":1604844655933,"user_tz":-480,"elapsed":41887,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}}},"source":["# Preprocessing Functions\n","def clean_str(text):\n","    text = re.sub(r\"[^A-Za-z0-9(),!?\\'\\`\\\"]\", \" \", text)\n","    text = re.sub(r\"\\s{2,}\", \" \", text)\n","    text = text.strip().lower()\n","\n","    return text\n","\n","\n","def build_word_dict(contents):\n","    words = list()\n","    for content in contents:\n","        for word in word_tokenize(clean_str(content)):\n","            words.append(word)\n","\n","    word_counter = collections.Counter(words).most_common()\n","    word_dict = dict()\n","    word_dict[\"<pad>\"] = 0\n","    word_dict[\"<unk>\"] = 1\n","    word_dict[\"<eos>\"] = 2\n","    for word, _ in word_counter:\n","        word_dict[word] = len(word_dict)\n","    return word_dict\n","\n","\n","def preprocess(contents, word_dict, document_max_len):\n","    x = list(map(lambda d: word_tokenize(clean_str(d)), contents))\n","    x = list(map(lambda d: list(map(lambda w: word_dict.get(w, word_dict[\"<unk>\"]), d)), x))\n","    x = list(map(lambda d: d + [word_dict[\"<eos>\"]], x))\n","    x = list(map(lambda d: d[:document_max_len], x))\n","    x = list(map(lambda d: d + (document_max_len - len(d)) * [word_dict[\"<pad>\"]], x))\n","    return x\n","\n","\n","def read_data_words():\n","    x_train, y_train, x_test, y_test = [], [], [], []\n","    cop = re.compile(\"[^a-z^A-Z^0-9^,^.^' ']\")\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/train_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_train.append(data)\n","            y_train.append(int(row[0]))\n","\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/test_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_test.append(data)\n","            y_test.append(int(row[0]))\n","\n","    word_dict = build_word_dict(x_train+x_test)\n","    x_train = preprocess(x_train, word_dict, 100)\n","    y_train = np.array(y_train)\n","    x_test = preprocess(x_test, word_dict, 100)\n","    y_test = np.array(y_test)\n","\n","    x_train = [x[:100] for x in x_train]\n","    x_test = [x[:100] for x in x_test]\n","    x_train = tf.constant(x_train, dtype=tf.int64)\n","    y_train = tf.constant(y_train, dtype=tf.int64)\n","    x_test = tf.constant(x_test, dtype=tf.int64)\n","    y_test = tf.constant(y_test, dtype=tf.int64)\n","\n","    vocab_size = tf.get_static_value(tf.reduce_max(x_train))\n","    vocab_size = max(vocab_size, tf.get_static_value(tf.reduce_max(x_test))) + 1\n","    return x_train, y_train, x_test, y_test, vocab_size"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"CnWPz07jyrXz","executionInfo":{"status":"ok","timestamp":1604845597825,"user_tz":-480,"elapsed":930440,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"338a5c95-209a-42f7-f965-dff2d3caffab","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import wandb\n","from wandb.keras import WandbCallback\n","import collections\n","import numpy as np\n","import tensorflow as tf\n","from nltk.tokenize import word_tokenize\n","from tensorflow.keras import Model, layers, models\n","import csv\n","import re\n","\n","# Hyperparameters\n","defaults = {\n","    'embedding_size' : 50,\n","    'hidden_size' : 20,\n","    'hidden_dim' : 10,\n","    'batch_size' : 128,\n","    'epochs' : 100,\n","    'lr' : 0.01,\n","    'Dropout' : 'No'\n","}\n","\n","# Initiate wandb\n","wandb.init(config=defaults, resume=True, name='WordRNN Q4a redo', project='NNA2 Part B')\n","config = wandb.config\n","\n","# Fix lucky seed!\n","seed = 7\n","tf.random.set_seed(seed)\n","\n","# Train test split\n","x_train, y_train, x_test, y_test, vocab_size = read_data_words()\n","\n","# Use `tf.data` to batch and shuffle the dataset:\n","train_ds = tf.data.Dataset.from_tensor_slices(\n","    (x_train, y_train)).shuffle(10000).batch(config.batch_size)\n","test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(config.batch_size)\n","\n","# Define model\n","tf.keras.backend.set_floatx('float32')\n","model = models.Sequential()\n","model.add(layers.Embedding(vocab_size, config.embedding_size, input_length=100))\n","model.add(layers.RNN(layers.GRUCell(config.hidden_size), unroll=True))\n","model.add(layers.Dense(15, activation=None))\n","model.summary()\n","\n","# Choose optimizer and loss function\n","opt = tf.keras.optimizers.Adam(learning_rate=config.lr)\n","loss_object = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n","\n","# Compile model\n","model.compile(\n","    optimizer=opt,\n","    loss=loss_object,\n","    metrics=['accuracy'],\n",")\n","\n","# Train model\n","model.fit(\n","    x_train, y_train,\n","    validation_data=(x_test, y_test),\n","    epochs=config.epochs,\n","    callbacks=[WandbCallback()],\n","    )"],"execution_count":5,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","        window._wandbApiKey = new Promise((resolve, reject) => {\n","            function loadScript(url) {\n","            return new Promise(function(resolve, reject) {\n","                let newScript = document.createElement(\"script\");\n","                newScript.onerror = reject;\n","                newScript.onload = resolve;\n","                document.body.appendChild(newScript);\n","                newScript.src = url;\n","            });\n","            }\n","            loadScript(\"https://cdn.jsdelivr.net/npm/postmate/build/postmate.min.js\").then(() => {\n","            const iframe = document.createElement('iframe')\n","            iframe.style.cssText = \"width:0;height:0;border:none\"\n","            document.body.appendChild(iframe)\n","            const handshake = new Postmate({\n","                container: iframe,\n","                url: 'https://wandb.ai/authorize'\n","            });\n","            const timeout = setTimeout(() => reject(\"Couldn't auto authenticate\"), 5000)\n","            handshake.then(function(child) {\n","                child.on('authorize', data => {\n","                    clearTimeout(timeout)\n","                    resolve(data)\n","                });\n","            });\n","            })\n","        });\n","    "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n"],"name":"stderr"},{"output_type":"stream","text":["wandb: Paste an API key from your profile and hit enter: ··········\n"],"name":"stdout"},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.9<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">WordRNN Q4a redo</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B</a><br/>\n","                Run page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B/runs/1i14ylq4\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B/runs/1i14ylq4</a><br/>\n","                Run data is saved locally in <code>wandb/run-20201108_141121-1i14ylq4</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding (Embedding)        (None, 100, 50)           1764350   \n","_________________________________________________________________\n","rnn (RNN)                    (None, 20)                4320      \n","_________________________________________________________________\n","dense (Dense)                (None, 15)                315       \n","=================================================================\n","Total params: 1,768,985\n","Trainable params: 1,768,985\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/100\n","175/175 [==============================] - 12s 66ms/step - loss: 2.6635 - accuracy: 0.0632 - val_loss: 2.6457 - val_accuracy: 0.0714\n","Epoch 2/100\n","175/175 [==============================] - 9s 54ms/step - loss: 1.9834 - accuracy: 0.2725 - val_loss: 1.1738 - val_accuracy: 0.6114\n","Epoch 3/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.7089 - accuracy: 0.7766 - val_loss: 0.5304 - val_accuracy: 0.8486\n","Epoch 4/100\n","175/175 [==============================] - 9s 52ms/step - loss: 0.2398 - accuracy: 0.9334 - val_loss: 0.4054 - val_accuracy: 0.8957\n","Epoch 5/100\n","175/175 [==============================] - 9s 53ms/step - loss: 0.0785 - accuracy: 0.9820 - val_loss: 0.3798 - val_accuracy: 0.8943\n","Epoch 6/100\n","175/175 [==============================] - 9s 52ms/step - loss: 0.0290 - accuracy: 0.9946 - val_loss: 0.3863 - val_accuracy: 0.8929\n","Epoch 7/100\n","175/175 [==============================] - 9s 52ms/step - loss: 0.0150 - accuracy: 0.9966 - val_loss: 0.3904 - val_accuracy: 0.8914\n","Epoch 8/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0118 - accuracy: 0.9975 - val_loss: 0.4587 - val_accuracy: 0.8814\n","Epoch 9/100\n","175/175 [==============================] - 9s 54ms/step - loss: 0.0049 - accuracy: 0.9996 - val_loss: 0.4365 - val_accuracy: 0.8929\n","Epoch 10/100\n","175/175 [==============================] - 10s 55ms/step - loss: 0.0019 - accuracy: 1.0000 - val_loss: 0.4446 - val_accuracy: 0.8914\n","Epoch 11/100\n","175/175 [==============================] - 10s 54ms/step - loss: 0.0012 - accuracy: 1.0000 - val_loss: 0.4559 - val_accuracy: 0.8929\n","Epoch 12/100\n","175/175 [==============================] - 9s 54ms/step - loss: 9.5167e-04 - accuracy: 1.0000 - val_loss: 0.4674 - val_accuracy: 0.8914\n","Epoch 13/100\n","175/175 [==============================] - 9s 52ms/step - loss: 7.6602e-04 - accuracy: 1.0000 - val_loss: 0.4774 - val_accuracy: 0.8886\n","Epoch 14/100\n","175/175 [==============================] - 9s 52ms/step - loss: 6.3634e-04 - accuracy: 1.0000 - val_loss: 0.4864 - val_accuracy: 0.8886\n","Epoch 15/100\n","175/175 [==============================] - 9s 52ms/step - loss: 5.3699e-04 - accuracy: 1.0000 - val_loss: 0.4946 - val_accuracy: 0.8871\n","Epoch 16/100\n","175/175 [==============================] - 9s 52ms/step - loss: 4.5861e-04 - accuracy: 1.0000 - val_loss: 0.5027 - val_accuracy: 0.8871\n","Epoch 17/100\n","175/175 [==============================] - 9s 52ms/step - loss: 3.9500e-04 - accuracy: 1.0000 - val_loss: 0.5108 - val_accuracy: 0.8871\n","Epoch 18/100\n","175/175 [==============================] - 9s 51ms/step - loss: 3.4327e-04 - accuracy: 1.0000 - val_loss: 0.5191 - val_accuracy: 0.8843\n","Epoch 19/100\n","175/175 [==============================] - 9s 51ms/step - loss: 3.0012e-04 - accuracy: 1.0000 - val_loss: 0.5278 - val_accuracy: 0.8829\n","Epoch 20/100\n","175/175 [==============================] - 9s 51ms/step - loss: 2.6426e-04 - accuracy: 1.0000 - val_loss: 0.5364 - val_accuracy: 0.8814\n","Epoch 21/100\n","175/175 [==============================] - 9s 50ms/step - loss: 2.3368e-04 - accuracy: 1.0000 - val_loss: 0.5451 - val_accuracy: 0.8800\n","Epoch 22/100\n","175/175 [==============================] - 9s 49ms/step - loss: 2.0733e-04 - accuracy: 1.0000 - val_loss: 0.5536 - val_accuracy: 0.8829\n","Epoch 23/100\n","175/175 [==============================] - 9s 49ms/step - loss: 1.8490e-04 - accuracy: 1.0000 - val_loss: 0.5615 - val_accuracy: 0.8800\n","Epoch 24/100\n","175/175 [==============================] - 9s 49ms/step - loss: 1.6511e-04 - accuracy: 1.0000 - val_loss: 0.5694 - val_accuracy: 0.8800\n","Epoch 25/100\n","175/175 [==============================] - 9s 49ms/step - loss: 1.4795e-04 - accuracy: 1.0000 - val_loss: 0.5774 - val_accuracy: 0.8814\n","Epoch 26/100\n","175/175 [==============================] - 8s 48ms/step - loss: 1.3275e-04 - accuracy: 1.0000 - val_loss: 0.5848 - val_accuracy: 0.8829\n","Epoch 27/100\n","175/175 [==============================] - 8s 48ms/step - loss: 1.1931e-04 - accuracy: 1.0000 - val_loss: 0.5920 - val_accuracy: 0.8829\n","Epoch 28/100\n","175/175 [==============================] - 8s 48ms/step - loss: 1.0754e-04 - accuracy: 1.0000 - val_loss: 0.5991 - val_accuracy: 0.8829\n","Epoch 29/100\n","175/175 [==============================] - 9s 49ms/step - loss: 9.6813e-05 - accuracy: 1.0000 - val_loss: 0.6065 - val_accuracy: 0.8829\n","Epoch 30/100\n","175/175 [==============================] - 9s 49ms/step - loss: 8.7433e-05 - accuracy: 1.0000 - val_loss: 0.6128 - val_accuracy: 0.8814\n","Epoch 31/100\n","175/175 [==============================] - 8s 47ms/step - loss: 7.9092e-05 - accuracy: 1.0000 - val_loss: 0.6200 - val_accuracy: 0.8814\n","Epoch 32/100\n","175/175 [==============================] - 8s 47ms/step - loss: 7.1620e-05 - accuracy: 1.0000 - val_loss: 0.6263 - val_accuracy: 0.8814\n","Epoch 33/100\n","175/175 [==============================] - 8s 48ms/step - loss: 6.4906e-05 - accuracy: 1.0000 - val_loss: 0.6325 - val_accuracy: 0.8814\n","Epoch 34/100\n","175/175 [==============================] - 8s 47ms/step - loss: 5.8902e-05 - accuracy: 1.0000 - val_loss: 0.6384 - val_accuracy: 0.8814\n","Epoch 35/100\n","175/175 [==============================] - 9s 49ms/step - loss: 5.3490e-05 - accuracy: 1.0000 - val_loss: 0.6438 - val_accuracy: 0.8800\n","Epoch 36/100\n","175/175 [==============================] - 9s 49ms/step - loss: 4.8613e-05 - accuracy: 1.0000 - val_loss: 0.6499 - val_accuracy: 0.8800\n","Epoch 37/100\n","175/175 [==============================] - 9s 49ms/step - loss: 4.4167e-05 - accuracy: 1.0000 - val_loss: 0.6559 - val_accuracy: 0.8786\n","Epoch 38/100\n","175/175 [==============================] - 9s 52ms/step - loss: 4.0097e-05 - accuracy: 1.0000 - val_loss: 0.6609 - val_accuracy: 0.8786\n","Epoch 39/100\n","175/175 [==============================] - 9s 52ms/step - loss: 3.6419e-05 - accuracy: 1.0000 - val_loss: 0.6668 - val_accuracy: 0.8786\n","Epoch 40/100\n","175/175 [==============================] - 9s 51ms/step - loss: 3.3083e-05 - accuracy: 1.0000 - val_loss: 0.6724 - val_accuracy: 0.8800\n","Epoch 41/100\n","175/175 [==============================] - 9s 52ms/step - loss: 3.0073e-05 - accuracy: 1.0000 - val_loss: 0.6776 - val_accuracy: 0.8800\n","Epoch 42/100\n","175/175 [==============================] - 9s 52ms/step - loss: 2.7372e-05 - accuracy: 1.0000 - val_loss: 0.6826 - val_accuracy: 0.8800\n","Epoch 43/100\n","175/175 [==============================] - 9s 51ms/step - loss: 2.4931e-05 - accuracy: 1.0000 - val_loss: 0.6892 - val_accuracy: 0.8800\n","Epoch 44/100\n","175/175 [==============================] - 9s 50ms/step - loss: 2.2731e-05 - accuracy: 1.0000 - val_loss: 0.6972 - val_accuracy: 0.8800\n","Epoch 45/100\n","175/175 [==============================] - 9s 50ms/step - loss: 2.0731e-05 - accuracy: 1.0000 - val_loss: 0.7031 - val_accuracy: 0.8786\n","Epoch 46/100\n","175/175 [==============================] - 9s 50ms/step - loss: 1.8907e-05 - accuracy: 1.0000 - val_loss: 0.7088 - val_accuracy: 0.8786\n","Epoch 47/100\n","175/175 [==============================] - 9s 50ms/step - loss: 1.7245e-05 - accuracy: 1.0000 - val_loss: 0.7145 - val_accuracy: 0.8800\n","Epoch 48/100\n","175/175 [==============================] - 9s 50ms/step - loss: 1.5763e-05 - accuracy: 1.0000 - val_loss: 0.7200 - val_accuracy: 0.8800\n","Epoch 49/100\n","175/175 [==============================] - 9s 50ms/step - loss: 1.4413e-05 - accuracy: 1.0000 - val_loss: 0.7254 - val_accuracy: 0.8800\n","Epoch 50/100\n","175/175 [==============================] - 9s 50ms/step - loss: 1.3180e-05 - accuracy: 1.0000 - val_loss: 0.7311 - val_accuracy: 0.8800\n","Epoch 51/100\n","175/175 [==============================] - 9s 50ms/step - loss: 1.2051e-05 - accuracy: 1.0000 - val_loss: 0.7366 - val_accuracy: 0.8814\n","Epoch 52/100\n","175/175 [==============================] - 9s 50ms/step - loss: 1.1016e-05 - accuracy: 1.0000 - val_loss: 0.7417 - val_accuracy: 0.8814\n","Epoch 53/100\n","175/175 [==============================] - 9s 50ms/step - loss: 1.0068e-05 - accuracy: 1.0000 - val_loss: 0.7472 - val_accuracy: 0.8814\n","Epoch 54/100\n","175/175 [==============================] - 9s 50ms/step - loss: 9.1997e-06 - accuracy: 1.0000 - val_loss: 0.7527 - val_accuracy: 0.8814\n","Epoch 55/100\n","175/175 [==============================] - 9s 51ms/step - loss: 8.4073e-06 - accuracy: 1.0000 - val_loss: 0.7583 - val_accuracy: 0.8814\n","Epoch 56/100\n","175/175 [==============================] - 9s 53ms/step - loss: 7.6835e-06 - accuracy: 1.0000 - val_loss: 0.7632 - val_accuracy: 0.8814\n","Epoch 57/100\n","175/175 [==============================] - 9s 52ms/step - loss: 7.0345e-06 - accuracy: 1.0000 - val_loss: 0.7690 - val_accuracy: 0.8800\n","Epoch 58/100\n","175/175 [==============================] - 9s 51ms/step - loss: 6.4437e-06 - accuracy: 1.0000 - val_loss: 0.7744 - val_accuracy: 0.8800\n","Epoch 59/100\n","175/175 [==============================] - 9s 51ms/step - loss: 5.9063e-06 - accuracy: 1.0000 - val_loss: 0.7797 - val_accuracy: 0.8800\n","Epoch 60/100\n","175/175 [==============================] - 9s 52ms/step - loss: 5.4154e-06 - accuracy: 1.0000 - val_loss: 0.7854 - val_accuracy: 0.8814\n","Epoch 61/100\n","175/175 [==============================] - 9s 52ms/step - loss: 4.9666e-06 - accuracy: 1.0000 - val_loss: 0.7911 - val_accuracy: 0.8814\n","Epoch 62/100\n","175/175 [==============================] - 9s 53ms/step - loss: 4.5570e-06 - accuracy: 1.0000 - val_loss: 0.7966 - val_accuracy: 0.8829\n","Epoch 63/100\n","175/175 [==============================] - 9s 51ms/step - loss: 4.1806e-06 - accuracy: 1.0000 - val_loss: 0.8020 - val_accuracy: 0.8829\n","Epoch 64/100\n","175/175 [==============================] - 9s 52ms/step - loss: 3.8348e-06 - accuracy: 1.0000 - val_loss: 0.8074 - val_accuracy: 0.8829\n","Epoch 65/100\n","175/175 [==============================] - 10s 55ms/step - loss: 3.5187e-06 - accuracy: 1.0000 - val_loss: 0.8136 - val_accuracy: 0.8829\n","Epoch 66/100\n","175/175 [==============================] - 9s 53ms/step - loss: 3.2275e-06 - accuracy: 1.0000 - val_loss: 0.8199 - val_accuracy: 0.8800\n","Epoch 67/100\n","175/175 [==============================] - 9s 52ms/step - loss: 2.9609e-06 - accuracy: 1.0000 - val_loss: 0.8262 - val_accuracy: 0.8800\n","Epoch 68/100\n","175/175 [==============================] - 9s 53ms/step - loss: 2.7156e-06 - accuracy: 1.0000 - val_loss: 0.8320 - val_accuracy: 0.8786\n","Epoch 69/100\n","175/175 [==============================] - 9s 53ms/step - loss: 2.4900e-06 - accuracy: 1.0000 - val_loss: 0.8379 - val_accuracy: 0.8786\n","Epoch 70/100\n","175/175 [==============================] - 9s 53ms/step - loss: 2.2834e-06 - accuracy: 1.0000 - val_loss: 0.8440 - val_accuracy: 0.8786\n","Epoch 71/100\n","175/175 [==============================] - 9s 53ms/step - loss: 2.0925e-06 - accuracy: 1.0000 - val_loss: 0.8498 - val_accuracy: 0.8800\n","Epoch 72/100\n","175/175 [==============================] - 9s 52ms/step - loss: 1.9183e-06 - accuracy: 1.0000 - val_loss: 0.8558 - val_accuracy: 0.8786\n","Epoch 73/100\n","175/175 [==============================] - 9s 53ms/step - loss: 1.7609e-06 - accuracy: 1.0000 - val_loss: 0.8615 - val_accuracy: 0.8800\n","Epoch 74/100\n","175/175 [==============================] - 9s 52ms/step - loss: 1.6135e-06 - accuracy: 1.0000 - val_loss: 0.8679 - val_accuracy: 0.8800\n","Epoch 75/100\n","175/175 [==============================] - 9s 50ms/step - loss: 1.4787e-06 - accuracy: 1.0000 - val_loss: 0.8736 - val_accuracy: 0.8814\n","Epoch 76/100\n","175/175 [==============================] - 9s 50ms/step - loss: 1.3590e-06 - accuracy: 1.0000 - val_loss: 0.8795 - val_accuracy: 0.8800\n","Epoch 77/100\n","175/175 [==============================] - 9s 50ms/step - loss: 1.2479e-06 - accuracy: 1.0000 - val_loss: 0.8852 - val_accuracy: 0.8800\n","Epoch 78/100\n","175/175 [==============================] - 9s 50ms/step - loss: 1.1478e-06 - accuracy: 1.0000 - val_loss: 0.8915 - val_accuracy: 0.8814\n","Epoch 79/100\n","175/175 [==============================] - 9s 49ms/step - loss: 1.0565e-06 - accuracy: 1.0000 - val_loss: 0.8975 - val_accuracy: 0.8814\n","Epoch 80/100\n","175/175 [==============================] - 9s 49ms/step - loss: 9.7051e-07 - accuracy: 1.0000 - val_loss: 0.9033 - val_accuracy: 0.8814\n","Epoch 81/100\n","175/175 [==============================] - 9s 49ms/step - loss: 8.8670e-07 - accuracy: 1.0000 - val_loss: 0.9097 - val_accuracy: 0.8829\n","Epoch 82/100\n","175/175 [==============================] - 9s 50ms/step - loss: 8.1467e-07 - accuracy: 1.0000 - val_loss: 0.9158 - val_accuracy: 0.8829\n","Epoch 83/100\n","175/175 [==============================] - 9s 49ms/step - loss: 7.4827e-07 - accuracy: 1.0000 - val_loss: 0.9391 - val_accuracy: 0.8814\n","Epoch 84/100\n","175/175 [==============================] - 9s 50ms/step - loss: 6.8341e-07 - accuracy: 1.0000 - val_loss: 0.9456 - val_accuracy: 0.8814\n","Epoch 85/100\n","175/175 [==============================] - 8s 48ms/step - loss: 6.2227e-07 - accuracy: 1.0000 - val_loss: 0.9519 - val_accuracy: 0.8814\n","Epoch 86/100\n","175/175 [==============================] - 8s 48ms/step - loss: 5.6693e-07 - accuracy: 1.0000 - val_loss: 0.9578 - val_accuracy: 0.8814\n","Epoch 87/100\n","175/175 [==============================] - 8s 48ms/step - loss: 5.1456e-07 - accuracy: 1.0000 - val_loss: 0.9637 - val_accuracy: 0.8814\n","Epoch 88/100\n","175/175 [==============================] - 8s 48ms/step - loss: 4.7009e-07 - accuracy: 1.0000 - val_loss: 0.9703 - val_accuracy: 0.8814\n","Epoch 89/100\n","175/175 [==============================] - 8s 48ms/step - loss: 4.3139e-07 - accuracy: 1.0000 - val_loss: 0.9765 - val_accuracy: 0.8829\n","Epoch 90/100\n","175/175 [==============================] - 8s 48ms/step - loss: 3.9441e-07 - accuracy: 1.0000 - val_loss: 0.9827 - val_accuracy: 0.8829\n","Epoch 91/100\n","175/175 [==============================] - 8s 48ms/step - loss: 3.6118e-07 - accuracy: 1.0000 - val_loss: 0.9897 - val_accuracy: 0.8829\n","Epoch 92/100\n","175/175 [==============================] - 9s 49ms/step - loss: 3.3181e-07 - accuracy: 1.0000 - val_loss: 0.9957 - val_accuracy: 0.8843\n","Epoch 93/100\n","175/175 [==============================] - 9s 49ms/step - loss: 3.0335e-07 - accuracy: 1.0000 - val_loss: 1.0021 - val_accuracy: 0.8843\n","Epoch 94/100\n","175/175 [==============================] - 8s 48ms/step - loss: 2.7712e-07 - accuracy: 1.0000 - val_loss: 1.0077 - val_accuracy: 0.8843\n","Epoch 95/100\n","175/175 [==============================] - 8s 48ms/step - loss: 2.5272e-07 - accuracy: 1.0000 - val_loss: 1.0146 - val_accuracy: 0.8843\n","Epoch 96/100\n","175/175 [==============================] - 9s 49ms/step - loss: 2.2914e-07 - accuracy: 1.0000 - val_loss: 1.0208 - val_accuracy: 0.8843\n","Epoch 97/100\n","175/175 [==============================] - 9s 49ms/step - loss: 2.0877e-07 - accuracy: 1.0000 - val_loss: 1.0261 - val_accuracy: 0.8829\n","Epoch 98/100\n","175/175 [==============================] - 9s 50ms/step - loss: 1.8971e-07 - accuracy: 1.0000 - val_loss: 1.0323 - val_accuracy: 0.8829\n","Epoch 99/100\n","175/175 [==============================] - 9s 51ms/step - loss: 1.7328e-07 - accuracy: 1.0000 - val_loss: 1.0379 - val_accuracy: 0.8829\n","Epoch 100/100\n","175/175 [==============================] - 9s 54ms/step - loss: 1.5668e-07 - accuracy: 1.0000 - val_loss: 1.0436 - val_accuracy: 0.8829\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7efde3eb1748>"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"10s9udsJChxm"},"source":[""],"execution_count":null,"outputs":[]}]}