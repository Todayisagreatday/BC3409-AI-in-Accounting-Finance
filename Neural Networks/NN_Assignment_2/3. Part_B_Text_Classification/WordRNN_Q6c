{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"WordRNN_Q6c","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOtuL5TfU7zf+ssH0XslLYs"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"yt_0H8AVKtgp"},"source":["# Mount Drive"]},{"cell_type":"code","metadata":{"id":"-M48O3QXt0dc","executionInfo":{"status":"ok","timestamp":1604897381292,"user_tz":-480,"elapsed":777,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"0f2e2b55-ea0e-4b5d-e33b-974fc48cbe05","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"EpjR77QWK0vX"},"source":["# Install libraries"]},{"cell_type":"code","metadata":{"id":"Z2gdCDhmybWe","executionInfo":{"status":"ok","timestamp":1604897385325,"user_tz":-480,"elapsed":2673,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}}},"source":["!pip install wandb -qqq"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"aUnW2mpR502Y","executionInfo":{"status":"ok","timestamp":1604897389053,"user_tz":-480,"elapsed":1093,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"0d9d4cac-c6cb-476c-81df-91b425cc5808","colab":{"base_uri":"https://localhost:8080/"}},"source":["import nltk\n","nltk.download('punkt')"],"execution_count":3,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"ZSgXVGkpK3ha"},"source":["# Run Model"]},{"cell_type":"code","metadata":{"id":"YV-vgOrwzbhT","executionInfo":{"status":"ok","timestamp":1604897390091,"user_tz":-480,"elapsed":492,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}}},"source":["# Preprocessing Functions\n","def clean_str(text):\n","    text = re.sub(r\"[^A-Za-z0-9(),!?\\'\\`\\\"]\", \" \", text)\n","    text = re.sub(r\"\\s{2,}\", \" \", text)\n","    text = text.strip().lower()\n","\n","    return text\n","\n","\n","def build_word_dict(contents):\n","    words = list()\n","    for content in contents:\n","        for word in word_tokenize(clean_str(content)):\n","            words.append(word)\n","\n","    word_counter = collections.Counter(words).most_common()\n","    word_dict = dict()\n","    word_dict[\"<pad>\"] = 0\n","    word_dict[\"<unk>\"] = 1\n","    word_dict[\"<eos>\"] = 2\n","    for word, _ in word_counter:\n","        word_dict[word] = len(word_dict)\n","    return word_dict\n","\n","\n","def preprocess(contents, word_dict, document_max_len):\n","    x = list(map(lambda d: word_tokenize(clean_str(d)), contents))\n","    x = list(map(lambda d: list(map(lambda w: word_dict.get(w, word_dict[\"<unk>\"]), d)), x))\n","    x = list(map(lambda d: d + [word_dict[\"<eos>\"]], x))\n","    x = list(map(lambda d: d[:document_max_len], x))\n","    x = list(map(lambda d: d + (document_max_len - len(d)) * [word_dict[\"<pad>\"]], x))\n","    return x\n","\n","\n","def read_data_words():\n","    x_train, y_train, x_test, y_test = [], [], [], []\n","    cop = re.compile(\"[^a-z^A-Z^0-9^,^.^' ']\")\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/train_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_train.append(data)\n","            y_train.append(int(row[0]))\n","\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/test_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_test.append(data)\n","            y_test.append(int(row[0]))\n","\n","    word_dict = build_word_dict(x_train+x_test)\n","    x_train = preprocess(x_train, word_dict, 100)\n","    y_train = np.array(y_train)\n","    x_test = preprocess(x_test, word_dict, 100)\n","    y_test = np.array(y_test)\n","\n","    x_train = [x[:100] for x in x_train]\n","    x_test = [x[:100] for x in x_test]\n","    x_train = tf.constant(x_train, dtype=tf.int64)\n","    y_train = tf.constant(y_train, dtype=tf.int64)\n","    x_test = tf.constant(x_test, dtype=tf.int64)\n","    y_test = tf.constant(y_test, dtype=tf.int64)\n","\n","    vocab_size = tf.get_static_value(tf.reduce_max(x_train))\n","    vocab_size = max(vocab_size, tf.get_static_value(tf.reduce_max(x_test))) + 1\n","    return x_train, y_train, x_test, y_test, vocab_size"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"CnWPz07jyrXz","executionInfo":{"status":"ok","timestamp":1604897340117,"user_tz":-480,"elapsed":316844,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"c163a8c5-8e9f-47ec-cd0d-3835af09c8fd","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import wandb\n","from wandb.keras import WandbCallback\n","import collections\n","import numpy as np\n","import tensorflow as tf\n","from nltk.tokenize import word_tokenize\n","from tensorflow.keras import Model, layers, models\n","import csv\n","import re\n","\n","# Hyperparameters\n","defaults = {\n","    'embedding_size' : 50,\n","    'hidden_size' : 20,\n","    'batch_size' : 128,\n","    'epochs' : 100,\n","    'lr' : 0.01,\n","    'Dropout' : 'Yes'\n","}\n","\n","# Initiate wandb\n","wandb.init(config=defaults, resume=True, name='WordRNN Q6c', project='NNA2 Part B Redo')\n","config = wandb.config\n","\n","# Fix lucky seed!\n","seed = 7\n","tf.random.set_seed(seed)\n","\n","# Train test split\n","x_train, y_train, x_test, y_test, vocab_size = read_data_words()\n","\n","# Use `tf.data` to batch and shuffle the dataset:\n","train_ds = tf.data.Dataset.from_tensor_slices(\n","    (x_train, y_train)).shuffle(10000).batch(config.batch_size)\n","test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(config.batch_size)\n","\n","# Define model\n","tf.keras.backend.set_floatx('float32')\n","model = models.Sequential()\n","model.add(layers.Embedding(vocab_size, config.embedding_size, input_length=100))\n","model.add(layers.RNN(layers.GRUCell(config.hidden_size), unroll=True))\n","model.add(layers.Dropout(0.5))\n","model.add(layers.Dense(15, activation=None))\n","model.summary()\n","\n","# Choose optimizer and loss function\n","opt = tf.keras.optimizers.Adam(learning_rate=config.lr, clipvalue=2)\n","loss_object = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n","\n","# Compile model\n","model.compile(\n","    optimizer=opt,\n","    loss=loss_object,\n","    metrics=['accuracy'],\n",")\n","\n","# Train model\n","model.fit(\n","    train_ds,\n","    validation_data=test_ds,\n","    epochs=config.epochs,\n","    callbacks=[WandbCallback()],\n","    )"],"execution_count":6,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","        window._wandbApiKey = new Promise((resolve, reject) => {\n","            function loadScript(url) {\n","            return new Promise(function(resolve, reject) {\n","                let newScript = document.createElement(\"script\");\n","                newScript.onerror = reject;\n","                newScript.onload = resolve;\n","                document.body.appendChild(newScript);\n","                newScript.src = url;\n","            });\n","            }\n","            loadScript(\"https://cdn.jsdelivr.net/npm/postmate/build/postmate.min.js\").then(() => {\n","            const iframe = document.createElement('iframe')\n","            iframe.style.cssText = \"width:0;height:0;border:none\"\n","            document.body.appendChild(iframe)\n","            const handshake = new Postmate({\n","                container: iframe,\n","                url: 'https://wandb.ai/authorize'\n","            });\n","            const timeout = setTimeout(() => reject(\"Couldn't auto authenticate\"), 5000)\n","            handshake.then(function(child) {\n","                child.on('authorize', data => {\n","                    clearTimeout(timeout)\n","                    resolve(data)\n","                });\n","            });\n","            })\n","        });\n","    "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n"],"name":"stderr"},{"output_type":"stream","text":["wandb: Paste an API key from your profile and hit enter: ··········\n"],"name":"stdout"},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.9<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">WordRNN Q6c</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo</a><br/>\n","                Run page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/1qtvxwep\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/1qtvxwep</a><br/>\n","                Run data is saved locally in <code>wandb/run-20201109_044357-1qtvxwep</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding (Embedding)        (None, 100, 50)           1764350   \n","_________________________________________________________________\n","rnn (RNN)                    (None, 20)                4320      \n","_________________________________________________________________\n","dropout (Dropout)            (None, 20)                0         \n","_________________________________________________________________\n","dense (Dense)                (None, 15)                315       \n","=================================================================\n","Total params: 1,768,985\n","Trainable params: 1,768,985\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/100\n","44/44 [==============================] - 5s 109ms/step - loss: 2.6810 - accuracy: 0.0723 - val_loss: 2.6505 - val_accuracy: 0.0714\n","Epoch 2/100\n","44/44 [==============================] - 3s 67ms/step - loss: 2.6599 - accuracy: 0.0668 - val_loss: 2.6457 - val_accuracy: 0.0714\n","Epoch 3/100\n","44/44 [==============================] - 3s 68ms/step - loss: 2.6532 - accuracy: 0.0645 - val_loss: 2.6435 - val_accuracy: 0.0714\n","Epoch 4/100\n","44/44 [==============================] - 3s 64ms/step - loss: 2.6479 - accuracy: 0.0695 - val_loss: 2.6228 - val_accuracy: 0.0729\n","Epoch 5/100\n","44/44 [==============================] - 3s 59ms/step - loss: 2.2301 - accuracy: 0.1993 - val_loss: 1.6173 - val_accuracy: 0.3829\n","Epoch 6/100\n","44/44 [==============================] - 3s 60ms/step - loss: 1.3561 - accuracy: 0.4380 - val_loss: 1.0946 - val_accuracy: 0.5014\n","Epoch 7/100\n","44/44 [==============================] - 3s 65ms/step - loss: 1.0234 - accuracy: 0.5364 - val_loss: 0.9417 - val_accuracy: 0.5929\n","Epoch 8/100\n","44/44 [==============================] - 3s 70ms/step - loss: 0.7833 - accuracy: 0.6475 - val_loss: 0.8110 - val_accuracy: 0.6757\n","Epoch 9/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.6074 - accuracy: 0.7457 - val_loss: 0.7132 - val_accuracy: 0.7543\n","Epoch 10/100\n","44/44 [==============================] - 3s 60ms/step - loss: 0.4336 - accuracy: 0.8339 - val_loss: 0.6741 - val_accuracy: 0.7771\n","Epoch 11/100\n","44/44 [==============================] - 3s 64ms/step - loss: 0.3061 - accuracy: 0.8832 - val_loss: 0.7058 - val_accuracy: 0.7943\n","Epoch 12/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.2637 - accuracy: 0.9009 - val_loss: 0.7796 - val_accuracy: 0.8157\n","Epoch 13/100\n","44/44 [==============================] - 3s 62ms/step - loss: 0.2094 - accuracy: 0.9302 - val_loss: 0.7404 - val_accuracy: 0.8229\n","Epoch 14/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.2019 - accuracy: 0.9339 - val_loss: 0.7495 - val_accuracy: 0.8300\n","Epoch 15/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.1833 - accuracy: 0.9418 - val_loss: 0.8003 - val_accuracy: 0.8386\n","Epoch 16/100\n","44/44 [==============================] - 3s 60ms/step - loss: 0.1650 - accuracy: 0.9429 - val_loss: 0.9027 - val_accuracy: 0.8200\n","Epoch 17/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.1881 - accuracy: 0.9405 - val_loss: 0.8844 - val_accuracy: 0.8143\n","Epoch 18/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.1698 - accuracy: 0.9461 - val_loss: 0.7623 - val_accuracy: 0.8529\n","Epoch 19/100\n","44/44 [==============================] - 2s 56ms/step - loss: 0.1424 - accuracy: 0.9546 - val_loss: 0.7451 - val_accuracy: 0.8400\n","Epoch 20/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.1229 - accuracy: 0.9570 - val_loss: 0.8161 - val_accuracy: 0.8243\n","Epoch 21/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.1241 - accuracy: 0.9580 - val_loss: 0.7970 - val_accuracy: 0.8400\n","Epoch 22/100\n","44/44 [==============================] - 3s 63ms/step - loss: 0.1197 - accuracy: 0.9577 - val_loss: 0.9065 - val_accuracy: 0.8400\n","Epoch 23/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.1171 - accuracy: 0.9593 - val_loss: 0.8256 - val_accuracy: 0.8386\n","Epoch 24/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0929 - accuracy: 0.9673 - val_loss: 0.8469 - val_accuracy: 0.8500\n","Epoch 25/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.0862 - accuracy: 0.9682 - val_loss: 0.8796 - val_accuracy: 0.8486\n","Epoch 26/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0819 - accuracy: 0.9679 - val_loss: 0.9298 - val_accuracy: 0.8429\n","Epoch 27/100\n","44/44 [==============================] - 2s 56ms/step - loss: 0.0802 - accuracy: 0.9696 - val_loss: 0.9753 - val_accuracy: 0.8400\n","Epoch 28/100\n","44/44 [==============================] - 3s 66ms/step - loss: 0.0879 - accuracy: 0.9652 - val_loss: 0.9289 - val_accuracy: 0.8486\n","Epoch 29/100\n","44/44 [==============================] - 2s 56ms/step - loss: 0.0771 - accuracy: 0.9711 - val_loss: 1.0080 - val_accuracy: 0.8400\n","Epoch 30/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.1008 - accuracy: 0.9634 - val_loss: 1.0358 - val_accuracy: 0.8271\n","Epoch 31/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.1064 - accuracy: 0.9616 - val_loss: 1.0299 - val_accuracy: 0.8343\n","Epoch 32/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.0838 - accuracy: 0.9680 - val_loss: 1.0161 - val_accuracy: 0.8386\n","Epoch 33/100\n","44/44 [==============================] - 2s 56ms/step - loss: 0.0772 - accuracy: 0.9691 - val_loss: 1.1313 - val_accuracy: 0.8357\n","Epoch 34/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.0997 - accuracy: 0.9663 - val_loss: 0.9491 - val_accuracy: 0.8457\n","Epoch 35/100\n","44/44 [==============================] - 2s 56ms/step - loss: 0.0991 - accuracy: 0.9639 - val_loss: 1.1231 - val_accuracy: 0.8386\n","Epoch 36/100\n","44/44 [==============================] - 2s 57ms/step - loss: 0.0788 - accuracy: 0.9727 - val_loss: 1.0538 - val_accuracy: 0.8429\n","Epoch 37/100\n","44/44 [==============================] - 2s 57ms/step - loss: 0.0794 - accuracy: 0.9657 - val_loss: 1.0509 - val_accuracy: 0.8357\n","Epoch 38/100\n","44/44 [==============================] - 3s 64ms/step - loss: 0.0831 - accuracy: 0.9682 - val_loss: 0.9820 - val_accuracy: 0.8457\n","Epoch 39/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0946 - accuracy: 0.9663 - val_loss: 1.0861 - val_accuracy: 0.8271\n","Epoch 40/100\n","44/44 [==============================] - 2s 56ms/step - loss: 0.0783 - accuracy: 0.9657 - val_loss: 1.1442 - val_accuracy: 0.8429\n","Epoch 41/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.1156 - accuracy: 0.9588 - val_loss: 1.2612 - val_accuracy: 0.7800\n","Epoch 42/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.2727 - accuracy: 0.9329 - val_loss: 1.1892 - val_accuracy: 0.7971\n","Epoch 43/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.2344 - accuracy: 0.9307 - val_loss: 0.9305 - val_accuracy: 0.8257\n","Epoch 44/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.1668 - accuracy: 0.9496 - val_loss: 1.0842 - val_accuracy: 0.8143\n","Epoch 45/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.1317 - accuracy: 0.9591 - val_loss: 1.1340 - val_accuracy: 0.8129\n","Epoch 46/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.1011 - accuracy: 0.9645 - val_loss: 1.1277 - val_accuracy: 0.8114\n","Epoch 47/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0896 - accuracy: 0.9661 - val_loss: 1.0494 - val_accuracy: 0.8329\n","Epoch 48/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.0805 - accuracy: 0.9711 - val_loss: 1.1190 - val_accuracy: 0.8200\n","Epoch 49/100\n","44/44 [==============================] - 2s 57ms/step - loss: 0.0727 - accuracy: 0.9725 - val_loss: 1.2272 - val_accuracy: 0.8214\n","Epoch 50/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0700 - accuracy: 0.9734 - val_loss: 1.2743 - val_accuracy: 0.8271\n","Epoch 51/100\n","44/44 [==============================] - 3s 63ms/step - loss: 0.0667 - accuracy: 0.9743 - val_loss: 1.2810 - val_accuracy: 0.8257\n","Epoch 52/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0615 - accuracy: 0.9762 - val_loss: 1.2926 - val_accuracy: 0.8214\n","Epoch 53/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0572 - accuracy: 0.9766 - val_loss: 1.2643 - val_accuracy: 0.8343\n","Epoch 54/100\n","44/44 [==============================] - 3s 67ms/step - loss: 0.0648 - accuracy: 0.9752 - val_loss: 1.2564 - val_accuracy: 0.8343\n","Epoch 55/100\n","44/44 [==============================] - 3s 60ms/step - loss: 0.0542 - accuracy: 0.9795 - val_loss: 1.2952 - val_accuracy: 0.8300\n","Epoch 56/100\n","44/44 [==============================] - 3s 72ms/step - loss: 0.0536 - accuracy: 0.9777 - val_loss: 1.3465 - val_accuracy: 0.8243\n","Epoch 57/100\n","44/44 [==============================] - 2s 57ms/step - loss: 0.0566 - accuracy: 0.9804 - val_loss: 1.3679 - val_accuracy: 0.8214\n","Epoch 58/100\n","44/44 [==============================] - 2s 57ms/step - loss: 0.0667 - accuracy: 0.9762 - val_loss: 1.5297 - val_accuracy: 0.8186\n","Epoch 59/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.0651 - accuracy: 0.9762 - val_loss: 1.4423 - val_accuracy: 0.8243\n","Epoch 60/100\n","44/44 [==============================] - 2s 56ms/step - loss: 0.0607 - accuracy: 0.9729 - val_loss: 1.3914 - val_accuracy: 0.8243\n","Epoch 61/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0628 - accuracy: 0.9741 - val_loss: 1.6610 - val_accuracy: 0.8114\n","Epoch 62/100\n","44/44 [==============================] - 2s 56ms/step - loss: 0.0551 - accuracy: 0.9793 - val_loss: 1.3417 - val_accuracy: 0.8300\n","Epoch 63/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0561 - accuracy: 0.9759 - val_loss: 1.4348 - val_accuracy: 0.8243\n","Epoch 64/100\n","44/44 [==============================] - 2s 56ms/step - loss: 0.1133 - accuracy: 0.9602 - val_loss: 1.3735 - val_accuracy: 0.8100\n","Epoch 65/100\n","44/44 [==============================] - 2s 56ms/step - loss: 0.1412 - accuracy: 0.9577 - val_loss: 1.4810 - val_accuracy: 0.7971\n","Epoch 66/100\n","44/44 [==============================] - 3s 62ms/step - loss: 0.1371 - accuracy: 0.9591 - val_loss: 1.2119 - val_accuracy: 0.8114\n","Epoch 67/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.0886 - accuracy: 0.9727 - val_loss: 1.1881 - val_accuracy: 0.8243\n","Epoch 68/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0724 - accuracy: 0.9721 - val_loss: 1.2901 - val_accuracy: 0.8143\n","Epoch 69/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0634 - accuracy: 0.9768 - val_loss: 1.1359 - val_accuracy: 0.8214\n","Epoch 70/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.0583 - accuracy: 0.9761 - val_loss: 1.1916 - val_accuracy: 0.8314\n","Epoch 71/100\n","44/44 [==============================] - 3s 64ms/step - loss: 0.0497 - accuracy: 0.9786 - val_loss: 1.2306 - val_accuracy: 0.8371\n","Epoch 72/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0510 - accuracy: 0.9793 - val_loss: 1.2134 - val_accuracy: 0.8357\n","Epoch 73/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0505 - accuracy: 0.9811 - val_loss: 1.2866 - val_accuracy: 0.8257\n","Epoch 74/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0589 - accuracy: 0.9779 - val_loss: 1.2119 - val_accuracy: 0.8414\n","Epoch 75/100\n","44/44 [==============================] - 3s 62ms/step - loss: 0.0480 - accuracy: 0.9793 - val_loss: 1.2320 - val_accuracy: 0.8286\n","Epoch 76/100\n","44/44 [==============================] - 3s 65ms/step - loss: 0.0529 - accuracy: 0.9779 - val_loss: 1.4094 - val_accuracy: 0.8286\n","Epoch 77/100\n","44/44 [==============================] - 3s 62ms/step - loss: 0.0503 - accuracy: 0.9787 - val_loss: 1.6312 - val_accuracy: 0.8029\n","Epoch 78/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0662 - accuracy: 0.9787 - val_loss: 1.5088 - val_accuracy: 0.8343\n","Epoch 79/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.0523 - accuracy: 0.9786 - val_loss: 1.5426 - val_accuracy: 0.8300\n","Epoch 80/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.0495 - accuracy: 0.9802 - val_loss: 1.6004 - val_accuracy: 0.8157\n","Epoch 81/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0960 - accuracy: 0.9707 - val_loss: 1.6563 - val_accuracy: 0.7957\n","Epoch 82/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0697 - accuracy: 0.9764 - val_loss: 1.6504 - val_accuracy: 0.8214\n","Epoch 83/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0595 - accuracy: 0.9759 - val_loss: 1.5881 - val_accuracy: 0.8257\n","Epoch 84/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0589 - accuracy: 0.9766 - val_loss: 1.5428 - val_accuracy: 0.8229\n","Epoch 85/100\n","44/44 [==============================] - 3s 62ms/step - loss: 0.0612 - accuracy: 0.9754 - val_loss: 1.5182 - val_accuracy: 0.8400\n","Epoch 86/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0438 - accuracy: 0.9807 - val_loss: 1.6283 - val_accuracy: 0.8257\n","Epoch 87/100\n","44/44 [==============================] - 3s 62ms/step - loss: 0.0454 - accuracy: 0.9804 - val_loss: 1.6259 - val_accuracy: 0.8286\n","Epoch 88/100\n","44/44 [==============================] - 3s 66ms/step - loss: 0.0465 - accuracy: 0.9782 - val_loss: 1.5701 - val_accuracy: 0.8314\n","Epoch 89/100\n","44/44 [==============================] - 2s 57ms/step - loss: 0.0466 - accuracy: 0.9811 - val_loss: 1.6649 - val_accuracy: 0.8257\n","Epoch 90/100\n","44/44 [==============================] - 3s 63ms/step - loss: 0.1129 - accuracy: 0.9679 - val_loss: 1.4779 - val_accuracy: 0.8157\n","Epoch 91/100\n","44/44 [==============================] - 3s 60ms/step - loss: 0.0992 - accuracy: 0.9645 - val_loss: 1.1662 - val_accuracy: 0.8271\n","Epoch 92/100\n","44/44 [==============================] - 3s 74ms/step - loss: 0.0861 - accuracy: 0.9716 - val_loss: 1.4948 - val_accuracy: 0.8314\n","Epoch 93/100\n","44/44 [==============================] - 3s 60ms/step - loss: 0.1664 - accuracy: 0.9545 - val_loss: 1.4426 - val_accuracy: 0.8200\n","Epoch 94/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.1253 - accuracy: 0.9643 - val_loss: 1.4402 - val_accuracy: 0.8186\n","Epoch 95/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.0772 - accuracy: 0.9729 - val_loss: 1.4451 - val_accuracy: 0.8257\n","Epoch 96/100\n","44/44 [==============================] - 2s 57ms/step - loss: 0.0784 - accuracy: 0.9725 - val_loss: 1.3231 - val_accuracy: 0.8329\n","Epoch 97/100\n","44/44 [==============================] - 2s 56ms/step - loss: 0.0596 - accuracy: 0.9812 - val_loss: 1.4065 - val_accuracy: 0.8386\n","Epoch 98/100\n","44/44 [==============================] - 3s 62ms/step - loss: 0.0527 - accuracy: 0.9800 - val_loss: 1.4631 - val_accuracy: 0.8271\n","Epoch 99/100\n","44/44 [==============================] - 3s 62ms/step - loss: 0.0513 - accuracy: 0.9807 - val_loss: 1.4989 - val_accuracy: 0.8257\n","Epoch 100/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0482 - accuracy: 0.9796 - val_loss: 1.4927 - val_accuracy: 0.8229\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f23181e15f8>"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"10s9udsJChxm"},"source":[""],"execution_count":null,"outputs":[]}]}