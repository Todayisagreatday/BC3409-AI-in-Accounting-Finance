{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CharCNN_Q1b","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOWbKIg+T3RvvzNMRkrBjeR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"C3fwTppaJJ8u"},"source":["# Mount Drive"]},{"cell_type":"code","metadata":{"id":"MsObL7B7Siou","executionInfo":{"status":"ok","timestamp":1604854516918,"user_tz":-480,"elapsed":34604,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"048a3119-f89a-4e1b-aabc-58322566ce29","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fG4t_mkmJOh0"},"source":["# Install Weights and Biases"]},{"cell_type":"code","metadata":{"id":"NdaTK82wnP1b","executionInfo":{"status":"ok","timestamp":1604854525359,"user_tz":-480,"elapsed":43036,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"2972e3c6-09ed-49b0-9fd2-6fa19a3d00e3","colab":{"base_uri":"https://localhost:8080/"}},"source":["!pip install wandb -qqq"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 1.8MB 5.2MB/s \n","\u001b[K     |████████████████████████████████| 102kB 11.4MB/s \n","\u001b[K     |████████████████████████████████| 133kB 24.7MB/s \n","\u001b[K     |████████████████████████████████| 102kB 11.0MB/s \n","\u001b[K     |████████████████████████████████| 163kB 23.1MB/s \n","\u001b[K     |████████████████████████████████| 71kB 11.0MB/s \n","\u001b[?25h  Building wheel for watchdog (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for subprocess32 (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"U3gF-H5nJRYM"},"source":["# Run Model"]},{"cell_type":"code","metadata":{"id":"9oGQD0F_dqYS"},"source":["# Read data with [character]\n","def vocabulary(strings):\n","    chars = sorted(list(set(list(''.join(strings)))))\n","    char_to_ix = { ch:i for i,ch in enumerate(chars) }\n","    vocab_size = len(chars)\n","    return vocab_size, char_to_ix\n","\n","def preprocess(strings, char_to_ix, MAX_LENGTH):\n","    data_chars = [list(d.lower()) for _, d in enumerate(strings)]\n","    for i, d in enumerate(data_chars):\n","        if len(d)>MAX_LENGTH:\n","            d = d[:MAX_LENGTH]\n","        elif len(d) < MAX_LENGTH:\n","            d += [' '] * (MAX_LENGTH - len(d))\n","            \n","    data_ids = np.zeros([len(data_chars), MAX_LENGTH], dtype=np.int64)\n","    for i in range(len(data_chars)):\n","        for j in range(MAX_LENGTH):\n","            data_ids[i, j] = char_to_ix[data_chars[i][j]]\n","    return np.array(data_ids)\n","\n","def read_data_chars():\n","    x_train, y_train, x_test, y_test = [], [], [], []\n","    cop = re.compile(\"[^a-z^A-Z^0-9^,^.^' ']\")\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/train_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_train.append(data)\n","            y_train.append(int(row[0]))\n","\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/test_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_test.append(data)\n","            y_test.append(int(row[0]))\n","\n","\n","    vocab_size, char_to_ix = vocabulary(x_train+x_test)\n","    x_train = preprocess(x_train, char_to_ix, 100)\n","    y_train = np.array(y_train)\n","    x_test = preprocess(x_test, char_to_ix, 100)\n","    y_test = np.array(y_test)\n","\n","    x_train = tf.constant(x_train, dtype=tf.int64)\n","    y_train = tf.constant(y_train, dtype=tf.int64)\n","    x_test = tf.constant(x_test, dtype=tf.int64)\n","    y_test = tf.constant(y_test, dtype=tf.int64)\n","\n","    return x_train, y_train, x_test, y_test"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ugg05UW4QnW8","executionInfo":{"status":"ok","timestamp":1604854629960,"user_tz":-480,"elapsed":147274,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"5f8cd144-492a-4510-b5d9-8a4952e768ba","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import wandb\n","from wandb.keras import WandbCallback\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow.keras import Model, layers\n","import csv\n","import re\n","\n","# Hyperparameters\n","defaults = {\n","    'num_filters_c1' : 10,\n","    'num_filters_c2' : 10,\n","    'wsize_c1' : (20, 256),\n","    'wsize_c2' :(20, 1),\n","    'batch_size' : 128,\n","    'epochs' : 250,\n","    'lr' : 0.01,\n","    'Dropout' : 'Yes'\n","}\n","\n","# Initiate wandb\n","wandb.init(config=defaults, resume=True, name='CharCNN Q1b', project='NNA2 Part B Redo')\n","config = wandb.config\n","\n","# Fix lucky seed!\n","seed = 7\n","tf.random.set_seed(seed)\n","\n","# Train test split\n","x_train, y_train, x_test, y_test = read_data_chars()\n","\n","# Use `tf.data` to batch and shuffle the dataset:\n","train_ds = tf.data.Dataset.from_tensor_slices(\n","    (x_train, y_train)).shuffle(10000).batch(config.batch_size)\n","test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(config.batch_size)\n","\n","# Define model\n","tf.keras.backend.set_floatx('float32')\n","class CharCNN(Model):\n","    def __init__(self, vocab_size=256):\n","        super(CharCNN, self).__init__()\n","        self.vocab_size = vocab_size\n","        # Conv layers\n","        self.conv1 = layers.Conv2D(config.num_filters_c1, config.wsize_c1, padding='valid', activation='relu')\n","        self.pool1 = layers.MaxPool2D(pool_size=4, strides=2, padding='same')\n","        self.conv2 = layers.Conv2D(config.num_filters_c2, config.wsize_c2, padding='valid', activation='relu')\n","        self.pool2 = layers.MaxPool2D(pool_size=4, strides=2, padding='same')\n","        self.flatten = layers.Flatten()\n","        self.dense = layers.Dense(15, activation='softmax')\n","\n","    def call(self, x, drop_rate=0.5):\n","        x = tf.one_hot(x, 256)\n","        x = x[..., tf.newaxis] \n","        x = self.conv1(x)\n","        x = self.pool1(x)\n","        x = self.conv2(x)\n","        x = self.pool2(x)\n","        x = self.flatten(x)\n","        x = tf.nn.dropout(x, drop_rate)\n","        logits = self.dense(x)\n","        return logits\n","\n","model = CharCNN(256)\n","\n","# Choose optimizer and loss function\n","loss_object = tf.keras.losses.SparseCategoricalCrossentropy()\n","opt = tf.keras.optimizers.SGD(learning_rate=config.lr)\n","\n","# Compile model\n","model.compile(\n","    optimizer=opt,\n","    loss=loss_object,\n","    metrics=['accuracy'],\n",")\n","\n","# Train model\n","model.fit(\n","    train_ds,\n","    validation_data=test_ds,\n","    epochs=config.epochs,\n","    callbacks=[WandbCallback()],\n","    )"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","        window._wandbApiKey = new Promise((resolve, reject) => {\n","            function loadScript(url) {\n","            return new Promise(function(resolve, reject) {\n","                let newScript = document.createElement(\"script\");\n","                newScript.onerror = reject;\n","                newScript.onload = resolve;\n","                document.body.appendChild(newScript);\n","                newScript.src = url;\n","            });\n","            }\n","            loadScript(\"https://cdn.jsdelivr.net/npm/postmate/build/postmate.min.js\").then(() => {\n","            const iframe = document.createElement('iframe')\n","            iframe.style.cssText = \"width:0;height:0;border:none\"\n","            document.body.appendChild(iframe)\n","            const handshake = new Postmate({\n","                container: iframe,\n","                url: 'https://wandb.ai/authorize'\n","            });\n","            const timeout = setTimeout(() => reject(\"Couldn't auto authenticate\"), 5000)\n","            handshake.then(function(child) {\n","                child.on('authorize', data => {\n","                    clearTimeout(timeout)\n","                    resolve(data)\n","                });\n","            });\n","            })\n","        });\n","    "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n"],"name":"stderr"},{"output_type":"stream","text":["wandb: Paste an API key from your profile and hit enter: ··········\n"],"name":"stdout"},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.9<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">CharCNN Q1b</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo</a><br/>\n","                Run page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/251a5iz1\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/251a5iz1</a><br/>\n","                Run data is saved locally in <code>wandb/run-20201108_165534-251a5iz1</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Epoch 1/250\n","44/44 [==============================] - ETA: 0s - loss: 2.7048 - accuracy: 0.0734"],"name":"stdout"},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[32m\u001b[41mERROR\u001b[0m Can't save model, h5py returned error: Saving the model to HDF5 format requires the model to be a Functional model or a Sequential model. It does not work for subclassed models, because such models are defined via the body of a Python method, which isn't safely serializable. Consider saving to the Tensorflow SavedModel format (by setting save_format=\"tf\") or using `save_weights`.\n"],"name":"stderr"},{"output_type":"stream","text":["44/44 [==============================] - 1s 13ms/step - loss: 2.7048 - accuracy: 0.0734 - val_loss: 2.7020 - val_accuracy: 0.0814\n","Epoch 2/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6959 - accuracy: 0.0768 - val_loss: 2.6945 - val_accuracy: 0.0871\n","Epoch 3/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6891 - accuracy: 0.0796 - val_loss: 2.6839 - val_accuracy: 0.0886\n","Epoch 4/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6824 - accuracy: 0.0807 - val_loss: 2.6806 - val_accuracy: 0.0829\n","Epoch 5/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6748 - accuracy: 0.0971 - val_loss: 2.6737 - val_accuracy: 0.0943\n","Epoch 6/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6659 - accuracy: 0.0966 - val_loss: 2.6682 - val_accuracy: 0.0971\n","Epoch 7/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6587 - accuracy: 0.0941 - val_loss: 2.6637 - val_accuracy: 0.0857\n","Epoch 8/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6533 - accuracy: 0.1036 - val_loss: 2.6576 - val_accuracy: 0.0957\n","Epoch 9/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6485 - accuracy: 0.1046 - val_loss: 2.6445 - val_accuracy: 0.1086\n","Epoch 10/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6455 - accuracy: 0.1082 - val_loss: 2.6384 - val_accuracy: 0.1000\n","Epoch 11/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6387 - accuracy: 0.1141 - val_loss: 2.6444 - val_accuracy: 0.1300\n","Epoch 12/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6297 - accuracy: 0.1207 - val_loss: 2.6204 - val_accuracy: 0.1400\n","Epoch 13/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6226 - accuracy: 0.1248 - val_loss: 2.6322 - val_accuracy: 0.1114\n","Epoch 14/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6189 - accuracy: 0.1229 - val_loss: 2.6194 - val_accuracy: 0.1414\n","Epoch 15/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.6083 - accuracy: 0.1330 - val_loss: 2.6195 - val_accuracy: 0.1357\n","Epoch 16/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5978 - accuracy: 0.1416 - val_loss: 2.6069 - val_accuracy: 0.1314\n","Epoch 17/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5923 - accuracy: 0.1534 - val_loss: 2.6062 - val_accuracy: 0.1386\n","Epoch 18/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5835 - accuracy: 0.1461 - val_loss: 2.5886 - val_accuracy: 0.1529\n","Epoch 19/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5739 - accuracy: 0.1561 - val_loss: 2.5761 - val_accuracy: 0.1614\n","Epoch 20/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5667 - accuracy: 0.1591 - val_loss: 2.5533 - val_accuracy: 0.1671\n","Epoch 21/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5454 - accuracy: 0.1816 - val_loss: 2.5538 - val_accuracy: 0.1871\n","Epoch 22/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5351 - accuracy: 0.1904 - val_loss: 2.5456 - val_accuracy: 0.1643\n","Epoch 23/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.5245 - accuracy: 0.1839 - val_loss: 2.5300 - val_accuracy: 0.1729\n","Epoch 24/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.5061 - accuracy: 0.1991 - val_loss: 2.5173 - val_accuracy: 0.1943\n","Epoch 25/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.4827 - accuracy: 0.2054 - val_loss: 2.4947 - val_accuracy: 0.1886\n","Epoch 26/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.4691 - accuracy: 0.2139 - val_loss: 2.4798 - val_accuracy: 0.2043\n","Epoch 27/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.4410 - accuracy: 0.2204 - val_loss: 2.4446 - val_accuracy: 0.2071\n","Epoch 28/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.4131 - accuracy: 0.2359 - val_loss: 2.4268 - val_accuracy: 0.2171\n","Epoch 29/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.3848 - accuracy: 0.2412 - val_loss: 2.3944 - val_accuracy: 0.2029\n","Epoch 30/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.3570 - accuracy: 0.2409 - val_loss: 2.3890 - val_accuracy: 0.2286\n","Epoch 31/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.3240 - accuracy: 0.2554 - val_loss: 2.3850 - val_accuracy: 0.2243\n","Epoch 32/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.2926 - accuracy: 0.2730 - val_loss: 2.3012 - val_accuracy: 0.2714\n","Epoch 33/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.2584 - accuracy: 0.2736 - val_loss: 2.2803 - val_accuracy: 0.2443\n","Epoch 34/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.2173 - accuracy: 0.2914 - val_loss: 2.2657 - val_accuracy: 0.2614\n","Epoch 35/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.1712 - accuracy: 0.3036 - val_loss: 2.2380 - val_accuracy: 0.2386\n","Epoch 36/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.1400 - accuracy: 0.3054 - val_loss: 2.1447 - val_accuracy: 0.3014\n","Epoch 37/250\n","44/44 [==============================] - 0s 6ms/step - loss: 2.1079 - accuracy: 0.3182 - val_loss: 2.1352 - val_accuracy: 0.3057\n","Epoch 38/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.0675 - accuracy: 0.3298 - val_loss: 2.1454 - val_accuracy: 0.2986\n","Epoch 39/250\n","44/44 [==============================] - 0s 7ms/step - loss: 2.0311 - accuracy: 0.3300 - val_loss: 2.1274 - val_accuracy: 0.2786\n","Epoch 40/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.9974 - accuracy: 0.3405 - val_loss: 2.0477 - val_accuracy: 0.3271\n","Epoch 41/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.9660 - accuracy: 0.3507 - val_loss: 2.0177 - val_accuracy: 0.3357\n","Epoch 42/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.9211 - accuracy: 0.3680 - val_loss: 2.0090 - val_accuracy: 0.3314\n","Epoch 43/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.9201 - accuracy: 0.3630 - val_loss: 1.9427 - val_accuracy: 0.3671\n","Epoch 44/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.8785 - accuracy: 0.3725 - val_loss: 1.9329 - val_accuracy: 0.3643\n","Epoch 45/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.8429 - accuracy: 0.3857 - val_loss: 1.8916 - val_accuracy: 0.3700\n","Epoch 46/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.8378 - accuracy: 0.3821 - val_loss: 1.8803 - val_accuracy: 0.3557\n","Epoch 47/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.7933 - accuracy: 0.3975 - val_loss: 1.8400 - val_accuracy: 0.3700\n","Epoch 48/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.7674 - accuracy: 0.4073 - val_loss: 1.8416 - val_accuracy: 0.3929\n","Epoch 49/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.7408 - accuracy: 0.4150 - val_loss: 1.8102 - val_accuracy: 0.3771\n","Epoch 50/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.7173 - accuracy: 0.4198 - val_loss: 1.7956 - val_accuracy: 0.3886\n","Epoch 51/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.6969 - accuracy: 0.4332 - val_loss: 1.7824 - val_accuracy: 0.4100\n","Epoch 52/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.6604 - accuracy: 0.4323 - val_loss: 1.7355 - val_accuracy: 0.4071\n","Epoch 53/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.6510 - accuracy: 0.4405 - val_loss: 1.7120 - val_accuracy: 0.4214\n","Epoch 54/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.6323 - accuracy: 0.4432 - val_loss: 1.7174 - val_accuracy: 0.4057\n","Epoch 55/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.6091 - accuracy: 0.4466 - val_loss: 1.6755 - val_accuracy: 0.4257\n","Epoch 56/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.5926 - accuracy: 0.4534 - val_loss: 1.6762 - val_accuracy: 0.4300\n","Epoch 57/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.5599 - accuracy: 0.4696 - val_loss: 1.6464 - val_accuracy: 0.4486\n","Epoch 58/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.5522 - accuracy: 0.4748 - val_loss: 1.6887 - val_accuracy: 0.4243\n","Epoch 59/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.5277 - accuracy: 0.4888 - val_loss: 1.6101 - val_accuracy: 0.4586\n","Epoch 60/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.5016 - accuracy: 0.4795 - val_loss: 1.6210 - val_accuracy: 0.4443\n","Epoch 61/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.4950 - accuracy: 0.4829 - val_loss: 1.6213 - val_accuracy: 0.4314\n","Epoch 62/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.4811 - accuracy: 0.4859 - val_loss: 1.6082 - val_accuracy: 0.4443\n","Epoch 63/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.4556 - accuracy: 0.4970 - val_loss: 1.5708 - val_accuracy: 0.4629\n","Epoch 64/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.4537 - accuracy: 0.4982 - val_loss: 1.5624 - val_accuracy: 0.4529\n","Epoch 65/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.4448 - accuracy: 0.5027 - val_loss: 1.5545 - val_accuracy: 0.4571\n","Epoch 66/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.4040 - accuracy: 0.5171 - val_loss: 1.5617 - val_accuracy: 0.4629\n","Epoch 67/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.4009 - accuracy: 0.5154 - val_loss: 1.4997 - val_accuracy: 0.4886\n","Epoch 68/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.3978 - accuracy: 0.5150 - val_loss: 1.4788 - val_accuracy: 0.5186\n","Epoch 69/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.3679 - accuracy: 0.5337 - val_loss: 1.4842 - val_accuracy: 0.4886\n","Epoch 70/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.3617 - accuracy: 0.5327 - val_loss: 1.4907 - val_accuracy: 0.5057\n","Epoch 71/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.3418 - accuracy: 0.5371 - val_loss: 1.4901 - val_accuracy: 0.4943\n","Epoch 72/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.3250 - accuracy: 0.5414 - val_loss: 1.4665 - val_accuracy: 0.4900\n","Epoch 73/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.3382 - accuracy: 0.5443 - val_loss: 1.4483 - val_accuracy: 0.5114\n","Epoch 74/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.3077 - accuracy: 0.5477 - val_loss: 1.4655 - val_accuracy: 0.5114\n","Epoch 75/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.2903 - accuracy: 0.5509 - val_loss: 1.4609 - val_accuracy: 0.5100\n","Epoch 76/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.2897 - accuracy: 0.5504 - val_loss: 1.4662 - val_accuracy: 0.4957\n","Epoch 77/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.2786 - accuracy: 0.5539 - val_loss: 1.4224 - val_accuracy: 0.5029\n","Epoch 78/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.2710 - accuracy: 0.5552 - val_loss: 1.4020 - val_accuracy: 0.5029\n","Epoch 79/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.2565 - accuracy: 0.5611 - val_loss: 1.3997 - val_accuracy: 0.5171\n","Epoch 80/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.2415 - accuracy: 0.5648 - val_loss: 1.3883 - val_accuracy: 0.5029\n","Epoch 81/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.2227 - accuracy: 0.5813 - val_loss: 1.4124 - val_accuracy: 0.5271\n","Epoch 82/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.2199 - accuracy: 0.5748 - val_loss: 1.4143 - val_accuracy: 0.5386\n","Epoch 83/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.2103 - accuracy: 0.5786 - val_loss: 1.3336 - val_accuracy: 0.5486\n","Epoch 84/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.2047 - accuracy: 0.5841 - val_loss: 1.3789 - val_accuracy: 0.5371\n","Epoch 85/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.1873 - accuracy: 0.5852 - val_loss: 1.3671 - val_accuracy: 0.5314\n","Epoch 86/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.1822 - accuracy: 0.5904 - val_loss: 1.4325 - val_accuracy: 0.5300\n","Epoch 87/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.1782 - accuracy: 0.5929 - val_loss: 1.3429 - val_accuracy: 0.5529\n","Epoch 88/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.1534 - accuracy: 0.6073 - val_loss: 1.3583 - val_accuracy: 0.5429\n","Epoch 89/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.1493 - accuracy: 0.6089 - val_loss: 1.3202 - val_accuracy: 0.5686\n","Epoch 90/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.1550 - accuracy: 0.6012 - val_loss: 1.3152 - val_accuracy: 0.5557\n","Epoch 91/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.1407 - accuracy: 0.6064 - val_loss: 1.3936 - val_accuracy: 0.5200\n","Epoch 92/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.1259 - accuracy: 0.6107 - val_loss: 1.2718 - val_accuracy: 0.5657\n","Epoch 93/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.1004 - accuracy: 0.6205 - val_loss: 1.2842 - val_accuracy: 0.5614\n","Epoch 94/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.1147 - accuracy: 0.6123 - val_loss: 1.3828 - val_accuracy: 0.5300\n","Epoch 95/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.1142 - accuracy: 0.6104 - val_loss: 1.3161 - val_accuracy: 0.5371\n","Epoch 96/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.1055 - accuracy: 0.6146 - val_loss: 1.2638 - val_accuracy: 0.5771\n","Epoch 97/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.1205 - accuracy: 0.6193 - val_loss: 1.3588 - val_accuracy: 0.5700\n","Epoch 98/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.0671 - accuracy: 0.6380 - val_loss: 1.2471 - val_accuracy: 0.5729\n","Epoch 99/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.0612 - accuracy: 0.6414 - val_loss: 1.3343 - val_accuracy: 0.5686\n","Epoch 100/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.0484 - accuracy: 0.6423 - val_loss: 1.2781 - val_accuracy: 0.5700\n","Epoch 101/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.0482 - accuracy: 0.6470 - val_loss: 1.2235 - val_accuracy: 0.5857\n","Epoch 102/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.0616 - accuracy: 0.6329 - val_loss: 1.2730 - val_accuracy: 0.5843\n","Epoch 103/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.0308 - accuracy: 0.6505 - val_loss: 1.3465 - val_accuracy: 0.5486\n","Epoch 104/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.0280 - accuracy: 0.6438 - val_loss: 1.2180 - val_accuracy: 0.5929\n","Epoch 105/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.0220 - accuracy: 0.6505 - val_loss: 1.2448 - val_accuracy: 0.5886\n","Epoch 106/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.0335 - accuracy: 0.6438 - val_loss: 1.2008 - val_accuracy: 0.6143\n","Epoch 107/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.0000 - accuracy: 0.6566 - val_loss: 1.2479 - val_accuracy: 0.6000\n","Epoch 108/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.0200 - accuracy: 0.6559 - val_loss: 1.2656 - val_accuracy: 0.5943\n","Epoch 109/250\n","44/44 [==============================] - 0s 6ms/step - loss: 1.0098 - accuracy: 0.6505 - val_loss: 1.2683 - val_accuracy: 0.5443\n","Epoch 110/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.0122 - accuracy: 0.6559 - val_loss: 1.2029 - val_accuracy: 0.6200\n","Epoch 111/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.9641 - accuracy: 0.6757 - val_loss: 1.2456 - val_accuracy: 0.5800\n","Epoch 112/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.9912 - accuracy: 0.6600 - val_loss: 1.2648 - val_accuracy: 0.5986\n","Epoch 113/250\n","44/44 [==============================] - 0s 7ms/step - loss: 1.0072 - accuracy: 0.6523 - val_loss: 1.2711 - val_accuracy: 0.5900\n","Epoch 114/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.9695 - accuracy: 0.6696 - val_loss: 1.2602 - val_accuracy: 0.5600\n","Epoch 115/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.9654 - accuracy: 0.6671 - val_loss: 1.2933 - val_accuracy: 0.5757\n","Epoch 116/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.9481 - accuracy: 0.6830 - val_loss: 1.2608 - val_accuracy: 0.5829\n","Epoch 117/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.9534 - accuracy: 0.6791 - val_loss: 1.2494 - val_accuracy: 0.5957\n","Epoch 118/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.9317 - accuracy: 0.6837 - val_loss: 1.2163 - val_accuracy: 0.5900\n","Epoch 119/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.9375 - accuracy: 0.6795 - val_loss: 1.1741 - val_accuracy: 0.6429\n","Epoch 120/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.9313 - accuracy: 0.6829 - val_loss: 1.2298 - val_accuracy: 0.6043\n","Epoch 121/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.9396 - accuracy: 0.6739 - val_loss: 1.2007 - val_accuracy: 0.6043\n","Epoch 122/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.9083 - accuracy: 0.6977 - val_loss: 1.2946 - val_accuracy: 0.5771\n","Epoch 123/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.9034 - accuracy: 0.7004 - val_loss: 1.1791 - val_accuracy: 0.6071\n","Epoch 124/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.9146 - accuracy: 0.6925 - val_loss: 1.3414 - val_accuracy: 0.5971\n","Epoch 125/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8964 - accuracy: 0.7014 - val_loss: 1.1843 - val_accuracy: 0.6343\n","Epoch 126/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8999 - accuracy: 0.6964 - val_loss: 1.1931 - val_accuracy: 0.6171\n","Epoch 127/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.9165 - accuracy: 0.6845 - val_loss: 1.2569 - val_accuracy: 0.6086\n","Epoch 128/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8816 - accuracy: 0.7004 - val_loss: 1.1748 - val_accuracy: 0.6029\n","Epoch 129/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8954 - accuracy: 0.6913 - val_loss: 1.2757 - val_accuracy: 0.6014\n","Epoch 130/250\n","44/44 [==============================] - 0s 6ms/step - loss: 0.8881 - accuracy: 0.6905 - val_loss: 1.1713 - val_accuracy: 0.6214\n","Epoch 131/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8806 - accuracy: 0.7061 - val_loss: 1.2151 - val_accuracy: 0.6229\n","Epoch 132/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8978 - accuracy: 0.6952 - val_loss: 1.2801 - val_accuracy: 0.5843\n","Epoch 133/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8546 - accuracy: 0.7171 - val_loss: 1.1929 - val_accuracy: 0.6243\n","Epoch 134/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8611 - accuracy: 0.7064 - val_loss: 1.2578 - val_accuracy: 0.5771\n","Epoch 135/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8714 - accuracy: 0.7043 - val_loss: 1.1864 - val_accuracy: 0.6129\n","Epoch 136/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8524 - accuracy: 0.7098 - val_loss: 1.2456 - val_accuracy: 0.5743\n","Epoch 137/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8528 - accuracy: 0.7138 - val_loss: 1.2635 - val_accuracy: 0.6157\n","Epoch 138/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8179 - accuracy: 0.7291 - val_loss: 1.1642 - val_accuracy: 0.6343\n","Epoch 139/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8427 - accuracy: 0.7143 - val_loss: 1.1746 - val_accuracy: 0.6343\n","Epoch 140/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8344 - accuracy: 0.7254 - val_loss: 1.1650 - val_accuracy: 0.6414\n","Epoch 141/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8306 - accuracy: 0.7230 - val_loss: 1.3416 - val_accuracy: 0.5900\n","Epoch 142/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8321 - accuracy: 0.7152 - val_loss: 1.1702 - val_accuracy: 0.6414\n","Epoch 143/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8281 - accuracy: 0.7200 - val_loss: 1.3089 - val_accuracy: 0.6071\n","Epoch 144/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8060 - accuracy: 0.7268 - val_loss: 1.1967 - val_accuracy: 0.6157\n","Epoch 145/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7893 - accuracy: 0.7337 - val_loss: 1.1428 - val_accuracy: 0.6443\n","Epoch 146/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7892 - accuracy: 0.7380 - val_loss: 1.2059 - val_accuracy: 0.6100\n","Epoch 147/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8299 - accuracy: 0.7159 - val_loss: 1.1658 - val_accuracy: 0.6314\n","Epoch 148/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8183 - accuracy: 0.7248 - val_loss: 1.2373 - val_accuracy: 0.6129\n","Epoch 149/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7852 - accuracy: 0.7377 - val_loss: 1.2236 - val_accuracy: 0.6214\n","Epoch 150/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7645 - accuracy: 0.7396 - val_loss: 1.1893 - val_accuracy: 0.6371\n","Epoch 151/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7787 - accuracy: 0.7354 - val_loss: 1.1198 - val_accuracy: 0.6314\n","Epoch 152/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.8126 - accuracy: 0.7245 - val_loss: 1.1081 - val_accuracy: 0.6429\n","Epoch 153/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7528 - accuracy: 0.7513 - val_loss: 1.1405 - val_accuracy: 0.6371\n","Epoch 154/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7758 - accuracy: 0.7329 - val_loss: 1.1160 - val_accuracy: 0.6514\n","Epoch 155/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7848 - accuracy: 0.7341 - val_loss: 1.1495 - val_accuracy: 0.6400\n","Epoch 156/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7673 - accuracy: 0.7468 - val_loss: 1.1961 - val_accuracy: 0.6000\n","Epoch 157/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7745 - accuracy: 0.7425 - val_loss: 1.1034 - val_accuracy: 0.6529\n","Epoch 158/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7498 - accuracy: 0.7523 - val_loss: 1.1425 - val_accuracy: 0.6271\n","Epoch 159/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7417 - accuracy: 0.7495 - val_loss: 1.2580 - val_accuracy: 0.5971\n","Epoch 160/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7310 - accuracy: 0.7525 - val_loss: 1.1287 - val_accuracy: 0.6429\n","Epoch 161/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7412 - accuracy: 0.7461 - val_loss: 1.1643 - val_accuracy: 0.6300\n","Epoch 162/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7377 - accuracy: 0.7491 - val_loss: 1.1989 - val_accuracy: 0.6343\n","Epoch 163/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7419 - accuracy: 0.7539 - val_loss: 1.1122 - val_accuracy: 0.6486\n","Epoch 164/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7193 - accuracy: 0.7570 - val_loss: 1.3205 - val_accuracy: 0.6014\n","Epoch 165/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7517 - accuracy: 0.7480 - val_loss: 1.1774 - val_accuracy: 0.6414\n","Epoch 166/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6994 - accuracy: 0.7688 - val_loss: 1.1299 - val_accuracy: 0.6357\n","Epoch 167/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7149 - accuracy: 0.7659 - val_loss: 1.0892 - val_accuracy: 0.6529\n","Epoch 168/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7094 - accuracy: 0.7630 - val_loss: 1.1797 - val_accuracy: 0.6486\n","Epoch 169/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7430 - accuracy: 0.7457 - val_loss: 1.1219 - val_accuracy: 0.6614\n","Epoch 170/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7064 - accuracy: 0.7646 - val_loss: 1.1222 - val_accuracy: 0.6486\n","Epoch 171/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7202 - accuracy: 0.7620 - val_loss: 1.1421 - val_accuracy: 0.6371\n","Epoch 172/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7021 - accuracy: 0.7652 - val_loss: 1.1620 - val_accuracy: 0.6486\n","Epoch 173/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6864 - accuracy: 0.7636 - val_loss: 1.1608 - val_accuracy: 0.6643\n","Epoch 174/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6709 - accuracy: 0.7789 - val_loss: 1.1822 - val_accuracy: 0.6129\n","Epoch 175/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7107 - accuracy: 0.7586 - val_loss: 1.2248 - val_accuracy: 0.6100\n","Epoch 176/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.7003 - accuracy: 0.7680 - val_loss: 1.2055 - val_accuracy: 0.6200\n","Epoch 177/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6794 - accuracy: 0.7682 - val_loss: 1.2526 - val_accuracy: 0.6014\n","Epoch 178/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6821 - accuracy: 0.7702 - val_loss: 1.1553 - val_accuracy: 0.6586\n","Epoch 179/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6873 - accuracy: 0.7704 - val_loss: 1.1414 - val_accuracy: 0.6543\n","Epoch 180/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6573 - accuracy: 0.7830 - val_loss: 1.1490 - val_accuracy: 0.6471\n","Epoch 181/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6677 - accuracy: 0.7761 - val_loss: 1.1313 - val_accuracy: 0.6400\n","Epoch 182/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6869 - accuracy: 0.7652 - val_loss: 1.2526 - val_accuracy: 0.6014\n","Epoch 183/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6843 - accuracy: 0.7713 - val_loss: 1.1288 - val_accuracy: 0.6557\n","Epoch 184/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6465 - accuracy: 0.7829 - val_loss: 1.1795 - val_accuracy: 0.6371\n","Epoch 185/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6655 - accuracy: 0.7786 - val_loss: 1.1371 - val_accuracy: 0.6457\n","Epoch 186/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6355 - accuracy: 0.7862 - val_loss: 1.1500 - val_accuracy: 0.6614\n","Epoch 187/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6479 - accuracy: 0.7841 - val_loss: 1.1118 - val_accuracy: 0.6600\n","Epoch 188/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6512 - accuracy: 0.7848 - val_loss: 1.1521 - val_accuracy: 0.6486\n","Epoch 189/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6458 - accuracy: 0.7855 - val_loss: 1.2090 - val_accuracy: 0.6314\n","Epoch 190/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6406 - accuracy: 0.7861 - val_loss: 1.1807 - val_accuracy: 0.6529\n","Epoch 191/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6527 - accuracy: 0.7818 - val_loss: 1.4613 - val_accuracy: 0.5457\n","Epoch 192/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6461 - accuracy: 0.7846 - val_loss: 1.1357 - val_accuracy: 0.6557\n","Epoch 193/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6436 - accuracy: 0.7798 - val_loss: 1.2068 - val_accuracy: 0.6257\n","Epoch 194/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6563 - accuracy: 0.7805 - val_loss: 1.1566 - val_accuracy: 0.6486\n","Epoch 195/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6413 - accuracy: 0.7816 - val_loss: 1.1660 - val_accuracy: 0.6529\n","Epoch 196/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6266 - accuracy: 0.7902 - val_loss: 1.1147 - val_accuracy: 0.6629\n","Epoch 197/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6105 - accuracy: 0.7970 - val_loss: 1.1501 - val_accuracy: 0.6614\n","Epoch 198/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6279 - accuracy: 0.7887 - val_loss: 1.0731 - val_accuracy: 0.6743\n","Epoch 199/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6247 - accuracy: 0.7896 - val_loss: 1.1993 - val_accuracy: 0.6443\n","Epoch 200/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6406 - accuracy: 0.7884 - val_loss: 1.1549 - val_accuracy: 0.6700\n","Epoch 201/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6053 - accuracy: 0.7989 - val_loss: 1.1865 - val_accuracy: 0.6500\n","Epoch 202/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6162 - accuracy: 0.7975 - val_loss: 1.1694 - val_accuracy: 0.6614\n","Epoch 203/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5905 - accuracy: 0.8039 - val_loss: 1.1514 - val_accuracy: 0.6643\n","Epoch 204/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6024 - accuracy: 0.7959 - val_loss: 1.1629 - val_accuracy: 0.6643\n","Epoch 205/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6199 - accuracy: 0.7929 - val_loss: 1.1179 - val_accuracy: 0.6529\n","Epoch 206/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5934 - accuracy: 0.8052 - val_loss: 1.1794 - val_accuracy: 0.6414\n","Epoch 207/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5926 - accuracy: 0.7957 - val_loss: 1.2394 - val_accuracy: 0.6229\n","Epoch 208/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6286 - accuracy: 0.7859 - val_loss: 1.1381 - val_accuracy: 0.6571\n","Epoch 209/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5859 - accuracy: 0.8057 - val_loss: 1.2518 - val_accuracy: 0.6429\n","Epoch 210/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6088 - accuracy: 0.7907 - val_loss: 1.1874 - val_accuracy: 0.6686\n","Epoch 211/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5918 - accuracy: 0.7995 - val_loss: 1.1644 - val_accuracy: 0.6586\n","Epoch 212/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5910 - accuracy: 0.8016 - val_loss: 1.1281 - val_accuracy: 0.6700\n","Epoch 213/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5812 - accuracy: 0.8034 - val_loss: 1.3633 - val_accuracy: 0.5914\n","Epoch 214/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.6208 - accuracy: 0.7861 - val_loss: 1.3174 - val_accuracy: 0.6286\n","Epoch 215/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5884 - accuracy: 0.8032 - val_loss: 1.1458 - val_accuracy: 0.6714\n","Epoch 216/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5624 - accuracy: 0.8116 - val_loss: 1.1943 - val_accuracy: 0.6414\n","Epoch 217/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5646 - accuracy: 0.8104 - val_loss: 1.2713 - val_accuracy: 0.6243\n","Epoch 218/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5816 - accuracy: 0.8034 - val_loss: 1.2006 - val_accuracy: 0.6471\n","Epoch 219/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5792 - accuracy: 0.8070 - val_loss: 1.2548 - val_accuracy: 0.6371\n","Epoch 220/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5856 - accuracy: 0.7993 - val_loss: 1.1632 - val_accuracy: 0.6586\n","Epoch 221/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5449 - accuracy: 0.8180 - val_loss: 1.1883 - val_accuracy: 0.6671\n","Epoch 222/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5729 - accuracy: 0.8061 - val_loss: 1.2074 - val_accuracy: 0.6529\n","Epoch 223/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5783 - accuracy: 0.8062 - val_loss: 1.1664 - val_accuracy: 0.6571\n","Epoch 224/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5574 - accuracy: 0.8141 - val_loss: 1.1808 - val_accuracy: 0.6557\n","Epoch 225/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5478 - accuracy: 0.8186 - val_loss: 1.1476 - val_accuracy: 0.6714\n","Epoch 226/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5498 - accuracy: 0.8150 - val_loss: 1.1821 - val_accuracy: 0.6771\n","Epoch 227/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5347 - accuracy: 0.8163 - val_loss: 1.2333 - val_accuracy: 0.6557\n","Epoch 228/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5443 - accuracy: 0.8191 - val_loss: 1.2927 - val_accuracy: 0.6357\n","Epoch 229/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5625 - accuracy: 0.8041 - val_loss: 1.1587 - val_accuracy: 0.6529\n","Epoch 230/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5268 - accuracy: 0.8273 - val_loss: 1.1206 - val_accuracy: 0.6571\n","Epoch 231/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5481 - accuracy: 0.8152 - val_loss: 1.1942 - val_accuracy: 0.6671\n","Epoch 232/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5519 - accuracy: 0.8195 - val_loss: 1.2440 - val_accuracy: 0.6457\n","Epoch 233/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5220 - accuracy: 0.8234 - val_loss: 1.1865 - val_accuracy: 0.6629\n","Epoch 234/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5449 - accuracy: 0.8180 - val_loss: 1.1595 - val_accuracy: 0.6614\n","Epoch 235/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5279 - accuracy: 0.8257 - val_loss: 1.2952 - val_accuracy: 0.6200\n","Epoch 236/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5351 - accuracy: 0.8132 - val_loss: 1.1757 - val_accuracy: 0.6786\n","Epoch 237/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5177 - accuracy: 0.8266 - val_loss: 1.1486 - val_accuracy: 0.6729\n","Epoch 238/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5286 - accuracy: 0.8152 - val_loss: 1.3112 - val_accuracy: 0.6343\n","Epoch 239/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5181 - accuracy: 0.8298 - val_loss: 1.1822 - val_accuracy: 0.6686\n","Epoch 240/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5633 - accuracy: 0.8070 - val_loss: 1.1273 - val_accuracy: 0.6714\n","Epoch 241/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5186 - accuracy: 0.8279 - val_loss: 1.2128 - val_accuracy: 0.6500\n","Epoch 242/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5431 - accuracy: 0.8082 - val_loss: 1.2227 - val_accuracy: 0.6571\n","Epoch 243/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5183 - accuracy: 0.8216 - val_loss: 1.2442 - val_accuracy: 0.6657\n","Epoch 244/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5340 - accuracy: 0.8213 - val_loss: 1.1914 - val_accuracy: 0.6686\n","Epoch 245/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5078 - accuracy: 0.8300 - val_loss: 1.2679 - val_accuracy: 0.6643\n","Epoch 246/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5235 - accuracy: 0.8195 - val_loss: 1.2179 - val_accuracy: 0.6671\n","Epoch 247/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5206 - accuracy: 0.8227 - val_loss: 1.2835 - val_accuracy: 0.6500\n","Epoch 248/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5099 - accuracy: 0.8293 - val_loss: 1.1755 - val_accuracy: 0.6743\n","Epoch 249/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5157 - accuracy: 0.8252 - val_loss: 1.2018 - val_accuracy: 0.6743\n","Epoch 250/250\n","44/44 [==============================] - 0s 7ms/step - loss: 0.5009 - accuracy: 0.8316 - val_loss: 1.3292 - val_accuracy: 0.6371\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f9eb5181eb8>"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"C-60Y8FPS7Ki"},"source":[""],"execution_count":null,"outputs":[]}]}