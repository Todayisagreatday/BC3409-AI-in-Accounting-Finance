{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Q3a_CharRNN","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyO4lSEZSUB8l1qYXWaHKtVQ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"vw2P79c0KjnK"},"source":["# Mount Drive"]},{"cell_type":"code","metadata":{"id":"MsObL7B7Siou","executionInfo":{"status":"ok","timestamp":1604855004529,"user_tz":-480,"elapsed":31961,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"2cc25198-5e29-4ec5-9ffc-d004bd055e79","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"tdiuNxXTKl2t"},"source":["# Install Weights and Biases"]},{"cell_type":"code","metadata":{"id":"NdaTK82wnP1b","executionInfo":{"status":"ok","timestamp":1604855028010,"user_tz":-480,"elapsed":9212,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"f0f9d1a3-4ec9-471d-83dc-09b5c3d14d33","colab":{"base_uri":"https://localhost:8080/"}},"source":["!pip install wandb -qqq"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 1.8MB 10.1MB/s \n","\u001b[K     |████████████████████████████████| 163kB 57.4MB/s \n","\u001b[K     |████████████████████████████████| 102kB 13.5MB/s \n","\u001b[K     |████████████████████████████████| 133kB 57.5MB/s \n","\u001b[K     |████████████████████████████████| 102kB 11.9MB/s \n","\u001b[K     |████████████████████████████████| 71kB 8.2MB/s \n","\u001b[?25h  Building wheel for watchdog (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for subprocess32 (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"okkmuf0vKo7_"},"source":["# Run Model"]},{"cell_type":"code","metadata":{"id":"9oGQD0F_dqYS"},"source":["# Preprocessing Functions\n","def vocabulary(strings):\n","    chars = sorted(list(set(list(''.join(strings)))))\n","    char_to_ix = { ch:i for i,ch in enumerate(chars) }\n","    vocab_size = len(chars)\n","    return vocab_size, char_to_ix\n","\n","def preprocess(strings, char_to_ix, MAX_LENGTH):\n","    data_chars = [list(d.lower()) for _, d in enumerate(strings)]\n","    for i, d in enumerate(data_chars):\n","        if len(d)>MAX_LENGTH:\n","            d = d[:MAX_LENGTH]\n","        elif len(d) < MAX_LENGTH:\n","            d += [' '] * (MAX_LENGTH - len(d))\n","            \n","    data_ids = np.zeros([len(data_chars), MAX_LENGTH], dtype=np.int64)\n","    for i in range(len(data_chars)):\n","        for j in range(MAX_LENGTH):\n","            data_ids[i, j] = char_to_ix[data_chars[i][j]]\n","    return np.array(data_ids)\n","\n","def read_data_chars():\n","    x_train, y_train, x_test, y_test = [], [], [], []\n","    cop = re.compile(\"[^a-z^A-Z^0-9^,^.^' ']\")\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/train_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_train.append(data)\n","            y_train.append(int(row[0]))\n","\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/test_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_test.append(data)\n","            y_test.append(int(row[0]))\n","\n","\n","    vocab_size, char_to_ix = vocabulary(x_train+x_test)\n","    x_train = preprocess(x_train, char_to_ix, 100)\n","    y_train = np.array(y_train)\n","    x_test = preprocess(x_test, char_to_ix, 100)\n","    y_test = np.array(y_test)\n","\n","    x_train = tf.constant(x_train, dtype=tf.int64)\n","    y_train = tf.constant(y_train, dtype=tf.int64)\n","    x_test = tf.constant(x_test, dtype=tf.int64)\n","    y_test = tf.constant(y_test, dtype=tf.int64)\n","\n","    return x_train, y_train, x_test, y_test\n","\n","def OneHot(input_dim=None, input_length=None):\n","    # Check if inputs were supplied correctly\n","    if input_dim is None or input_length is None:\n","        raise TypeError(\"input_dim or input_length is not set\")\n","\n","    # Helper method (not inlined for clarity)\n","    def _one_hot(x, num_classes):\n","        return K.one_hot(K.cast(x, 'uint8'),\n","                          num_classes=num_classes)\n","\n","    # Final layer representation as a Lambda layer\n","    return layers.Lambda(_one_hot,\n","                  arguments={'num_classes': input_dim},\n","                  input_shape=(input_length,))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ugg05UW4QnW8","executionInfo":{"status":"ok","timestamp":1604855255660,"user_tz":-480,"elapsed":236520,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"7cf56c8c-0522-4ecc-f4e3-9468e3e0bb71","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import wandb\n","from wandb.keras import WandbCallback\n","from keras.preprocessing.text import Tokenizer\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow.keras import Model, layers, models\n","from keras import backend as K\n","import csv\n","import re\n","\n","\n","# Hyperparameters\n","defaults = {\n","    'embedding_size' : 50,\n","    'hidden_size' : 20,\n","    'hidden_dim' : 10,\n","    'batch_size' : 128,\n","    'epochs' : 100,\n","    'lr' : 0.01,\n","    'Dropout' : 'No'\n","}\n","\n","# Initiate wandb\n","wandb.init(config=defaults, resume=True, name='CharRNN Q3a', project='NNA2 Part B Redo')\n","config = wandb.config\n","\n","# Fix lucky seed!\n","seed = 7\n","tf.random.set_seed(seed)\n","\n","# Train test split\n","x_train, y_train, x_test, y_test = read_data_chars()\n","\n","# Use `tf.data` to batch and shuffle the dataset:\n","train_ds = tf.data.Dataset.from_tensor_slices(\n","    (x_train, y_train)).shuffle(10000).batch(config.batch_size)\n","test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(config.batch_size)\n","\n","# Define model\n","tf.keras.backend.set_floatx('float32')\n","model = models.Sequential()\n","model.add(OneHot(input_dim=256, input_length=100))\n","model.add(layers.RNN(layers.GRUCell(config.hidden_size), unroll=True))\n","model.add(layers.Dense(15, activation=None))\n","model.summary()\n","\n","# Choose optimizer and loss function\n","opt = tf.keras.optimizers.Adam(learning_rate=config.lr)\n","loss_object = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n","\n","# Compile model\n","model.compile(\n","    optimizer=opt,\n","    loss=loss_object,\n","    metrics=['accuracy'],\n",")\n","\n","# Train model\n","model.fit(\n","    train_ds,\n","    validation_data=test_ds,\n","    batch_size=config.batch_size,\n","    epochs=config.epochs,\n","    callbacks=[WandbCallback()],\n","    )"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","        window._wandbApiKey = new Promise((resolve, reject) => {\n","            function loadScript(url) {\n","            return new Promise(function(resolve, reject) {\n","                let newScript = document.createElement(\"script\");\n","                newScript.onerror = reject;\n","                newScript.onload = resolve;\n","                document.body.appendChild(newScript);\n","                newScript.src = url;\n","            });\n","            }\n","            loadScript(\"https://cdn.jsdelivr.net/npm/postmate/build/postmate.min.js\").then(() => {\n","            const iframe = document.createElement('iframe')\n","            iframe.style.cssText = \"width:0;height:0;border:none\"\n","            document.body.appendChild(iframe)\n","            const handshake = new Postmate({\n","                container: iframe,\n","                url: 'https://wandb.ai/authorize'\n","            });\n","            const timeout = setTimeout(() => reject(\"Couldn't auto authenticate\"), 5000)\n","            handshake.then(function(child) {\n","                child.on('authorize', data => {\n","                    clearTimeout(timeout)\n","                    resolve(data)\n","                });\n","            });\n","            })\n","        });\n","    "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n"],"name":"stderr"},{"output_type":"stream","text":["wandb: Paste an API key from your profile and hit enter: ··········\n"],"name":"stdout"},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.9<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">CharRNN Q3a</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo</a><br/>\n","                Run page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/rrnwe2ep\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/rrnwe2ep</a><br/>\n","                Run data is saved locally in <code>wandb/run-20201108_170405-rrnwe2ep</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","lambda (Lambda)              (None, 100, 256)          0         \n","_________________________________________________________________\n","rnn (RNN)                    (None, 20)                16680     \n","_________________________________________________________________\n","dense (Dense)                (None, 15)                315       \n","=================================================================\n","Total params: 16,995\n","Trainable params: 16,995\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/100\n","44/44 [==============================] - 4s 82ms/step - loss: 2.6472 - accuracy: 0.0864 - val_loss: 2.6111 - val_accuracy: 0.0914\n","Epoch 2/100\n","44/44 [==============================] - 2s 41ms/step - loss: 2.5924 - accuracy: 0.1187 - val_loss: 2.5655 - val_accuracy: 0.1257\n","Epoch 3/100\n","44/44 [==============================] - 2s 40ms/step - loss: 2.3684 - accuracy: 0.1845 - val_loss: 2.2190 - val_accuracy: 0.2371\n","Epoch 4/100\n","44/44 [==============================] - 2s 39ms/step - loss: 2.0567 - accuracy: 0.2716 - val_loss: 1.9791 - val_accuracy: 0.3071\n","Epoch 5/100\n","44/44 [==============================] - 2s 41ms/step - loss: 1.8228 - accuracy: 0.3514 - val_loss: 1.8037 - val_accuracy: 0.3929\n","Epoch 6/100\n","44/44 [==============================] - 2s 45ms/step - loss: 1.6197 - accuracy: 0.4204 - val_loss: 1.6013 - val_accuracy: 0.4229\n","Epoch 7/100\n","44/44 [==============================] - 2s 41ms/step - loss: 1.4436 - accuracy: 0.4963 - val_loss: 1.4674 - val_accuracy: 0.4986\n","Epoch 8/100\n","44/44 [==============================] - 2s 39ms/step - loss: 1.3162 - accuracy: 0.5445 - val_loss: 1.3885 - val_accuracy: 0.5100\n","Epoch 9/100\n","44/44 [==============================] - 2s 44ms/step - loss: 1.2106 - accuracy: 0.5664 - val_loss: 1.3015 - val_accuracy: 0.5357\n","Epoch 10/100\n","44/44 [==============================] - 2s 39ms/step - loss: 1.1188 - accuracy: 0.6139 - val_loss: 1.2754 - val_accuracy: 0.5629\n","Epoch 11/100\n","44/44 [==============================] - 2s 41ms/step - loss: 1.0570 - accuracy: 0.6257 - val_loss: 1.2497 - val_accuracy: 0.5643\n","Epoch 12/100\n","44/44 [==============================] - 2s 41ms/step - loss: 1.0005 - accuracy: 0.6532 - val_loss: 1.2275 - val_accuracy: 0.5957\n","Epoch 13/100\n","44/44 [==============================] - 2s 39ms/step - loss: 0.9566 - accuracy: 0.6716 - val_loss: 1.1575 - val_accuracy: 0.6171\n","Epoch 14/100\n","44/44 [==============================] - 2s 40ms/step - loss: 0.9085 - accuracy: 0.6873 - val_loss: 1.1889 - val_accuracy: 0.6129\n","Epoch 15/100\n","44/44 [==============================] - 2s 39ms/step - loss: 0.8619 - accuracy: 0.7059 - val_loss: 1.1564 - val_accuracy: 0.6343\n","Epoch 16/100\n","44/44 [==============================] - 2s 42ms/step - loss: 0.8223 - accuracy: 0.7220 - val_loss: 1.1187 - val_accuracy: 0.6329\n","Epoch 17/100\n","44/44 [==============================] - 2s 42ms/step - loss: 0.7909 - accuracy: 0.7357 - val_loss: 1.1321 - val_accuracy: 0.6343\n","Epoch 18/100\n","44/44 [==============================] - 2s 42ms/step - loss: 0.7723 - accuracy: 0.7432 - val_loss: 1.1129 - val_accuracy: 0.6457\n","Epoch 19/100\n","44/44 [==============================] - 2s 39ms/step - loss: 0.7484 - accuracy: 0.7436 - val_loss: 1.1066 - val_accuracy: 0.6686\n","Epoch 20/100\n","44/44 [==============================] - 2s 39ms/step - loss: 0.7304 - accuracy: 0.7586 - val_loss: 1.0923 - val_accuracy: 0.6786\n","Epoch 21/100\n","44/44 [==============================] - 2s 37ms/step - loss: 0.7002 - accuracy: 0.7668 - val_loss: 1.1429 - val_accuracy: 0.6671\n","Epoch 22/100\n","44/44 [==============================] - 2s 40ms/step - loss: 0.6762 - accuracy: 0.7716 - val_loss: 1.0917 - val_accuracy: 0.6686\n","Epoch 23/100\n","44/44 [==============================] - 2s 42ms/step - loss: 0.6665 - accuracy: 0.7843 - val_loss: 1.1032 - val_accuracy: 0.6700\n","Epoch 24/100\n","44/44 [==============================] - 2s 38ms/step - loss: 0.6670 - accuracy: 0.7754 - val_loss: 1.1244 - val_accuracy: 0.6729\n","Epoch 25/100\n","44/44 [==============================] - 2s 38ms/step - loss: 0.6214 - accuracy: 0.7986 - val_loss: 1.0702 - val_accuracy: 0.6843\n","Epoch 26/100\n","44/44 [==============================] - 2s 39ms/step - loss: 0.5972 - accuracy: 0.8032 - val_loss: 1.0875 - val_accuracy: 0.6900\n","Epoch 27/100\n","44/44 [==============================] - 2s 40ms/step - loss: 0.5704 - accuracy: 0.8139 - val_loss: 1.1299 - val_accuracy: 0.6886\n","Epoch 28/100\n","44/44 [==============================] - 2s 41ms/step - loss: 0.5693 - accuracy: 0.8180 - val_loss: 1.0626 - val_accuracy: 0.6900\n","Epoch 29/100\n","44/44 [==============================] - 2s 41ms/step - loss: 0.5554 - accuracy: 0.8161 - val_loss: 1.0634 - val_accuracy: 0.6986\n","Epoch 30/100\n","44/44 [==============================] - 2s 42ms/step - loss: 0.5381 - accuracy: 0.8250 - val_loss: 1.0476 - val_accuracy: 0.6871\n","Epoch 31/100\n","44/44 [==============================] - 2s 38ms/step - loss: 0.5254 - accuracy: 0.8259 - val_loss: 1.0798 - val_accuracy: 0.6843\n","Epoch 32/100\n","44/44 [==============================] - 2s 39ms/step - loss: 0.5259 - accuracy: 0.8296 - val_loss: 1.0884 - val_accuracy: 0.6857\n","Epoch 33/100\n","44/44 [==============================] - 2s 45ms/step - loss: 0.4967 - accuracy: 0.8377 - val_loss: 1.0682 - val_accuracy: 0.6929\n","Epoch 34/100\n","44/44 [==============================] - 2s 39ms/step - loss: 0.5387 - accuracy: 0.8232 - val_loss: 1.1519 - val_accuracy: 0.6729\n","Epoch 35/100\n","44/44 [==============================] - 2s 40ms/step - loss: 0.5590 - accuracy: 0.8171 - val_loss: 1.0582 - val_accuracy: 0.7000\n","Epoch 36/100\n","44/44 [==============================] - 2s 39ms/step - loss: 0.5016 - accuracy: 0.8321 - val_loss: 1.0407 - val_accuracy: 0.7029\n","Epoch 37/100\n","44/44 [==============================] - 2s 39ms/step - loss: 0.4893 - accuracy: 0.8398 - val_loss: 1.1029 - val_accuracy: 0.6871\n","Epoch 38/100\n","44/44 [==============================] - 2s 45ms/step - loss: 0.4770 - accuracy: 0.8443 - val_loss: 1.1029 - val_accuracy: 0.6914\n","Epoch 39/100\n","44/44 [==============================] - 2s 42ms/step - loss: 0.4571 - accuracy: 0.8493 - val_loss: 1.1005 - val_accuracy: 0.7014\n","Epoch 40/100\n","44/44 [==============================] - 2s 38ms/step - loss: 0.4442 - accuracy: 0.8525 - val_loss: 1.1431 - val_accuracy: 0.6871\n","Epoch 41/100\n","44/44 [==============================] - 2s 42ms/step - loss: 0.4493 - accuracy: 0.8543 - val_loss: 1.1323 - val_accuracy: 0.7014\n","Epoch 42/100\n","44/44 [==============================] - 2s 37ms/step - loss: 0.4338 - accuracy: 0.8546 - val_loss: 1.0852 - val_accuracy: 0.7100\n","Epoch 43/100\n","44/44 [==============================] - 2s 39ms/step - loss: 0.6205 - accuracy: 0.7977 - val_loss: 1.0839 - val_accuracy: 0.6743\n","Epoch 44/100\n","44/44 [==============================] - 2s 38ms/step - loss: 0.5651 - accuracy: 0.8159 - val_loss: 1.0372 - val_accuracy: 0.6914\n","Epoch 45/100\n","44/44 [==============================] - 2s 47ms/step - loss: 0.4778 - accuracy: 0.8430 - val_loss: 1.0963 - val_accuracy: 0.6943\n","Epoch 46/100\n","44/44 [==============================] - 2s 38ms/step - loss: 0.4491 - accuracy: 0.8529 - val_loss: 1.1300 - val_accuracy: 0.6914\n","Epoch 47/100\n","44/44 [==============================] - 2s 37ms/step - loss: 0.4200 - accuracy: 0.8682 - val_loss: 1.0812 - val_accuracy: 0.6929\n","Epoch 48/100\n","44/44 [==============================] - 2s 40ms/step - loss: 0.4387 - accuracy: 0.8584 - val_loss: 1.1202 - val_accuracy: 0.6871\n","Epoch 49/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.4086 - accuracy: 0.8687 - val_loss: 1.0979 - val_accuracy: 0.7014\n","Epoch 50/100\n","44/44 [==============================] - 2s 44ms/step - loss: 0.3848 - accuracy: 0.8696 - val_loss: 1.1426 - val_accuracy: 0.6786\n","Epoch 51/100\n","44/44 [==============================] - 2s 39ms/step - loss: 0.3755 - accuracy: 0.8784 - val_loss: 1.2190 - val_accuracy: 0.6829\n","Epoch 52/100\n","44/44 [==============================] - 2s 40ms/step - loss: 0.4060 - accuracy: 0.8673 - val_loss: 1.2527 - val_accuracy: 0.6943\n","Epoch 53/100\n","44/44 [==============================] - 2s 42ms/step - loss: 0.6549 - accuracy: 0.7934 - val_loss: 1.0657 - val_accuracy: 0.6929\n","Epoch 54/100\n","44/44 [==============================] - 2s 41ms/step - loss: 0.4829 - accuracy: 0.8388 - val_loss: 1.0174 - val_accuracy: 0.7086\n","Epoch 55/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.4150 - accuracy: 0.8654 - val_loss: 1.2054 - val_accuracy: 0.6857\n","Epoch 56/100\n","44/44 [==============================] - 2s 38ms/step - loss: 0.4245 - accuracy: 0.8566 - val_loss: 1.1393 - val_accuracy: 0.6929\n","Epoch 57/100\n","44/44 [==============================] - 2s 38ms/step - loss: 0.4505 - accuracy: 0.8512 - val_loss: 1.1372 - val_accuracy: 0.7000\n","Epoch 58/100\n","44/44 [==============================] - 2s 40ms/step - loss: 0.3907 - accuracy: 0.8709 - val_loss: 1.1707 - val_accuracy: 0.7086\n","Epoch 59/100\n","44/44 [==============================] - 2s 40ms/step - loss: 0.3659 - accuracy: 0.8804 - val_loss: 1.2109 - val_accuracy: 0.7129\n","Epoch 60/100\n","44/44 [==============================] - 2s 38ms/step - loss: 0.3625 - accuracy: 0.8793 - val_loss: 1.2667 - val_accuracy: 0.6771\n","Epoch 61/100\n","44/44 [==============================] - 2s 41ms/step - loss: 0.3671 - accuracy: 0.8782 - val_loss: 1.2687 - val_accuracy: 0.7014\n","Epoch 62/100\n","44/44 [==============================] - 2s 38ms/step - loss: 0.3877 - accuracy: 0.8714 - val_loss: 1.1733 - val_accuracy: 0.7100\n","Epoch 63/100\n","44/44 [==============================] - 2s 39ms/step - loss: 0.3766 - accuracy: 0.8766 - val_loss: 1.1641 - val_accuracy: 0.7157\n","Epoch 64/100\n","44/44 [==============================] - 2s 39ms/step - loss: 0.3547 - accuracy: 0.8796 - val_loss: 1.3358 - val_accuracy: 0.7000\n","Epoch 65/100\n","44/44 [==============================] - 2s 41ms/step - loss: 0.3545 - accuracy: 0.8839 - val_loss: 1.2327 - val_accuracy: 0.7029\n","Epoch 66/100\n","44/44 [==============================] - 2s 41ms/step - loss: 0.3645 - accuracy: 0.8804 - val_loss: 1.2043 - val_accuracy: 0.7057\n","Epoch 67/100\n","44/44 [==============================] - 2s 38ms/step - loss: 0.3254 - accuracy: 0.8916 - val_loss: 1.1835 - val_accuracy: 0.7043\n","Epoch 68/100\n","44/44 [==============================] - 2s 41ms/step - loss: 0.3157 - accuracy: 0.8995 - val_loss: 1.2089 - val_accuracy: 0.7086\n","Epoch 69/100\n","44/44 [==============================] - 2s 41ms/step - loss: 0.3080 - accuracy: 0.9004 - val_loss: 1.2558 - val_accuracy: 0.7014\n","Epoch 70/100\n","44/44 [==============================] - 2s 40ms/step - loss: 0.3087 - accuracy: 0.8986 - val_loss: 1.2682 - val_accuracy: 0.7071\n","Epoch 71/100\n","44/44 [==============================] - 2s 42ms/step - loss: 0.3069 - accuracy: 0.8988 - val_loss: 1.2906 - val_accuracy: 0.7000\n","Epoch 72/100\n","44/44 [==============================] - 2s 41ms/step - loss: 0.3118 - accuracy: 0.8980 - val_loss: 1.2938 - val_accuracy: 0.7043\n","Epoch 73/100\n","44/44 [==============================] - 2s 41ms/step - loss: 0.3397 - accuracy: 0.8843 - val_loss: 1.3833 - val_accuracy: 0.6957\n","Epoch 74/100\n","44/44 [==============================] - 2s 45ms/step - loss: 0.3507 - accuracy: 0.8886 - val_loss: 1.2218 - val_accuracy: 0.7014\n","Epoch 75/100\n","44/44 [==============================] - 2s 39ms/step - loss: 0.3649 - accuracy: 0.8809 - val_loss: 1.2977 - val_accuracy: 0.6914\n","Epoch 76/100\n","44/44 [==============================] - 2s 40ms/step - loss: 0.3971 - accuracy: 0.8709 - val_loss: 1.2006 - val_accuracy: 0.7071\n","Epoch 77/100\n","44/44 [==============================] - 2s 40ms/step - loss: 0.3820 - accuracy: 0.8745 - val_loss: 1.2595 - val_accuracy: 0.6929\n","Epoch 78/100\n","44/44 [==============================] - 2s 40ms/step - loss: 0.3190 - accuracy: 0.8968 - val_loss: 1.3320 - val_accuracy: 0.6986\n","Epoch 79/100\n","44/44 [==============================] - 2s 38ms/step - loss: 0.3021 - accuracy: 0.9039 - val_loss: 1.2566 - val_accuracy: 0.7171\n","Epoch 80/100\n","44/44 [==============================] - 2s 40ms/step - loss: 0.2889 - accuracy: 0.9079 - val_loss: 1.3412 - val_accuracy: 0.7071\n","Epoch 81/100\n","44/44 [==============================] - 2s 40ms/step - loss: 0.2774 - accuracy: 0.9100 - val_loss: 1.3537 - val_accuracy: 0.7043\n","Epoch 82/100\n","44/44 [==============================] - 2s 38ms/step - loss: 0.2728 - accuracy: 0.9136 - val_loss: 1.4866 - val_accuracy: 0.6843\n","Epoch 83/100\n","44/44 [==============================] - 2s 50ms/step - loss: 0.3335 - accuracy: 0.8884 - val_loss: 1.3392 - val_accuracy: 0.6943\n","Epoch 84/100\n","44/44 [==============================] - 2s 45ms/step - loss: 0.3224 - accuracy: 0.8955 - val_loss: 1.3880 - val_accuracy: 0.6929\n","Epoch 85/100\n","44/44 [==============================] - 2s 40ms/step - loss: 0.2962 - accuracy: 0.9013 - val_loss: 1.3302 - val_accuracy: 0.6971\n","Epoch 86/100\n","44/44 [==============================] - 2s 47ms/step - loss: 0.3651 - accuracy: 0.8863 - val_loss: 1.2845 - val_accuracy: 0.7000\n","Epoch 87/100\n","44/44 [==============================] - 2s 39ms/step - loss: 0.3917 - accuracy: 0.8741 - val_loss: 1.2447 - val_accuracy: 0.7014\n","Epoch 88/100\n","44/44 [==============================] - 2s 39ms/step - loss: 0.3668 - accuracy: 0.8752 - val_loss: 1.2747 - val_accuracy: 0.7143\n","Epoch 89/100\n","44/44 [==============================] - 2s 39ms/step - loss: 0.3072 - accuracy: 0.9009 - val_loss: 1.3203 - val_accuracy: 0.7057\n","Epoch 90/100\n","44/44 [==============================] - 2s 37ms/step - loss: 0.4097 - accuracy: 0.8679 - val_loss: 1.2403 - val_accuracy: 0.6643\n","Epoch 91/100\n","44/44 [==============================] - 2s 37ms/step - loss: 0.4109 - accuracy: 0.8650 - val_loss: 1.3509 - val_accuracy: 0.6986\n","Epoch 92/100\n","44/44 [==============================] - 2s 38ms/step - loss: 0.3200 - accuracy: 0.8946 - val_loss: 1.2682 - val_accuracy: 0.6971\n","Epoch 93/100\n","44/44 [==============================] - 2s 42ms/step - loss: 0.3544 - accuracy: 0.8820 - val_loss: 1.3064 - val_accuracy: 0.7029\n","Epoch 94/100\n","44/44 [==============================] - 2s 41ms/step - loss: 0.3026 - accuracy: 0.9009 - val_loss: 1.3284 - val_accuracy: 0.7029\n","Epoch 95/100\n","44/44 [==============================] - 2s 38ms/step - loss: 0.3096 - accuracy: 0.8975 - val_loss: 1.2709 - val_accuracy: 0.7057\n","Epoch 96/100\n","44/44 [==============================] - 2s 38ms/step - loss: 0.2854 - accuracy: 0.9091 - val_loss: 1.2963 - val_accuracy: 0.7200\n","Epoch 97/100\n","44/44 [==============================] - 2s 37ms/step - loss: 0.2585 - accuracy: 0.9187 - val_loss: 1.3572 - val_accuracy: 0.7071\n","Epoch 98/100\n","44/44 [==============================] - 2s 37ms/step - loss: 0.2722 - accuracy: 0.9109 - val_loss: 1.3272 - val_accuracy: 0.7200\n","Epoch 99/100\n","44/44 [==============================] - 2s 40ms/step - loss: 0.2655 - accuracy: 0.9134 - val_loss: 1.4075 - val_accuracy: 0.7057\n","Epoch 100/100\n","44/44 [==============================] - 2s 41ms/step - loss: 0.2443 - accuracy: 0.9182 - val_loss: 1.3493 - val_accuracy: 0.7043\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f4337fdd400>"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"C-60Y8FPS7Ki"},"source":[""],"execution_count":null,"outputs":[]}]}