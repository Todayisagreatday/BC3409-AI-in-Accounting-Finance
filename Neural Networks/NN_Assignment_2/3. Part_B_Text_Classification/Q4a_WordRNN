{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Q4a_WordRNN","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPiO2y6c2KVOrcifZuvfAKj"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"1IBQOv_CLnfV"},"source":["# Mount Drive"]},{"cell_type":"code","metadata":{"id":"-M48O3QXt0dc","executionInfo":{"status":"ok","timestamp":1604855356402,"user_tz":-480,"elapsed":31510,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"f61b1509-be28-485f-a07f-a59a9dc295aa","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"kNCCRUkWLpd9"},"source":["# Install Libraries"]},{"cell_type":"code","metadata":{"id":"Z2gdCDhmybWe","executionInfo":{"status":"ok","timestamp":1604855365932,"user_tz":-480,"elapsed":41033,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"1b3ccfac-4f84-4916-d57d-8296967bdfac","colab":{"base_uri":"https://localhost:8080/"}},"source":["!pip install wandb -qqq"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 1.8MB 9.1MB/s \n","\u001b[K     |████████████████████████████████| 102kB 13.6MB/s \n","\u001b[K     |████████████████████████████████| 133kB 53.6MB/s \n","\u001b[K     |████████████████████████████████| 102kB 14.1MB/s \n","\u001b[K     |████████████████████████████████| 163kB 50.5MB/s \n","\u001b[K     |████████████████████████████████| 71kB 11.4MB/s \n","\u001b[?25h  Building wheel for subprocess32 (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for watchdog (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"aUnW2mpR502Y","executionInfo":{"status":"ok","timestamp":1604855367410,"user_tz":-480,"elapsed":42504,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"84a70ba1-40bc-4ba4-f26c-16f1915bba9a","colab":{"base_uri":"https://localhost:8080/"}},"source":["import nltk\n","nltk.download('punkt')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"9QcoDcdfLsVW"},"source":["# Run Model"]},{"cell_type":"code","metadata":{"id":"YV-vgOrwzbhT"},"source":["# Preprocessing Functions\n","def clean_str(text):\n","    text = re.sub(r\"[^A-Za-z0-9(),!?\\'\\`\\\"]\", \" \", text)\n","    text = re.sub(r\"\\s{2,}\", \" \", text)\n","    text = text.strip().lower()\n","\n","    return text\n","\n","\n","def build_word_dict(contents):\n","    words = list()\n","    for content in contents:\n","        for word in word_tokenize(clean_str(content)):\n","            words.append(word)\n","\n","    word_counter = collections.Counter(words).most_common()\n","    word_dict = dict()\n","    word_dict[\"<pad>\"] = 0\n","    word_dict[\"<unk>\"] = 1\n","    word_dict[\"<eos>\"] = 2\n","    for word, _ in word_counter:\n","        word_dict[word] = len(word_dict)\n","    return word_dict\n","\n","\n","def preprocess(contents, word_dict, document_max_len):\n","    x = list(map(lambda d: word_tokenize(clean_str(d)), contents))\n","    x = list(map(lambda d: list(map(lambda w: word_dict.get(w, word_dict[\"<unk>\"]), d)), x))\n","    x = list(map(lambda d: d + [word_dict[\"<eos>\"]], x))\n","    x = list(map(lambda d: d[:document_max_len], x))\n","    x = list(map(lambda d: d + (document_max_len - len(d)) * [word_dict[\"<pad>\"]], x))\n","    return x\n","\n","\n","def read_data_words():\n","    x_train, y_train, x_test, y_test = [], [], [], []\n","    cop = re.compile(\"[^a-z^A-Z^0-9^,^.^' ']\")\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/train_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_train.append(data)\n","            y_train.append(int(row[0]))\n","\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/test_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_test.append(data)\n","            y_test.append(int(row[0]))\n","\n","    word_dict = build_word_dict(x_train+x_test)\n","    x_train = preprocess(x_train, word_dict, 100)\n","    y_train = np.array(y_train)\n","    x_test = preprocess(x_test, word_dict, 100)\n","    y_test = np.array(y_test)\n","\n","    x_train = [x[:100] for x in x_train]\n","    x_test = [x[:100] for x in x_test]\n","    x_train = tf.constant(x_train, dtype=tf.int64)\n","    y_train = tf.constant(y_train, dtype=tf.int64)\n","    x_test = tf.constant(x_test, dtype=tf.int64)\n","    y_test = tf.constant(y_test, dtype=tf.int64)\n","\n","    vocab_size = tf.get_static_value(tf.reduce_max(x_train))\n","    vocab_size = max(vocab_size, tf.get_static_value(tf.reduce_max(x_test))) + 1\n","    return x_train, y_train, x_test, y_test, vocab_size"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CnWPz07jyrXz","executionInfo":{"status":"ok","timestamp":1604855687879,"user_tz":-480,"elapsed":362961,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"6e707118-f576-46fb-a8a2-f6ce278b318b","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import wandb\n","from wandb.keras import WandbCallback\n","import collections\n","import numpy as np\n","import tensorflow as tf\n","from nltk.tokenize import word_tokenize\n","from tensorflow.keras import Model, layers, models\n","import csv\n","import re\n","\n","# Hyperparameters\n","defaults = {\n","    'embedding_size' : 50,\n","    'hidden_size' : 20,\n","    'batch_size' : 128,\n","    'epochs' : 100,\n","    'lr' : 0.01,\n","    'Dropout' : 'No'\n","}\n","\n","# Initiate wandb\n","wandb.init(config=defaults, resume=True, name='WordRNN Q4a', project='NNA2 Part B Redo')\n","config = wandb.config\n","\n","# Fix lucky seed!\n","seed = 7\n","tf.random.set_seed(seed)\n","\n","# Train test split\n","x_train, y_train, x_test, y_test, vocab_size = read_data_words()\n","\n","# Use `tf.data` to batch and shuffle the dataset:\n","train_ds = tf.data.Dataset.from_tensor_slices(\n","    (x_train, y_train)).shuffle(10000).batch(config.batch_size)\n","test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(config.batch_size)\n","\n","# Define model\n","tf.keras.backend.set_floatx('float32')\n","model = models.Sequential()\n","model.add(layers.Embedding(vocab_size, config.embedding_size, input_length=100))\n","model.add(layers.RNN(layers.GRUCell(config.hidden_size), unroll=True))\n","model.add(layers.Dense(15, activation=None))\n","model.summary()\n","\n","# Choose optimizer and loss function\n","opt = tf.keras.optimizers.Adam(learning_rate=config.lr)\n","loss_object = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n","\n","# Compile model\n","model.compile(\n","    optimizer=opt,\n","    loss=loss_object,\n","    metrics=['accuracy'],\n",")\n","\n","# Train model\n","model.fit(\n","    train_ds,\n","    validation_data=test_ds,\n","    epochs=config.epochs,\n","    callbacks=[WandbCallback()],\n","    )"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","        window._wandbApiKey = new Promise((resolve, reject) => {\n","            function loadScript(url) {\n","            return new Promise(function(resolve, reject) {\n","                let newScript = document.createElement(\"script\");\n","                newScript.onerror = reject;\n","                newScript.onload = resolve;\n","                document.body.appendChild(newScript);\n","                newScript.src = url;\n","            });\n","            }\n","            loadScript(\"https://cdn.jsdelivr.net/npm/postmate/build/postmate.min.js\").then(() => {\n","            const iframe = document.createElement('iframe')\n","            iframe.style.cssText = \"width:0;height:0;border:none\"\n","            document.body.appendChild(iframe)\n","            const handshake = new Postmate({\n","                container: iframe,\n","                url: 'https://wandb.ai/authorize'\n","            });\n","            const timeout = setTimeout(() => reject(\"Couldn't auto authenticate\"), 5000)\n","            handshake.then(function(child) {\n","                child.on('authorize', data => {\n","                    clearTimeout(timeout)\n","                    resolve(data)\n","                });\n","            });\n","            })\n","        });\n","    "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n"],"name":"stderr"},{"output_type":"stream","text":["wandb: Paste an API key from your profile and hit enter: ··········\n"],"name":"stdout"},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.9<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">WordRNN Q4a</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo</a><br/>\n","                Run page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/31i1h5jb\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/31i1h5jb</a><br/>\n","                Run data is saved locally in <code>wandb/run-20201108_170941-31i1h5jb</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding (Embedding)        (None, 100, 50)           1764350   \n","_________________________________________________________________\n","rnn (RNN)                    (None, 20)                4320      \n","_________________________________________________________________\n","dense (Dense)                (None, 15)                315       \n","=================================================================\n","Total params: 1,768,985\n","Trainable params: 1,768,985\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/100\n","44/44 [==============================] - 5s 116ms/step - loss: 2.6645 - accuracy: 0.0709 - val_loss: 2.6485 - val_accuracy: 0.0714\n","Epoch 2/100\n","44/44 [==============================] - 3s 67ms/step - loss: 2.6500 - accuracy: 0.0721 - val_loss: 2.6450 - val_accuracy: 0.0829\n","Epoch 3/100\n","44/44 [==============================] - 3s 66ms/step - loss: 2.4154 - accuracy: 0.1516 - val_loss: 1.9947 - val_accuracy: 0.3071\n","Epoch 4/100\n","44/44 [==============================] - 3s 66ms/step - loss: 1.4357 - accuracy: 0.5168 - val_loss: 0.9904 - val_accuracy: 0.7243\n","Epoch 5/100\n","44/44 [==============================] - 3s 65ms/step - loss: 0.5868 - accuracy: 0.8366 - val_loss: 0.7174 - val_accuracy: 0.7929\n","Epoch 6/100\n","44/44 [==============================] - 3s 66ms/step - loss: 0.2776 - accuracy: 0.9289 - val_loss: 0.5171 - val_accuracy: 0.8714\n","Epoch 7/100\n","44/44 [==============================] - 3s 65ms/step - loss: 0.1039 - accuracy: 0.9798 - val_loss: 0.4573 - val_accuracy: 0.8900\n","Epoch 8/100\n","44/44 [==============================] - 3s 65ms/step - loss: 0.0451 - accuracy: 0.9929 - val_loss: 0.4479 - val_accuracy: 0.8886\n","Epoch 9/100\n","44/44 [==============================] - 3s 65ms/step - loss: 0.0297 - accuracy: 0.9952 - val_loss: 0.5348 - val_accuracy: 0.8686\n","Epoch 10/100\n","44/44 [==============================] - 3s 62ms/step - loss: 0.0176 - accuracy: 0.9971 - val_loss: 0.5004 - val_accuracy: 0.8814\n","Epoch 11/100\n","44/44 [==============================] - 3s 62ms/step - loss: 0.0103 - accuracy: 0.9993 - val_loss: 0.5002 - val_accuracy: 0.8857\n","Epoch 12/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0068 - accuracy: 0.9996 - val_loss: 0.5083 - val_accuracy: 0.8857\n","Epoch 13/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0060 - accuracy: 0.9996 - val_loss: 0.5215 - val_accuracy: 0.8886\n","Epoch 14/100\n","44/44 [==============================] - 3s 62ms/step - loss: 0.0041 - accuracy: 0.9998 - val_loss: 0.5347 - val_accuracy: 0.8843\n","Epoch 15/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0035 - accuracy: 0.9998 - val_loss: 0.5435 - val_accuracy: 0.8843\n","Epoch 16/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0029 - accuracy: 1.0000 - val_loss: 0.5511 - val_accuracy: 0.8857\n","Epoch 17/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0025 - accuracy: 1.0000 - val_loss: 0.5594 - val_accuracy: 0.8843\n","Epoch 18/100\n","44/44 [==============================] - 3s 62ms/step - loss: 0.0022 - accuracy: 1.0000 - val_loss: 0.5673 - val_accuracy: 0.8843\n","Epoch 19/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0019 - accuracy: 1.0000 - val_loss: 0.5753 - val_accuracy: 0.8871\n","Epoch 20/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0017 - accuracy: 1.0000 - val_loss: 0.5825 - val_accuracy: 0.8871\n","Epoch 21/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0016 - accuracy: 1.0000 - val_loss: 0.5883 - val_accuracy: 0.8871\n","Epoch 22/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0014 - accuracy: 1.0000 - val_loss: 0.5940 - val_accuracy: 0.8871\n","Epoch 23/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0013 - accuracy: 1.0000 - val_loss: 0.6006 - val_accuracy: 0.8857\n","Epoch 24/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0012 - accuracy: 1.0000 - val_loss: 0.6068 - val_accuracy: 0.8857\n","Epoch 25/100\n","44/44 [==============================] - 3s 62ms/step - loss: 0.0011 - accuracy: 1.0000 - val_loss: 0.6128 - val_accuracy: 0.8871\n","Epoch 26/100\n","44/44 [==============================] - 3s 60ms/step - loss: 0.0010 - accuracy: 1.0000 - val_loss: 0.6191 - val_accuracy: 0.8871\n","Epoch 27/100\n","44/44 [==============================] - 3s 61ms/step - loss: 9.2945e-04 - accuracy: 1.0000 - val_loss: 0.6245 - val_accuracy: 0.8843\n","Epoch 28/100\n","44/44 [==============================] - 3s 60ms/step - loss: 8.6541e-04 - accuracy: 1.0000 - val_loss: 0.6286 - val_accuracy: 0.8857\n","Epoch 29/100\n","44/44 [==============================] - 3s 61ms/step - loss: 8.0711e-04 - accuracy: 1.0000 - val_loss: 0.6339 - val_accuracy: 0.8857\n","Epoch 30/100\n","44/44 [==============================] - 3s 60ms/step - loss: 7.5456e-04 - accuracy: 1.0000 - val_loss: 0.6398 - val_accuracy: 0.8857\n","Epoch 31/100\n","44/44 [==============================] - 3s 59ms/step - loss: 7.0745e-04 - accuracy: 1.0000 - val_loss: 0.6457 - val_accuracy: 0.8857\n","Epoch 32/100\n","44/44 [==============================] - 3s 60ms/step - loss: 6.6489e-04 - accuracy: 1.0000 - val_loss: 0.6506 - val_accuracy: 0.8857\n","Epoch 33/100\n","44/44 [==============================] - 3s 60ms/step - loss: 6.2543e-04 - accuracy: 1.0000 - val_loss: 0.6558 - val_accuracy: 0.8857\n","Epoch 34/100\n","44/44 [==============================] - 3s 59ms/step - loss: 5.8994e-04 - accuracy: 1.0000 - val_loss: 0.6605 - val_accuracy: 0.8843\n","Epoch 35/100\n","44/44 [==============================] - 3s 60ms/step - loss: 5.5669e-04 - accuracy: 1.0000 - val_loss: 0.6651 - val_accuracy: 0.8829\n","Epoch 36/100\n","44/44 [==============================] - 3s 59ms/step - loss: 5.2670e-04 - accuracy: 1.0000 - val_loss: 0.6694 - val_accuracy: 0.8829\n","Epoch 37/100\n","44/44 [==============================] - 3s 60ms/step - loss: 4.9890e-04 - accuracy: 1.0000 - val_loss: 0.6740 - val_accuracy: 0.8829\n","Epoch 38/100\n","44/44 [==============================] - 3s 60ms/step - loss: 4.7348e-04 - accuracy: 1.0000 - val_loss: 0.6770 - val_accuracy: 0.8829\n","Epoch 39/100\n","44/44 [==============================] - 3s 61ms/step - loss: 4.4947e-04 - accuracy: 1.0000 - val_loss: 0.6801 - val_accuracy: 0.8814\n","Epoch 40/100\n","44/44 [==============================] - 3s 61ms/step - loss: 4.2756e-04 - accuracy: 1.0000 - val_loss: 0.6843 - val_accuracy: 0.8814\n","Epoch 41/100\n","44/44 [==============================] - 3s 60ms/step - loss: 4.0677e-04 - accuracy: 1.0000 - val_loss: 0.6882 - val_accuracy: 0.8814\n","Epoch 42/100\n","44/44 [==============================] - 3s 60ms/step - loss: 3.8774e-04 - accuracy: 1.0000 - val_loss: 0.6919 - val_accuracy: 0.8814\n","Epoch 43/100\n","44/44 [==============================] - 3s 60ms/step - loss: 3.6964e-04 - accuracy: 1.0000 - val_loss: 0.6955 - val_accuracy: 0.8814\n","Epoch 44/100\n","44/44 [==============================] - 3s 59ms/step - loss: 3.5286e-04 - accuracy: 1.0000 - val_loss: 0.6994 - val_accuracy: 0.8814\n","Epoch 45/100\n","44/44 [==============================] - 3s 59ms/step - loss: 3.3722e-04 - accuracy: 1.0000 - val_loss: 0.7032 - val_accuracy: 0.8814\n","Epoch 46/100\n","44/44 [==============================] - 3s 60ms/step - loss: 3.2253e-04 - accuracy: 1.0000 - val_loss: 0.7069 - val_accuracy: 0.8814\n","Epoch 47/100\n","44/44 [==============================] - 3s 59ms/step - loss: 3.0874e-04 - accuracy: 1.0000 - val_loss: 0.7099 - val_accuracy: 0.8800\n","Epoch 48/100\n","44/44 [==============================] - 3s 59ms/step - loss: 2.9580e-04 - accuracy: 1.0000 - val_loss: 0.7137 - val_accuracy: 0.8814\n","Epoch 49/100\n","44/44 [==============================] - 3s 59ms/step - loss: 2.8351e-04 - accuracy: 1.0000 - val_loss: 0.7171 - val_accuracy: 0.8814\n","Epoch 50/100\n","44/44 [==============================] - 3s 59ms/step - loss: 2.7202e-04 - accuracy: 1.0000 - val_loss: 0.7205 - val_accuracy: 0.8829\n","Epoch 51/100\n","44/44 [==============================] - 3s 60ms/step - loss: 2.6110e-04 - accuracy: 1.0000 - val_loss: 0.7240 - val_accuracy: 0.8814\n","Epoch 52/100\n","44/44 [==============================] - 3s 60ms/step - loss: 2.5084e-04 - accuracy: 1.0000 - val_loss: 0.7273 - val_accuracy: 0.8800\n","Epoch 53/100\n","44/44 [==============================] - 3s 60ms/step - loss: 2.4107e-04 - accuracy: 1.0000 - val_loss: 0.7310 - val_accuracy: 0.8800\n","Epoch 54/100\n","44/44 [==============================] - 3s 60ms/step - loss: 2.3184e-04 - accuracy: 1.0000 - val_loss: 0.7350 - val_accuracy: 0.8800\n","Epoch 55/100\n","44/44 [==============================] - 3s 59ms/step - loss: 2.2313e-04 - accuracy: 1.0000 - val_loss: 0.7385 - val_accuracy: 0.8786\n","Epoch 56/100\n","44/44 [==============================] - 3s 59ms/step - loss: 2.1489e-04 - accuracy: 1.0000 - val_loss: 0.7430 - val_accuracy: 0.8786\n","Epoch 57/100\n","44/44 [==============================] - 3s 59ms/step - loss: 2.0698e-04 - accuracy: 1.0000 - val_loss: 0.7472 - val_accuracy: 0.8757\n","Epoch 58/100\n","44/44 [==============================] - 3s 59ms/step - loss: 1.9951e-04 - accuracy: 1.0000 - val_loss: 0.7513 - val_accuracy: 0.8757\n","Epoch 59/100\n","44/44 [==============================] - 3s 59ms/step - loss: 1.9235e-04 - accuracy: 1.0000 - val_loss: 0.7552 - val_accuracy: 0.8743\n","Epoch 60/100\n","44/44 [==============================] - 3s 59ms/step - loss: 1.8557e-04 - accuracy: 1.0000 - val_loss: 0.7589 - val_accuracy: 0.8743\n","Epoch 61/100\n","44/44 [==============================] - 3s 59ms/step - loss: 1.7906e-04 - accuracy: 1.0000 - val_loss: 0.7623 - val_accuracy: 0.8743\n","Epoch 62/100\n","44/44 [==============================] - 3s 59ms/step - loss: 1.7288e-04 - accuracy: 1.0000 - val_loss: 0.7662 - val_accuracy: 0.8743\n","Epoch 63/100\n","44/44 [==============================] - 3s 59ms/step - loss: 1.6699e-04 - accuracy: 1.0000 - val_loss: 0.7697 - val_accuracy: 0.8743\n","Epoch 64/100\n","44/44 [==============================] - 3s 59ms/step - loss: 1.6136e-04 - accuracy: 1.0000 - val_loss: 0.7739 - val_accuracy: 0.8743\n","Epoch 65/100\n","44/44 [==============================] - 3s 59ms/step - loss: 1.5597e-04 - accuracy: 1.0000 - val_loss: 0.7774 - val_accuracy: 0.8743\n","Epoch 66/100\n","44/44 [==============================] - 3s 58ms/step - loss: 1.5084e-04 - accuracy: 1.0000 - val_loss: 0.7810 - val_accuracy: 0.8729\n","Epoch 67/100\n","44/44 [==============================] - 3s 59ms/step - loss: 1.4588e-04 - accuracy: 1.0000 - val_loss: 0.7844 - val_accuracy: 0.8729\n","Epoch 68/100\n","44/44 [==============================] - 3s 59ms/step - loss: 1.4116e-04 - accuracy: 1.0000 - val_loss: 0.7878 - val_accuracy: 0.8714\n","Epoch 69/100\n","44/44 [==============================] - 3s 59ms/step - loss: 1.3661e-04 - accuracy: 1.0000 - val_loss: 0.7907 - val_accuracy: 0.8729\n","Epoch 70/100\n","44/44 [==============================] - 3s 60ms/step - loss: 1.3228e-04 - accuracy: 1.0000 - val_loss: 0.7937 - val_accuracy: 0.8714\n","Epoch 71/100\n","44/44 [==============================] - 3s 59ms/step - loss: 1.2807e-04 - accuracy: 1.0000 - val_loss: 0.7967 - val_accuracy: 0.8700\n","Epoch 72/100\n","44/44 [==============================] - 3s 59ms/step - loss: 1.2409e-04 - accuracy: 1.0000 - val_loss: 0.8000 - val_accuracy: 0.8700\n","Epoch 73/100\n","44/44 [==============================] - 3s 58ms/step - loss: 1.2023e-04 - accuracy: 1.0000 - val_loss: 0.8027 - val_accuracy: 0.8686\n","Epoch 74/100\n","44/44 [==============================] - 3s 58ms/step - loss: 1.1654e-04 - accuracy: 1.0000 - val_loss: 0.8058 - val_accuracy: 0.8686\n","Epoch 75/100\n","44/44 [==============================] - 3s 58ms/step - loss: 1.1296e-04 - accuracy: 1.0000 - val_loss: 0.8085 - val_accuracy: 0.8686\n","Epoch 76/100\n","44/44 [==============================] - 3s 58ms/step - loss: 1.0954e-04 - accuracy: 1.0000 - val_loss: 0.8116 - val_accuracy: 0.8686\n","Epoch 77/100\n","44/44 [==============================] - 3s 58ms/step - loss: 1.0624e-04 - accuracy: 1.0000 - val_loss: 0.8147 - val_accuracy: 0.8686\n","Epoch 78/100\n","44/44 [==============================] - 3s 59ms/step - loss: 1.0308e-04 - accuracy: 1.0000 - val_loss: 0.8173 - val_accuracy: 0.8686\n","Epoch 79/100\n","44/44 [==============================] - 3s 59ms/step - loss: 1.0001e-04 - accuracy: 1.0000 - val_loss: 0.8199 - val_accuracy: 0.8686\n","Epoch 80/100\n","44/44 [==============================] - 3s 59ms/step - loss: 9.7066e-05 - accuracy: 1.0000 - val_loss: 0.8228 - val_accuracy: 0.8686\n","Epoch 81/100\n","44/44 [==============================] - 3s 60ms/step - loss: 9.4224e-05 - accuracy: 1.0000 - val_loss: 0.8251 - val_accuracy: 0.8686\n","Epoch 82/100\n","44/44 [==============================] - 3s 59ms/step - loss: 9.1479e-05 - accuracy: 1.0000 - val_loss: 0.8281 - val_accuracy: 0.8686\n","Epoch 83/100\n","44/44 [==============================] - 3s 58ms/step - loss: 8.8832e-05 - accuracy: 1.0000 - val_loss: 0.8308 - val_accuracy: 0.8686\n","Epoch 84/100\n","44/44 [==============================] - 3s 58ms/step - loss: 8.6283e-05 - accuracy: 1.0000 - val_loss: 0.8335 - val_accuracy: 0.8686\n","Epoch 85/100\n","44/44 [==============================] - 3s 58ms/step - loss: 8.3818e-05 - accuracy: 1.0000 - val_loss: 0.8365 - val_accuracy: 0.8686\n","Epoch 86/100\n","44/44 [==============================] - 3s 59ms/step - loss: 8.1442e-05 - accuracy: 1.0000 - val_loss: 0.8399 - val_accuracy: 0.8671\n","Epoch 87/100\n","44/44 [==============================] - 3s 59ms/step - loss: 7.9147e-05 - accuracy: 1.0000 - val_loss: 0.8432 - val_accuracy: 0.8671\n","Epoch 88/100\n","44/44 [==============================] - 3s 59ms/step - loss: 7.6931e-05 - accuracy: 1.0000 - val_loss: 0.8468 - val_accuracy: 0.8671\n","Epoch 89/100\n","44/44 [==============================] - 3s 59ms/step - loss: 7.4781e-05 - accuracy: 1.0000 - val_loss: 0.8532 - val_accuracy: 0.8671\n","Epoch 90/100\n","44/44 [==============================] - 3s 59ms/step - loss: 7.2704e-05 - accuracy: 1.0000 - val_loss: 0.8570 - val_accuracy: 0.8657\n","Epoch 91/100\n","44/44 [==============================] - 3s 59ms/step - loss: 7.0693e-05 - accuracy: 1.0000 - val_loss: 0.8600 - val_accuracy: 0.8657\n","Epoch 92/100\n","44/44 [==============================] - 3s 59ms/step - loss: 6.8752e-05 - accuracy: 1.0000 - val_loss: 0.8634 - val_accuracy: 0.8657\n","Epoch 93/100\n","44/44 [==============================] - 3s 59ms/step - loss: 6.6862e-05 - accuracy: 1.0000 - val_loss: 0.8663 - val_accuracy: 0.8657\n","Epoch 94/100\n","44/44 [==============================] - 3s 59ms/step - loss: 6.5049e-05 - accuracy: 1.0000 - val_loss: 0.8693 - val_accuracy: 0.8657\n","Epoch 95/100\n","44/44 [==============================] - 3s 59ms/step - loss: 6.3286e-05 - accuracy: 1.0000 - val_loss: 0.8723 - val_accuracy: 0.8657\n","Epoch 96/100\n","44/44 [==============================] - 3s 59ms/step - loss: 6.1578e-05 - accuracy: 1.0000 - val_loss: 0.8749 - val_accuracy: 0.8657\n","Epoch 97/100\n","44/44 [==============================] - 3s 59ms/step - loss: 5.9920e-05 - accuracy: 1.0000 - val_loss: 0.8778 - val_accuracy: 0.8643\n","Epoch 98/100\n","44/44 [==============================] - 3s 58ms/step - loss: 5.8321e-05 - accuracy: 1.0000 - val_loss: 0.8808 - val_accuracy: 0.8643\n","Epoch 99/100\n","44/44 [==============================] - 3s 59ms/step - loss: 5.6764e-05 - accuracy: 1.0000 - val_loss: 0.8839 - val_accuracy: 0.8629\n","Epoch 100/100\n","44/44 [==============================] - 3s 59ms/step - loss: 5.5259e-05 - accuracy: 1.0000 - val_loss: 0.8874 - val_accuracy: 0.8629\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f3094bfa588>"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"10s9udsJChxm"},"source":[""],"execution_count":null,"outputs":[]}]}