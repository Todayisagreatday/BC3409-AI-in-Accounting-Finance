{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CharRNN_Q6ai","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMB20VitkDWJijiZTSyD8Rs"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"MsObL7B7Siou","executionInfo":{"status":"ok","timestamp":1604856845914,"user_tz":-480,"elapsed":40602,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"059a0622-8b25-4751-b5bb-45a86c46b9e5","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"NdaTK82wnP1b","executionInfo":{"status":"ok","timestamp":1604856856346,"user_tz":-480,"elapsed":10409,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"58373488-510a-41a1-cf25-fdc2ec8afbc2","colab":{"base_uri":"https://localhost:8080/"}},"source":["!pip install wandb -qqq"],"execution_count":2,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 1.8MB 4.6MB/s \n","\u001b[K     |████████████████████████████████| 133kB 32.8MB/s \n","\u001b[K     |████████████████████████████████| 102kB 10.4MB/s \n","\u001b[K     |████████████████████████████████| 163kB 17.8MB/s \n","\u001b[K     |████████████████████████████████| 102kB 10.9MB/s \n","\u001b[K     |████████████████████████████████| 71kB 10.7MB/s \n","\u001b[?25h  Building wheel for subprocess32 (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for watchdog (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9oGQD0F_dqYS","executionInfo":{"status":"ok","timestamp":1604856856348,"user_tz":-480,"elapsed":10406,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}}},"source":["# Preprocessing Functions\n","def vocabulary(strings):\n","    chars = sorted(list(set(list(''.join(strings)))))\n","    char_to_ix = { ch:i for i,ch in enumerate(chars) }\n","    vocab_size = len(chars)\n","    return vocab_size, char_to_ix\n","\n","def preprocess(strings, char_to_ix, MAX_LENGTH):\n","    data_chars = [list(d.lower()) for _, d in enumerate(strings)]\n","    for i, d in enumerate(data_chars):\n","        if len(d)>MAX_LENGTH:\n","            d = d[:MAX_LENGTH]\n","        elif len(d) < MAX_LENGTH:\n","            d += [' '] * (MAX_LENGTH - len(d))\n","            \n","    data_ids = np.zeros([len(data_chars), MAX_LENGTH], dtype=np.int64)\n","    for i in range(len(data_chars)):\n","        for j in range(MAX_LENGTH):\n","            data_ids[i, j] = char_to_ix[data_chars[i][j]]\n","    return np.array(data_ids)\n","\n","def read_data_chars():\n","    x_train, y_train, x_test, y_test = [], [], [], []\n","    cop = re.compile(\"[^a-z^A-Z^0-9^,^.^' ']\")\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/train_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_train.append(data)\n","            y_train.append(int(row[0]))\n","\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/test_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_test.append(data)\n","            y_test.append(int(row[0]))\n","\n","\n","    vocab_size, char_to_ix = vocabulary(x_train+x_test)\n","    x_train = preprocess(x_train, char_to_ix, 100)\n","    y_train = np.array(y_train)\n","    x_test = preprocess(x_test, char_to_ix, 100)\n","    y_test = np.array(y_test)\n","\n","    x_train = tf.constant(x_train, dtype=tf.int64)\n","    y_train = tf.constant(y_train, dtype=tf.int64)\n","    x_test = tf.constant(x_test, dtype=tf.int64)\n","    y_test = tf.constant(y_test, dtype=tf.int64)\n","\n","    return x_train, y_train, x_test, y_test\n","\n","def OneHot(input_dim=None, input_length=None):\n","    # Check if inputs were supplied correctly\n","    if input_dim is None or input_length is None:\n","        raise TypeError(\"input_dim or input_length is not set\")\n","\n","    # Helper method (not inlined for clarity)\n","    def _one_hot(x, num_classes):\n","        return K.one_hot(K.cast(x, 'uint8'),\n","                          num_classes=num_classes)\n","\n","    # Final layer representation as a Lambda layer\n","    return layers.Lambda(_one_hot,\n","                  arguments={'num_classes': input_dim},\n","                  input_shape=(input_length,))"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ugg05UW4QnW8","executionInfo":{"status":"ok","timestamp":1604856928524,"user_tz":-480,"elapsed":82570,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"ff5c3ef8-c5e2-43d2-c5ec-13dc9faabb3f","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import wandb\n","from wandb.keras import WandbCallback\n","from keras.preprocessing.text import Tokenizer\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow.keras import Model, layers, models\n","from keras import backend as K\n","import csv\n","import re\n","\n","# Hyperparameters\n","defaults = {\n","    'embedding_size' : 50,\n","    'hidden_size' : 20,\n","    'batch_size' : 128,\n","    'epochs' : 100,\n","    'lr' : 0.01,\n","    'Dropout' : 'Yes'\n","}\n","\n","# Initiate wandb\n","wandb.init(config=defaults, resume=True, name='CharRNN Q6bi-2', project='NNA2 Part B Redo', notes='linear activation')\n","config = wandb.config\n","\n","# Fix lucky seed!\n","seed = 7\n","tf.random.set_seed(seed)\n","\n","# Train test split\n","x_train, y_train, x_test, y_test = read_data_chars()\n","\n","# Use `tf.data` to batch and shuffle the dataset:\n","train_ds = tf.data.Dataset.from_tensor_slices(\n","    (x_train, y_train)).shuffle(10000).batch(config.batch_size)\n","test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(config.batch_size)\n","\n","# Define model\n","tf.keras.backend.set_floatx('float32')\n","model = models.Sequential()\n","model.add(OneHot(input_dim=256, input_length=100))\n","model.add(layers.RNN(layers.SimpleRNNCell(config.hidden_size, activation=None), unroll=True))\n","model.add(layers.Dropout(0.5))\n","model.add(layers.Dense(15, activation=None))\n","model.summary()\n","\n","# Choose optimizer and loss function\n","opt = tf.keras.optimizers.Adam(learning_rate=config.lr)\n","loss_object = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n","\n","# Compile model\n","model.compile(\n","    optimizer=opt,\n","    loss=loss_object,\n","    metrics=['accuracy'],\n",")\n","\n","# Train model\n","model.fit(\n","    train_ds,\n","    validation_data=test_ds,\n","    epochs=config.epochs,\n","    callbacks=[WandbCallback()],\n","    )"],"execution_count":4,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","        window._wandbApiKey = new Promise((resolve, reject) => {\n","            function loadScript(url) {\n","            return new Promise(function(resolve, reject) {\n","                let newScript = document.createElement(\"script\");\n","                newScript.onerror = reject;\n","                newScript.onload = resolve;\n","                document.body.appendChild(newScript);\n","                newScript.src = url;\n","            });\n","            }\n","            loadScript(\"https://cdn.jsdelivr.net/npm/postmate/build/postmate.min.js\").then(() => {\n","            const iframe = document.createElement('iframe')\n","            iframe.style.cssText = \"width:0;height:0;border:none\"\n","            document.body.appendChild(iframe)\n","            const handshake = new Postmate({\n","                container: iframe,\n","                url: 'https://wandb.ai/authorize'\n","            });\n","            const timeout = setTimeout(() => reject(\"Couldn't auto authenticate\"), 5000)\n","            handshake.then(function(child) {\n","                child.on('authorize', data => {\n","                    clearTimeout(timeout)\n","                    resolve(data)\n","                });\n","            });\n","            })\n","        });\n","    "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n"],"name":"stderr"},{"output_type":"stream","text":["wandb: Paste an API key from your profile and hit enter: ··········\n"],"name":"stdout"},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.9<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">CharRNN Q6bi-2</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo</a><br/>\n","                Run page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/1ncl5r8b\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/1ncl5r8b</a><br/>\n","                Run data is saved locally in <code>wandb/run-20201108_173425-1ncl5r8b</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","lambda (Lambda)              (None, 100, 256)          0         \n","_________________________________________________________________\n","rnn (RNN)                    (None, 20)                5540      \n","_________________________________________________________________\n","dropout (Dropout)            (None, 20)                0         \n","_________________________________________________________________\n","dense (Dense)                (None, 15)                315       \n","=================================================================\n","Total params: 5,855\n","Trainable params: 5,855\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/100\n","44/44 [==============================] - 1s 27ms/step - loss: 2.7190 - accuracy: 0.0793 - val_loss: 2.6632 - val_accuracy: 0.0971\n","Epoch 2/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.6571 - accuracy: 0.0862 - val_loss: 2.6444 - val_accuracy: 0.0957\n","Epoch 3/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.6282 - accuracy: 0.1054 - val_loss: 2.6110 - val_accuracy: 0.0914\n","Epoch 4/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.6240 - accuracy: 0.1093 - val_loss: 2.6187 - val_accuracy: 0.0900\n","Epoch 5/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.6078 - accuracy: 0.1155 - val_loss: 2.6140 - val_accuracy: 0.1000\n","Epoch 6/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.6034 - accuracy: 0.1187 - val_loss: 2.5983 - val_accuracy: 0.1014\n","Epoch 7/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.5996 - accuracy: 0.1200 - val_loss: 2.6093 - val_accuracy: 0.0971\n","Epoch 8/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.6235 - accuracy: 0.0993 - val_loss: 2.6459 - val_accuracy: 0.1029\n","Epoch 9/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.6061 - accuracy: 0.1073 - val_loss: 2.6407 - val_accuracy: 0.0857\n","Epoch 10/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.6008 - accuracy: 0.1050 - val_loss: 2.6328 - val_accuracy: 0.0929\n","Epoch 11/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.5902 - accuracy: 0.1171 - val_loss: 2.6135 - val_accuracy: 0.1014\n","Epoch 12/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.5739 - accuracy: 0.1207 - val_loss: 2.5976 - val_accuracy: 0.1129\n","Epoch 13/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.6060 - accuracy: 0.1088 - val_loss: 2.6362 - val_accuracy: 0.0957\n","Epoch 14/100\n","44/44 [==============================] - 1s 11ms/step - loss: 2.5919 - accuracy: 0.1136 - val_loss: 2.6310 - val_accuracy: 0.0986\n","Epoch 15/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.5846 - accuracy: 0.1175 - val_loss: 2.6251 - val_accuracy: 0.0929\n","Epoch 16/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.5775 - accuracy: 0.1248 - val_loss: 2.6161 - val_accuracy: 0.1029\n","Epoch 17/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.5848 - accuracy: 0.1095 - val_loss: 2.6537 - val_accuracy: 0.1014\n","Epoch 18/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.6055 - accuracy: 0.1037 - val_loss: 2.6459 - val_accuracy: 0.1029\n","Epoch 19/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.5957 - accuracy: 0.1164 - val_loss: 2.6408 - val_accuracy: 0.0971\n","Epoch 20/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.5919 - accuracy: 0.1107 - val_loss: 2.6336 - val_accuracy: 0.1014\n","Epoch 21/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.5896 - accuracy: 0.1139 - val_loss: 2.6350 - val_accuracy: 0.1043\n","Epoch 22/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.5858 - accuracy: 0.1193 - val_loss: 2.6346 - val_accuracy: 0.0900\n","Epoch 23/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.5801 - accuracy: 0.1130 - val_loss: 2.6388 - val_accuracy: 0.0971\n","Epoch 24/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.5799 - accuracy: 0.1187 - val_loss: 2.6341 - val_accuracy: 0.0886\n","Epoch 25/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.5741 - accuracy: 0.1266 - val_loss: 2.6488 - val_accuracy: 0.0857\n","Epoch 26/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.5747 - accuracy: 0.1257 - val_loss: 2.6142 - val_accuracy: 0.1157\n","Epoch 27/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.5713 - accuracy: 0.1159 - val_loss: 2.6478 - val_accuracy: 0.1014\n","Epoch 28/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.5815 - accuracy: 0.1159 - val_loss: 2.6482 - val_accuracy: 0.0814\n","Epoch 29/100\n","44/44 [==============================] - 1s 11ms/step - loss: 2.5783 - accuracy: 0.1204 - val_loss: 2.6371 - val_accuracy: 0.0957\n","Epoch 30/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.5682 - accuracy: 0.1186 - val_loss: 2.6278 - val_accuracy: 0.0929\n","Epoch 31/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.5733 - accuracy: 0.1259 - val_loss: 2.6639 - val_accuracy: 0.0843\n","Epoch 32/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.5986 - accuracy: 0.1125 - val_loss: 2.6542 - val_accuracy: 0.0971\n","Epoch 33/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.5857 - accuracy: 0.1214 - val_loss: 2.6439 - val_accuracy: 0.0957\n","Epoch 34/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.5839 - accuracy: 0.1223 - val_loss: 2.6446 - val_accuracy: 0.0943\n","Epoch 35/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.5819 - accuracy: 0.1218 - val_loss: 2.6421 - val_accuracy: 0.1043\n","Epoch 36/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.5751 - accuracy: 0.1209 - val_loss: 2.6446 - val_accuracy: 0.1000\n","Epoch 37/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.5740 - accuracy: 0.1223 - val_loss: 2.6381 - val_accuracy: 0.0957\n","Epoch 38/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.5732 - accuracy: 0.1223 - val_loss: 2.6266 - val_accuracy: 0.1071\n","Epoch 39/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.5652 - accuracy: 0.1261 - val_loss: 2.6694 - val_accuracy: 0.0843\n","Epoch 40/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.6054 - accuracy: 0.1125 - val_loss: 2.6580 - val_accuracy: 0.1029\n","Epoch 41/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.5908 - accuracy: 0.1141 - val_loss: 2.6658 - val_accuracy: 0.0914\n","Epoch 42/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.5841 - accuracy: 0.1175 - val_loss: 2.6641 - val_accuracy: 0.0971\n","Epoch 43/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.5833 - accuracy: 0.1200 - val_loss: 2.6621 - val_accuracy: 0.0929\n","Epoch 44/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.5813 - accuracy: 0.1211 - val_loss: 2.6557 - val_accuracy: 0.1014\n","Epoch 45/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.5741 - accuracy: 0.1218 - val_loss: 2.6442 - val_accuracy: 0.1171\n","Epoch 46/100\n","44/44 [==============================] - 0s 11ms/step - loss: 2.5617 - accuracy: 0.1246 - val_loss: 2.6458 - val_accuracy: 0.0943\n","Epoch 47/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.5751 - accuracy: 0.1289 - val_loss: 2.6592 - val_accuracy: 0.1029\n","Epoch 48/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.5677 - accuracy: 0.1243 - val_loss: 2.6539 - val_accuracy: 0.0943\n","Epoch 49/100\n","44/44 [==============================] - 0s 10ms/step - loss: 2.5475 - accuracy: 0.1277 - val_loss: 2.6330 - val_accuracy: 0.1214\n","Epoch 50/100\n","44/44 [==============================] - 0s 10ms/step - loss: 555318656.0000 - accuracy: 0.1082 - val_loss: 5.8070 - val_accuracy: 0.0857\n","Epoch 51/100\n","44/44 [==============================] - 0s 10ms/step - loss: 3840055181312.0000 - accuracy: 0.0516 - val_loss: 6101860864.0000 - val_accuracy: 0.0700\n","Epoch 52/100\n","44/44 [==============================] - 0s 10ms/step - loss: 1816950272.0000 - accuracy: 0.0650 - val_loss: 174036608.0000 - val_accuracy: 0.0714\n","Epoch 53/100\n","44/44 [==============================] - 0s 10ms/step - loss: 219301712.0000 - accuracy: 0.0616 - val_loss: 111252120.0000 - val_accuracy: 0.0686\n","Epoch 54/100\n","44/44 [==============================] - 0s 10ms/step - loss: 151791952.0000 - accuracy: 0.0636 - val_loss: 85299448.0000 - val_accuracy: 0.0671\n","Epoch 55/100\n","44/44 [==============================] - 0s 10ms/step - loss: 120583720.0000 - accuracy: 0.0677 - val_loss: 70784696.0000 - val_accuracy: 0.0671\n","Epoch 56/100\n","44/44 [==============================] - 0s 10ms/step - loss: 101764312.0000 - accuracy: 0.0630 - val_loss: 61709968.0000 - val_accuracy: 0.0643\n","Epoch 57/100\n","44/44 [==============================] - 0s 11ms/step - loss: 90116104.0000 - accuracy: 0.0680 - val_loss: 55194548.0000 - val_accuracy: 0.0657\n","Epoch 58/100\n","44/44 [==============================] - 0s 10ms/step - loss: 82751936.0000 - accuracy: 0.0618 - val_loss: 50247324.0000 - val_accuracy: 0.0686\n","Epoch 59/100\n","44/44 [==============================] - 0s 10ms/step - loss: 75634184.0000 - accuracy: 0.0684 - val_loss: 46328316.0000 - val_accuracy: 0.0700\n","Epoch 60/100\n","44/44 [==============================] - 0s 10ms/step - loss: 71039576.0000 - accuracy: 0.0661 - val_loss: 43038388.0000 - val_accuracy: 0.0671\n","Epoch 61/100\n","44/44 [==============================] - 0s 10ms/step - loss: 65292500.0000 - accuracy: 0.0632 - val_loss: 40290428.0000 - val_accuracy: 0.0686\n","Epoch 62/100\n","44/44 [==============================] - 0s 10ms/step - loss: 62151076.0000 - accuracy: 0.0686 - val_loss: 37896784.0000 - val_accuracy: 0.0700\n","Epoch 63/100\n","44/44 [==============================] - 0s 10ms/step - loss: 59148600.0000 - accuracy: 0.0609 - val_loss: 35743312.0000 - val_accuracy: 0.0671\n","Epoch 64/100\n","44/44 [==============================] - 0s 10ms/step - loss: 56696352.0000 - accuracy: 0.0639 - val_loss: 33799836.0000 - val_accuracy: 0.0657\n","Epoch 65/100\n","44/44 [==============================] - 0s 10ms/step - loss: 53147492.0000 - accuracy: 0.0632 - val_loss: 32063648.0000 - val_accuracy: 0.0657\n","Epoch 66/100\n","44/44 [==============================] - 0s 10ms/step - loss: 50636560.0000 - accuracy: 0.0686 - val_loss: 30481018.0000 - val_accuracy: 0.0657\n","Epoch 67/100\n","44/44 [==============================] - 0s 10ms/step - loss: 47425696.0000 - accuracy: 0.0643 - val_loss: 29039312.0000 - val_accuracy: 0.0657\n","Epoch 68/100\n","44/44 [==============================] - 0s 10ms/step - loss: 46337976.0000 - accuracy: 0.0609 - val_loss: 27698650.0000 - val_accuracy: 0.0657\n","Epoch 69/100\n","44/44 [==============================] - 0s 10ms/step - loss: 44087508.0000 - accuracy: 0.0648 - val_loss: 26432014.0000 - val_accuracy: 0.0657\n","Epoch 70/100\n","44/44 [==============================] - 0s 10ms/step - loss: 42565156.0000 - accuracy: 0.0605 - val_loss: 25275000.0000 - val_accuracy: 0.0657\n","Epoch 71/100\n","44/44 [==============================] - 0s 10ms/step - loss: 40268076.0000 - accuracy: 0.0655 - val_loss: 24193992.0000 - val_accuracy: 0.0643\n","Epoch 72/100\n","44/44 [==============================] - 0s 10ms/step - loss: 38792268.0000 - accuracy: 0.0661 - val_loss: 23177684.0000 - val_accuracy: 0.0629\n","Epoch 73/100\n","44/44 [==============================] - 0s 11ms/step - loss: 37159704.0000 - accuracy: 0.0675 - val_loss: 22228240.0000 - val_accuracy: 0.0614\n","Epoch 74/100\n","44/44 [==============================] - 0s 10ms/step - loss: 35974432.0000 - accuracy: 0.0666 - val_loss: 21334528.0000 - val_accuracy: 0.0614\n","Epoch 75/100\n","44/44 [==============================] - 0s 10ms/step - loss: 34507660.0000 - accuracy: 0.0605 - val_loss: 20486382.0000 - val_accuracy: 0.0614\n","Epoch 76/100\n","44/44 [==============================] - 0s 10ms/step - loss: 33393550.0000 - accuracy: 0.0646 - val_loss: 19681932.0000 - val_accuracy: 0.0614\n","Epoch 77/100\n","44/44 [==============================] - 0s 10ms/step - loss: 31740680.0000 - accuracy: 0.0648 - val_loss: 18931034.0000 - val_accuracy: 0.0600\n","Epoch 78/100\n","44/44 [==============================] - 0s 11ms/step - loss: 30708930.0000 - accuracy: 0.0654 - val_loss: 18218972.0000 - val_accuracy: 0.0600\n","Epoch 79/100\n","44/44 [==============================] - 0s 10ms/step - loss: 29650750.0000 - accuracy: 0.0671 - val_loss: 17537528.0000 - val_accuracy: 0.0614\n","Epoch 80/100\n","44/44 [==============================] - 0s 10ms/step - loss: 28149720.0000 - accuracy: 0.0688 - val_loss: 16906384.0000 - val_accuracy: 0.0629\n","Epoch 81/100\n","44/44 [==============================] - 0s 10ms/step - loss: 27830346.0000 - accuracy: 0.0654 - val_loss: 16285755.0000 - val_accuracy: 0.0629\n","Epoch 82/100\n","44/44 [==============================] - 0s 10ms/step - loss: 26595254.0000 - accuracy: 0.0650 - val_loss: 15703546.0000 - val_accuracy: 0.0629\n","Epoch 83/100\n","44/44 [==============================] - 0s 10ms/step - loss: 25471000.0000 - accuracy: 0.0611 - val_loss: 15154259.0000 - val_accuracy: 0.0629\n","Epoch 84/100\n","44/44 [==============================] - 0s 10ms/step - loss: 24447094.0000 - accuracy: 0.0666 - val_loss: 14628825.0000 - val_accuracy: 0.0600\n","Epoch 85/100\n","44/44 [==============================] - 0s 10ms/step - loss: 23921856.0000 - accuracy: 0.0650 - val_loss: 14125615.0000 - val_accuracy: 0.0600\n","Epoch 86/100\n","44/44 [==============================] - 0s 10ms/step - loss: 23094824.0000 - accuracy: 0.0732 - val_loss: 13645662.0000 - val_accuracy: 0.0614\n","Epoch 87/100\n","44/44 [==============================] - 0s 10ms/step - loss: 22243636.0000 - accuracy: 0.0680 - val_loss: 13187762.0000 - val_accuracy: 0.0629\n","Epoch 88/100\n","44/44 [==============================] - 0s 10ms/step - loss: 21521084.0000 - accuracy: 0.0655 - val_loss: 12744915.0000 - val_accuracy: 0.0629\n","Epoch 89/100\n","44/44 [==============================] - 0s 10ms/step - loss: 21049380.0000 - accuracy: 0.0641 - val_loss: 12324304.0000 - val_accuracy: 0.0629\n","Epoch 90/100\n","44/44 [==============================] - 0s 10ms/step - loss: 20350694.0000 - accuracy: 0.0620 - val_loss: 11914929.0000 - val_accuracy: 0.0586\n","Epoch 91/100\n","44/44 [==============================] - 0s 10ms/step - loss: 19579698.0000 - accuracy: 0.0661 - val_loss: 11524278.0000 - val_accuracy: 0.0586\n","Epoch 92/100\n","44/44 [==============================] - 0s 10ms/step - loss: 19059938.0000 - accuracy: 0.0637 - val_loss: 11151689.0000 - val_accuracy: 0.0586\n","Epoch 93/100\n","44/44 [==============================] - 0s 10ms/step - loss: 18626456.0000 - accuracy: 0.0657 - val_loss: 10795199.0000 - val_accuracy: 0.0586\n","Epoch 94/100\n","44/44 [==============================] - 0s 11ms/step - loss: 17666352.0000 - accuracy: 0.0670 - val_loss: 10449505.0000 - val_accuracy: 0.0571\n","Epoch 95/100\n","44/44 [==============================] - 0s 10ms/step - loss: 17285586.0000 - accuracy: 0.0648 - val_loss: 10119518.0000 - val_accuracy: 0.0586\n","Epoch 96/100\n","44/44 [==============================] - 0s 10ms/step - loss: 16736402.0000 - accuracy: 0.0680 - val_loss: 9802113.0000 - val_accuracy: 0.0586\n","Epoch 97/100\n","44/44 [==============================] - 0s 10ms/step - loss: 16028567.0000 - accuracy: 0.0684 - val_loss: 9503169.0000 - val_accuracy: 0.0586\n","Epoch 98/100\n","44/44 [==============================] - 0s 10ms/step - loss: 15740425.0000 - accuracy: 0.0600 - val_loss: 9209438.0000 - val_accuracy: 0.0586\n","Epoch 99/100\n","44/44 [==============================] - 0s 10ms/step - loss: 15283905.0000 - accuracy: 0.0643 - val_loss: 8928295.0000 - val_accuracy: 0.0586\n","Epoch 100/100\n","44/44 [==============================] - 0s 11ms/step - loss: 15136824.0000 - accuracy: 0.0604 - val_loss: 8651415.0000 - val_accuracy: 0.0586\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f0520053048>"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"C-60Y8FPS7Ki"},"source":[""],"execution_count":null,"outputs":[]}]}