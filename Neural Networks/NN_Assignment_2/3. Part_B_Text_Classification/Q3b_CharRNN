{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Q3b_CharRNN","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNmjilT0l2yKYojv2EADH62"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"AIqovbhhLXkd"},"source":["# Mount Drive"]},{"cell_type":"code","metadata":{"id":"MsObL7B7Siou","executionInfo":{"status":"ok","timestamp":1605212619389,"user_tz":-480,"elapsed":60063,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"e0cb8fe6-9083-4837-80c1-4b7232309bee","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"SDYZkw8ELZVo"},"source":["# Install Weights and Biases"]},{"cell_type":"code","metadata":{"id":"NdaTK82wnP1b","executionInfo":{"status":"ok","timestamp":1605212629103,"user_tz":-480,"elapsed":69764,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"20f9c32a-b2f8-4000-ab69-b59711c148cd","colab":{"base_uri":"https://localhost:8080/"}},"source":["!pip install wandb -qqq"],"execution_count":2,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 1.8MB 9.0MB/s \n","\u001b[K     |████████████████████████████████| 133kB 31.3MB/s \n","\u001b[K     |████████████████████████████████| 163kB 28.1MB/s \n","\u001b[K     |████████████████████████████████| 102kB 10.8MB/s \n","\u001b[K     |████████████████████████████████| 102kB 11.6MB/s \n","\u001b[K     |████████████████████████████████| 71kB 10.0MB/s \n","\u001b[?25h  Building wheel for watchdog (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for subprocess32 (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"tyxZoSpoLci_"},"source":["# Run Model"]},{"cell_type":"code","metadata":{"id":"9oGQD0F_dqYS","executionInfo":{"status":"ok","timestamp":1605212629108,"user_tz":-480,"elapsed":69763,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}}},"source":["# Preprocessing Functions\n","def vocabulary(strings):\n","    chars = sorted(list(set(list(''.join(strings)))))\n","    char_to_ix = { ch:i for i,ch in enumerate(chars) }\n","    vocab_size = len(chars)\n","    return vocab_size, char_to_ix\n","\n","def preprocess(strings, char_to_ix, MAX_LENGTH):\n","    data_chars = [list(d.lower()) for _, d in enumerate(strings)]\n","    for i, d in enumerate(data_chars):\n","        if len(d)>MAX_LENGTH:\n","            d = d[:MAX_LENGTH]\n","        elif len(d) < MAX_LENGTH:\n","            d += [' '] * (MAX_LENGTH - len(d))\n","            \n","    data_ids = np.zeros([len(data_chars), MAX_LENGTH], dtype=np.int64)\n","    for i in range(len(data_chars)):\n","        for j in range(MAX_LENGTH):\n","            data_ids[i, j] = char_to_ix[data_chars[i][j]]\n","    return np.array(data_ids)\n","\n","def read_data_chars():\n","    x_train, y_train, x_test, y_test = [], [], [], []\n","    cop = re.compile(\"[^a-z^A-Z^0-9^,^.^' ']\")\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/train_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_train.append(data)\n","            y_train.append(int(row[0]))\n","\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/test_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_test.append(data)\n","            y_test.append(int(row[0]))\n","\n","\n","    vocab_size, char_to_ix = vocabulary(x_train+x_test)\n","    x_train = preprocess(x_train, char_to_ix, 100)\n","    y_train = np.array(y_train)\n","    x_test = preprocess(x_test, char_to_ix, 100)\n","    y_test = np.array(y_test)\n","\n","    x_train = tf.constant(x_train, dtype=tf.int64)\n","    y_train = tf.constant(y_train, dtype=tf.int64)\n","    x_test = tf.constant(x_test, dtype=tf.int64)\n","    y_test = tf.constant(y_test, dtype=tf.int64)\n","\n","    return x_train, y_train, x_test, y_test\n","\n","def OneHot(input_dim=None, input_length=None):\n","    # Check if inputs were supplied correctly\n","    if input_dim is None or input_length is None:\n","        raise TypeError(\"input_dim or input_length is not set\")\n","\n","    # Helper method (not inlined for clarity)\n","    def _one_hot(x, num_classes):\n","        return K.one_hot(K.cast(x, 'uint8'),\n","                          num_classes=num_classes)\n","\n","    # Final layer representation as a Lambda layer\n","    return layers.Lambda(_one_hot,\n","                  arguments={'num_classes': input_dim},\n","                  input_shape=(input_length,))"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ugg05UW4QnW8","outputId":"5d8785e7-0de8-4e4d-bfc7-8419934f7d64","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import wandb\n","from wandb.keras import WandbCallback\n","from keras.preprocessing.text import Tokenizer\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow.keras import Model, layers, models\n","from keras import backend as K\n","import csv\n","import re\n","\n","# Hyperparameters\n","defaults = {\n","    'embedding_size' : 50,\n","    'hidden_size' : 20,\n","    'batch_size' : 128,\n","    'epochs' : 100,\n","    'lr' : 0.01,\n","    'Dropout' : 'Yes'\n","}\n","\n","# Initiate wandb\n","wandb.init(config=defaults, resume=True, name='CharRNN Q3b-SC', project='NNA2 Part B Redo')\n","config = wandb.config\n","\n","# Fix lucky seed!\n","seed = 7\n","tf.random.set_seed(seed)\n","\n","# Train test split\n","x_train, y_train, x_test, y_test = read_data_chars()\n","\n","# Use `tf.data` to batch and shuffle the dataset:\n","train_ds = tf.data.Dataset.from_tensor_slices(\n","    (x_train, y_train)).shuffle(10000).batch(config.batch_size)\n","test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(config.batch_size)\n","\n","# Define model\n","tf.keras.backend.set_floatx('float32')\n","model = models.Sequential()\n","model.add(OneHot(input_dim=256, input_length=100))\n","model.add(layers.RNN(layers.GRUCell(config.hidden_size), unroll=True))\n","model.add(layers.Dropout(0.5))\n","model.add(layers.Dense(15, activation=None))\n","model.summary()\n","\n","# Choose optimizer and loss function\n","opt = tf.keras.optimizers.Adam(learning_rate=config.lr)\n","loss_object = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n","\n","# Compile model\n","model.compile(\n","    optimizer=opt,\n","    loss=loss_object,\n","    metrics=['accuracy'],\n",")\n","\n","# Train model\n","model.fit(\n","    train_ds,\n","    validation_data=test_ds,\n","    epochs=config.epochs,\n","    callbacks=[WandbCallback()],\n","    )"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","        window._wandbApiKey = new Promise((resolve, reject) => {\n","            function loadScript(url) {\n","            return new Promise(function(resolve, reject) {\n","                let newScript = document.createElement(\"script\");\n","                newScript.onerror = reject;\n","                newScript.onload = resolve;\n","                document.body.appendChild(newScript);\n","                newScript.src = url;\n","            });\n","            }\n","            loadScript(\"https://cdn.jsdelivr.net/npm/postmate/build/postmate.min.js\").then(() => {\n","            const iframe = document.createElement('iframe')\n","            iframe.style.cssText = \"width:0;height:0;border:none\"\n","            document.body.appendChild(iframe)\n","            const handshake = new Postmate({\n","                container: iframe,\n","                url: 'https://wandb.ai/authorize'\n","            });\n","            const timeout = setTimeout(() => reject(\"Couldn't auto authenticate\"), 5000)\n","            handshake.then(function(child) {\n","                child.on('authorize', data => {\n","                    clearTimeout(timeout)\n","                    resolve(data)\n","                });\n","            });\n","            })\n","        });\n","    "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n"],"name":"stderr"},{"output_type":"stream","text":["wandb: Paste an API key from your profile and hit enter: ··········\n"],"name":"stdout"},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.10<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">CharRNN Q3b-SC</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo</a><br/>\n","                Run page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/31ot1y7s\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/31ot1y7s</a><br/>\n","                Run data is saved locally in <code>/content/wandb/run-20201112_202445-31ot1y7s</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","lambda (Lambda)              (None, 100, 256)          0         \n","_________________________________________________________________\n","rnn (RNN)                    (None, 20)                16680     \n","_________________________________________________________________\n","dropout (Dropout)            (None, 20)                0         \n","_________________________________________________________________\n","dense (Dense)                (None, 15)                315       \n","=================================================================\n","Total params: 16,995\n","Trainable params: 16,995\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/100\n","44/44 [==============================] - 4s 94ms/step - loss: 2.6685 - accuracy: 0.0852 - val_loss: 2.6254 - val_accuracy: 0.0971\n","Epoch 2/100\n","44/44 [==============================] - 2s 44ms/step - loss: 2.6267 - accuracy: 0.0964 - val_loss: 2.6090 - val_accuracy: 0.1043\n","Epoch 3/100\n","44/44 [==============================] - 2s 44ms/step - loss: 2.5881 - accuracy: 0.1163 - val_loss: 2.4924 - val_accuracy: 0.1529\n","Epoch 4/100\n","44/44 [==============================] - 2s 44ms/step - loss: 2.3914 - accuracy: 0.1580 - val_loss: 2.2721 - val_accuracy: 0.2071\n","Epoch 5/100\n","44/44 [==============================] - 2s 44ms/step - loss: 2.1926 - accuracy: 0.2075 - val_loss: 2.0771 - val_accuracy: 0.2829\n","Epoch 6/100\n","44/44 [==============================] - 2s 44ms/step - loss: 2.0085 - accuracy: 0.2839 - val_loss: 1.9375 - val_accuracy: 0.3343\n","Epoch 7/100\n","44/44 [==============================] - 2s 44ms/step - loss: 1.8464 - accuracy: 0.3448 - val_loss: 1.7384 - val_accuracy: 0.3943\n","Epoch 8/100\n","44/44 [==============================] - 2s 44ms/step - loss: 1.6963 - accuracy: 0.3834 - val_loss: 1.6179 - val_accuracy: 0.4257\n","Epoch 9/100\n","44/44 [==============================] - 2s 44ms/step - loss: 1.5991 - accuracy: 0.4164 - val_loss: 1.5775 - val_accuracy: 0.4471\n","Epoch 10/100\n","44/44 [==============================] - 2s 44ms/step - loss: 1.5227 - accuracy: 0.4546 - val_loss: 1.4334 - val_accuracy: 0.4886\n","Epoch 11/100\n","44/44 [==============================] - 2s 44ms/step - loss: 1.4147 - accuracy: 0.4955 - val_loss: 1.3884 - val_accuracy: 0.5243\n","Epoch 12/100\n","44/44 [==============================] - 2s 44ms/step - loss: 1.3539 - accuracy: 0.5073 - val_loss: 1.3255 - val_accuracy: 0.5414\n","Epoch 13/100\n","44/44 [==============================] - 2s 44ms/step - loss: 1.2986 - accuracy: 0.5314 - val_loss: 1.2900 - val_accuracy: 0.5600\n","Epoch 14/100\n","44/44 [==============================] - 2s 44ms/step - loss: 1.2869 - accuracy: 0.5382 - val_loss: 1.2155 - val_accuracy: 0.5986\n","Epoch 15/100\n","44/44 [==============================] - 2s 44ms/step - loss: 1.2016 - accuracy: 0.5634 - val_loss: 1.1863 - val_accuracy: 0.5900\n","Epoch 16/100\n","44/44 [==============================] - 2s 44ms/step - loss: 1.1840 - accuracy: 0.5671 - val_loss: 1.1929 - val_accuracy: 0.6171\n","Epoch 17/100\n","44/44 [==============================] - 2s 43ms/step - loss: 1.1551 - accuracy: 0.5866 - val_loss: 1.1587 - val_accuracy: 0.6229\n","Epoch 18/100\n","44/44 [==============================] - 2s 44ms/step - loss: 1.1216 - accuracy: 0.5964 - val_loss: 1.1402 - val_accuracy: 0.6200\n","Epoch 19/100\n","44/44 [==============================] - 2s 44ms/step - loss: 1.0957 - accuracy: 0.6105 - val_loss: 1.1215 - val_accuracy: 0.6371\n","Epoch 20/100\n","44/44 [==============================] - 2s 45ms/step - loss: 1.0849 - accuracy: 0.6079 - val_loss: 1.1197 - val_accuracy: 0.6400\n","Epoch 21/100\n","44/44 [==============================] - 2s 44ms/step - loss: 1.0611 - accuracy: 0.6196 - val_loss: 1.0900 - val_accuracy: 0.6471\n","Epoch 22/100\n","44/44 [==============================] - 2s 44ms/step - loss: 1.0467 - accuracy: 0.6316 - val_loss: 1.1033 - val_accuracy: 0.6529\n","Epoch 23/100\n","44/44 [==============================] - 2s 44ms/step - loss: 1.0102 - accuracy: 0.6379 - val_loss: 1.0901 - val_accuracy: 0.6457\n","Epoch 24/100\n","44/44 [==============================] - 2s 43ms/step - loss: 0.9986 - accuracy: 0.6443 - val_loss: 1.1094 - val_accuracy: 0.6586\n","Epoch 25/100\n","44/44 [==============================] - 2s 44ms/step - loss: 1.0312 - accuracy: 0.6405 - val_loss: 1.0664 - val_accuracy: 0.6786\n","Epoch 26/100\n","44/44 [==============================] - 2s 44ms/step - loss: 0.9874 - accuracy: 0.6495 - val_loss: 1.1140 - val_accuracy: 0.6657\n","Epoch 27/100\n","44/44 [==============================] - 2s 44ms/step - loss: 0.9489 - accuracy: 0.6709 - val_loss: 1.0442 - val_accuracy: 0.6700\n","Epoch 28/100\n","44/44 [==============================] - 2s 44ms/step - loss: 0.9724 - accuracy: 0.6536 - val_loss: 1.0590 - val_accuracy: 0.6586\n","Epoch 29/100\n","44/44 [==============================] - 2s 43ms/step - loss: 0.9302 - accuracy: 0.6716 - val_loss: 1.0558 - val_accuracy: 0.6743\n","Epoch 30/100\n","44/44 [==============================] - 2s 43ms/step - loss: 0.8948 - accuracy: 0.6839 - val_loss: 1.0825 - val_accuracy: 0.6671\n","Epoch 31/100\n","44/44 [==============================] - 2s 44ms/step - loss: 0.8995 - accuracy: 0.6779 - val_loss: 1.0895 - val_accuracy: 0.6871\n","Epoch 32/100\n","44/44 [==============================] - 2s 44ms/step - loss: 0.8945 - accuracy: 0.6843 - val_loss: 1.0828 - val_accuracy: 0.6500\n","Epoch 33/100\n","44/44 [==============================] - 2s 44ms/step - loss: 0.9099 - accuracy: 0.6795 - val_loss: 1.0876 - val_accuracy: 0.6557\n","Epoch 34/100\n","44/44 [==============================] - 2s 44ms/step - loss: 0.8747 - accuracy: 0.6862 - val_loss: 1.1188 - val_accuracy: 0.6814\n","Epoch 35/100\n","44/44 [==============================] - 2s 43ms/step - loss: 0.8629 - accuracy: 0.6973 - val_loss: 1.1395 - val_accuracy: 0.6686\n","Epoch 36/100\n","44/44 [==============================] - 2s 44ms/step - loss: 0.8567 - accuracy: 0.7034 - val_loss: 1.1333 - val_accuracy: 0.6657\n","Epoch 37/100\n","44/44 [==============================] - 2s 44ms/step - loss: 0.9901 - accuracy: 0.6557 - val_loss: 1.0923 - val_accuracy: 0.6657\n","Epoch 38/100\n","44/44 [==============================] - 2s 43ms/step - loss: 0.8861 - accuracy: 0.6888 - val_loss: 1.1292 - val_accuracy: 0.6757\n","Epoch 39/100\n","44/44 [==============================] - 2s 44ms/step - loss: 0.8944 - accuracy: 0.6900 - val_loss: 1.0818 - val_accuracy: 0.6643\n","Epoch 40/100\n","44/44 [==============================] - 2s 45ms/step - loss: 0.8560 - accuracy: 0.7011 - val_loss: 1.0383 - val_accuracy: 0.6843\n","Epoch 41/100\n","44/44 [==============================] - 2s 44ms/step - loss: 0.8472 - accuracy: 0.6995 - val_loss: 1.0646 - val_accuracy: 0.6914\n","Epoch 42/100\n","44/44 [==============================] - 2s 43ms/step - loss: 0.8188 - accuracy: 0.7155 - val_loss: 1.1822 - val_accuracy: 0.6757\n","Epoch 43/100\n","44/44 [==============================] - 2s 43ms/step - loss: 0.8415 - accuracy: 0.7093 - val_loss: 1.1005 - val_accuracy: 0.6757\n","Epoch 44/100\n","44/44 [==============================] - 2s 44ms/step - loss: 0.7931 - accuracy: 0.7170 - val_loss: 1.1577 - val_accuracy: 0.6871\n","Epoch 45/100\n","44/44 [==============================] - 2s 43ms/step - loss: 0.8707 - accuracy: 0.7007 - val_loss: 1.0855 - val_accuracy: 0.6771\n","Epoch 46/100\n","44/44 [==============================] - 2s 43ms/step - loss: 0.8221 - accuracy: 0.7114 - val_loss: 1.1003 - val_accuracy: 0.6914\n","Epoch 47/100\n","44/44 [==============================] - 2s 45ms/step - loss: 0.7886 - accuracy: 0.7214 - val_loss: 1.0879 - val_accuracy: 0.6900\n","Epoch 48/100\n","44/44 [==============================] - 2s 43ms/step - loss: 0.8331 - accuracy: 0.7175 - val_loss: 1.0624 - val_accuracy: 0.6857\n","Epoch 49/100\n","44/44 [==============================] - 2s 44ms/step - loss: 0.8507 - accuracy: 0.7061 - val_loss: 1.3152 - val_accuracy: 0.6157\n","Epoch 50/100\n","44/44 [==============================] - 2s 44ms/step - loss: 0.9689 - accuracy: 0.6614 - val_loss: 1.0698 - val_accuracy: 0.6786\n","Epoch 51/100\n","44/44 [==============================] - 2s 44ms/step - loss: 0.8311 - accuracy: 0.7104 - val_loss: 1.0606 - val_accuracy: 0.6957\n","Epoch 52/100\n","44/44 [==============================] - 2s 45ms/step - loss: 0.8021 - accuracy: 0.7171 - val_loss: 1.0500 - val_accuracy: 0.6829\n","Epoch 53/100\n","44/44 [==============================] - 2s 43ms/step - loss: 0.7888 - accuracy: 0.7196 - val_loss: 1.1871 - val_accuracy: 0.6857\n","Epoch 54/100\n","44/44 [==============================] - 2s 44ms/step - loss: 0.8357 - accuracy: 0.7139 - val_loss: 1.2000 - val_accuracy: 0.6543\n","Epoch 55/100\n","44/44 [==============================] - 2s 43ms/step - loss: 0.8301 - accuracy: 0.7086 - val_loss: 1.0846 - val_accuracy: 0.7000\n","Epoch 56/100\n","44/44 [==============================] - 2s 44ms/step - loss: 0.7738 - accuracy: 0.7323 - val_loss: 1.1030 - val_accuracy: 0.6743\n","Epoch 57/100\n","44/44 [==============================] - 2s 44ms/step - loss: 0.7590 - accuracy: 0.7362 - val_loss: 1.1167 - val_accuracy: 0.6843\n","Epoch 58/100\n","41/44 [==========================>...] - ETA: 0s - loss: 0.7319 - accuracy: 0.7424"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"C-60Y8FPS7Ki"},"source":[""],"execution_count":null,"outputs":[]}]}