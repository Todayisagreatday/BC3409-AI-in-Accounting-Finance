{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"WordRNN_Q6aii","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPCtj4qxJVlCrWfUbRH/EZ+"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"KrXJnhuDLKz0"},"source":["# Mount Drive"]},{"cell_type":"code","metadata":{"id":"-M48O3QXt0dc","executionInfo":{"status":"ok","timestamp":1604859372733,"user_tz":-480,"elapsed":33812,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"543f9f22-600b-4662-d2f7-27ce9d412b67","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9oW0LFHbLOXL"},"source":["# Install Libraries"]},{"cell_type":"code","metadata":{"id":"Z2gdCDhmybWe","executionInfo":{"status":"ok","timestamp":1604859381534,"user_tz":-480,"elapsed":27146,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"db2e96fc-35cd-4903-e0b4-401712ebefca","colab":{"base_uri":"https://localhost:8080/"}},"source":["!pip install wandb -qqq"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 1.8MB 7.1MB/s \n","\u001b[K     |████████████████████████████████| 163kB 53.2MB/s \n","\u001b[K     |████████████████████████████████| 102kB 12.2MB/s \n","\u001b[K     |████████████████████████████████| 102kB 13.7MB/s \n","\u001b[K     |████████████████████████████████| 133kB 50.0MB/s \n","\u001b[K     |████████████████████████████████| 71kB 11.3MB/s \n","\u001b[?25h  Building wheel for subprocess32 (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for watchdog (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"aUnW2mpR502Y","executionInfo":{"status":"ok","timestamp":1604859382904,"user_tz":-480,"elapsed":28110,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"b22593a8-f313-40d9-e2fe-ae74e7048778","colab":{"base_uri":"https://localhost:8080/"}},"source":["import nltk\n","nltk.download('punkt')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"Y9IchZyELQY6"},"source":["# Run Model"]},{"cell_type":"code","metadata":{"id":"YV-vgOrwzbhT"},"source":["# Preprocessing Functions\n","def clean_str(text):\n","    text = re.sub(r\"[^A-Za-z0-9(),!?\\'\\`\\\"]\", \" \", text)\n","    text = re.sub(r\"\\s{2,}\", \" \", text)\n","    text = text.strip().lower()\n","\n","    return text\n","\n","\n","def build_word_dict(contents):\n","    words = list()\n","    for content in contents:\n","        for word in word_tokenize(clean_str(content)):\n","            words.append(word)\n","\n","    word_counter = collections.Counter(words).most_common()\n","    word_dict = dict()\n","    word_dict[\"<pad>\"] = 0\n","    word_dict[\"<unk>\"] = 1\n","    word_dict[\"<eos>\"] = 2\n","    for word, _ in word_counter:\n","        word_dict[word] = len(word_dict)\n","    return word_dict\n","\n","\n","def preprocess(contents, word_dict, document_max_len):\n","    x = list(map(lambda d: word_tokenize(clean_str(d)), contents))\n","    x = list(map(lambda d: list(map(lambda w: word_dict.get(w, word_dict[\"<unk>\"]), d)), x))\n","    x = list(map(lambda d: d + [word_dict[\"<eos>\"]], x))\n","    x = list(map(lambda d: d[:document_max_len], x))\n","    x = list(map(lambda d: d + (document_max_len - len(d)) * [word_dict[\"<pad>\"]], x))\n","    return x\n","\n","\n","def read_data_words():\n","    x_train, y_train, x_test, y_test = [], [], [], []\n","    cop = re.compile(\"[^a-z^A-Z^0-9^,^.^' ']\")\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/train_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_train.append(data)\n","            y_train.append(int(row[0]))\n","\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/test_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_test.append(data)\n","            y_test.append(int(row[0]))\n","\n","    word_dict = build_word_dict(x_train+x_test)\n","    x_train = preprocess(x_train, word_dict, 100)\n","    y_train = np.array(y_train)\n","    x_test = preprocess(x_test, word_dict, 100)\n","    y_test = np.array(y_test)\n","\n","    x_train = [x[:100] for x in x_train]\n","    x_test = [x[:100] for x in x_test]\n","    x_train = tf.constant(x_train, dtype=tf.int64)\n","    y_train = tf.constant(y_train, dtype=tf.int64)\n","    x_test = tf.constant(x_test, dtype=tf.int64)\n","    y_test = tf.constant(y_test, dtype=tf.int64)\n","\n","    vocab_size = tf.get_static_value(tf.reduce_max(x_train))\n","    vocab_size = max(vocab_size, tf.get_static_value(tf.reduce_max(x_test))) + 1\n","    return x_train, y_train, x_test, y_test, vocab_size"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CnWPz07jyrXz","executionInfo":{"status":"ok","timestamp":1604859703902,"user_tz":-480,"elapsed":307775,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"a4249562-feba-4efd-99ab-5971028a047e","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import wandb\n","from wandb.keras import WandbCallback\n","import collections\n","import numpy as np\n","import tensorflow as tf\n","from nltk.tokenize import word_tokenize\n","from tensorflow.keras import Model, layers, models\n","import csv\n","import re\n","\n","# Hyperparameters\n","defaults = {\n","    'embedding_size' : 50,\n","    'hidden_size' : 20,\n","    'batch_size' : 128,\n","    'epochs' : 100,\n","    'lr' : 0.01,\n","    'Dropout' : 'Yes'\n","}\n","\n","# Initiate wandb\n","wandb.init(config=defaults, resume=True, name='WordRNN Q6aii', project='NNA2 Part B Redo')\n","config = wandb.config\n","\n","# Fix lucky seed!\n","seed = 7\n","tf.random.set_seed(seed)\n","\n","# Train test split\n","x_train, y_train, x_test, y_test, vocab_size = read_data_words()\n","\n","# Use `tf.data` to batch and shuffle the dataset:\n","train_ds = tf.data.Dataset.from_tensor_slices(\n","    (x_train, y_train)).shuffle(10000).batch(config.batch_size)\n","test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(config.batch_size)\n","\n","# Define model\n","tf.keras.backend.set_floatx('float32')\n","model = models.Sequential()\n","model.add(layers.Embedding(vocab_size, config.embedding_size, input_length=100))\n","model.add(layers.Dropout(0.5))\n","model.add(layers.RNN(layers.LSTMCell(config.hidden_size), unroll=True))\n","model.add(layers.Dense(15, activation=None))\n","model.summary()\n","\n","# Choose optimizer and loss function\n","opt = tf.keras.optimizers.Adam(learning_rate=config.lr)\n","loss_object = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n","\n","# Compile model\n","model.compile(\n","    optimizer=opt,\n","    loss=loss_object,\n","    metrics=['accuracy'],\n",")\n","\n","# Train model\n","model.fit(\n","    train_ds,\n","    validation_data=test_ds,\n","    epochs=config.epochs,\n","    callbacks=[WandbCallback()],\n","    )"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","        window._wandbApiKey = new Promise((resolve, reject) => {\n","            function loadScript(url) {\n","            return new Promise(function(resolve, reject) {\n","                let newScript = document.createElement(\"script\");\n","                newScript.onerror = reject;\n","                newScript.onload = resolve;\n","                document.body.appendChild(newScript);\n","                newScript.src = url;\n","            });\n","            }\n","            loadScript(\"https://cdn.jsdelivr.net/npm/postmate/build/postmate.min.js\").then(() => {\n","            const iframe = document.createElement('iframe')\n","            iframe.style.cssText = \"width:0;height:0;border:none\"\n","            document.body.appendChild(iframe)\n","            const handshake = new Postmate({\n","                container: iframe,\n","                url: 'https://wandb.ai/authorize'\n","            });\n","            const timeout = setTimeout(() => reject(\"Couldn't auto authenticate\"), 5000)\n","            handshake.then(function(child) {\n","                child.on('authorize', data => {\n","                    clearTimeout(timeout)\n","                    resolve(data)\n","                });\n","            });\n","            })\n","        });\n","    "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n"],"name":"stderr"},{"output_type":"stream","text":["wandb: Paste an API key from your profile and hit enter: ··········\n"],"name":"stdout"},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.9<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">WordRNN Q6aii</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo</a><br/>\n","                Run page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/e297py8e\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/e297py8e</a><br/>\n","                Run data is saved locally in <code>wandb/run-20201108_181734-e297py8e</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding (Embedding)        (None, 100, 50)           1764350   \n","_________________________________________________________________\n","dropout (Dropout)            (None, 100, 50)           0         \n","_________________________________________________________________\n","rnn (RNN)                    (None, 20)                5680      \n","_________________________________________________________________\n","dense (Dense)                (None, 15)                315       \n","=================================================================\n","Total params: 1,770,345\n","Trainable params: 1,770,345\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/100\n","44/44 [==============================] - 4s 90ms/step - loss: 2.6641 - accuracy: 0.0696 - val_loss: 2.6486 - val_accuracy: 0.0714\n","Epoch 2/100\n","44/44 [==============================] - 2s 54ms/step - loss: 2.6495 - accuracy: 0.0661 - val_loss: 2.6441 - val_accuracy: 0.0714\n","Epoch 3/100\n","44/44 [==============================] - 2s 53ms/step - loss: 2.6459 - accuracy: 0.0680 - val_loss: 2.6447 - val_accuracy: 0.0714\n","Epoch 4/100\n","44/44 [==============================] - 2s 53ms/step - loss: 2.6456 - accuracy: 0.0702 - val_loss: 2.6414 - val_accuracy: 0.0714\n","Epoch 5/100\n","44/44 [==============================] - 2s 52ms/step - loss: 2.6438 - accuracy: 0.0734 - val_loss: 2.6426 - val_accuracy: 0.0714\n","Epoch 6/100\n","44/44 [==============================] - 2s 50ms/step - loss: 2.6429 - accuracy: 0.0673 - val_loss: 2.6445 - val_accuracy: 0.0714\n","Epoch 7/100\n","44/44 [==============================] - 2s 49ms/step - loss: 2.6421 - accuracy: 0.0704 - val_loss: 2.6421 - val_accuracy: 0.0729\n","Epoch 8/100\n","44/44 [==============================] - 2s 50ms/step - loss: 2.6386 - accuracy: 0.0741 - val_loss: 2.6428 - val_accuracy: 0.0729\n","Epoch 9/100\n","44/44 [==============================] - 2s 51ms/step - loss: 2.6097 - accuracy: 0.0829 - val_loss: 2.4138 - val_accuracy: 0.1486\n","Epoch 10/100\n","44/44 [==============================] - 2s 54ms/step - loss: 2.3813 - accuracy: 0.1389 - val_loss: 2.2032 - val_accuracy: 0.1957\n","Epoch 11/100\n","44/44 [==============================] - 2s 53ms/step - loss: 2.0947 - accuracy: 0.1855 - val_loss: 1.8481 - val_accuracy: 0.2129\n","Epoch 12/100\n","44/44 [==============================] - 2s 54ms/step - loss: 1.7184 - accuracy: 0.2673 - val_loss: 1.6692 - val_accuracy: 0.3286\n","Epoch 13/100\n","44/44 [==============================] - 2s 54ms/step - loss: 1.4734 - accuracy: 0.3621 - val_loss: 1.5229 - val_accuracy: 0.3529\n","Epoch 14/100\n","44/44 [==============================] - 2s 55ms/step - loss: 1.2459 - accuracy: 0.4238 - val_loss: 1.3674 - val_accuracy: 0.3971\n","Epoch 15/100\n","44/44 [==============================] - 2s 52ms/step - loss: 1.0824 - accuracy: 0.4936 - val_loss: 1.3532 - val_accuracy: 0.4271\n","Epoch 16/100\n","44/44 [==============================] - 2s 54ms/step - loss: 0.9027 - accuracy: 0.5893 - val_loss: 1.0917 - val_accuracy: 0.5457\n","Epoch 17/100\n","44/44 [==============================] - 2s 53ms/step - loss: 0.6944 - accuracy: 0.6896 - val_loss: 0.9851 - val_accuracy: 0.5743\n","Epoch 18/100\n","44/44 [==============================] - 2s 52ms/step - loss: 0.5715 - accuracy: 0.7630 - val_loss: 1.0057 - val_accuracy: 0.6186\n","Epoch 19/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.4819 - accuracy: 0.8079 - val_loss: 1.0749 - val_accuracy: 0.6386\n","Epoch 20/100\n","44/44 [==============================] - 2s 50ms/step - loss: 0.3912 - accuracy: 0.8495 - val_loss: 0.9242 - val_accuracy: 0.7143\n","Epoch 21/100\n","44/44 [==============================] - 2s 52ms/step - loss: 0.2691 - accuracy: 0.9020 - val_loss: 0.8182 - val_accuracy: 0.7557\n","Epoch 22/100\n","44/44 [==============================] - 2s 53ms/step - loss: 0.1966 - accuracy: 0.9336 - val_loss: 0.7964 - val_accuracy: 0.7871\n","Epoch 23/100\n","44/44 [==============================] - 2s 54ms/step - loss: 0.1449 - accuracy: 0.9568 - val_loss: 0.7920 - val_accuracy: 0.8086\n","Epoch 24/100\n","44/44 [==============================] - 2s 52ms/step - loss: 0.0951 - accuracy: 0.9755 - val_loss: 0.7320 - val_accuracy: 0.8257\n","Epoch 25/100\n","44/44 [==============================] - 2s 52ms/step - loss: 0.0685 - accuracy: 0.9836 - val_loss: 0.7366 - val_accuracy: 0.8257\n","Epoch 26/100\n","44/44 [==============================] - 2s 50ms/step - loss: 0.0462 - accuracy: 0.9898 - val_loss: 0.7278 - val_accuracy: 0.8286\n","Epoch 27/100\n","44/44 [==============================] - 2s 51ms/step - loss: 0.0492 - accuracy: 0.9880 - val_loss: 0.7404 - val_accuracy: 0.8414\n","Epoch 28/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0314 - accuracy: 0.9929 - val_loss: 0.7511 - val_accuracy: 0.8386\n","Epoch 29/100\n","44/44 [==============================] - 2s 49ms/step - loss: 0.0294 - accuracy: 0.9945 - val_loss: 0.7357 - val_accuracy: 0.8514\n","Epoch 30/100\n","44/44 [==============================] - 2s 49ms/step - loss: 0.0252 - accuracy: 0.9952 - val_loss: 0.8252 - val_accuracy: 0.8329\n","Epoch 31/100\n","44/44 [==============================] - 2s 49ms/step - loss: 0.0214 - accuracy: 0.9954 - val_loss: 0.8041 - val_accuracy: 0.8343\n","Epoch 32/100\n","44/44 [==============================] - 2s 49ms/step - loss: 0.0315 - accuracy: 0.9939 - val_loss: 0.7645 - val_accuracy: 0.8357\n","Epoch 33/100\n","44/44 [==============================] - 2s 49ms/step - loss: 0.0173 - accuracy: 0.9966 - val_loss: 0.7874 - val_accuracy: 0.8471\n","Epoch 34/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0156 - accuracy: 0.9964 - val_loss: 0.8250 - val_accuracy: 0.8429\n","Epoch 35/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0198 - accuracy: 0.9955 - val_loss: 0.7855 - val_accuracy: 0.8414\n","Epoch 36/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0190 - accuracy: 0.9955 - val_loss: 0.8045 - val_accuracy: 0.8400\n","Epoch 37/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0154 - accuracy: 0.9957 - val_loss: 0.7999 - val_accuracy: 0.8343\n","Epoch 38/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0148 - accuracy: 0.9970 - val_loss: 0.8265 - val_accuracy: 0.8400\n","Epoch 39/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0182 - accuracy: 0.9955 - val_loss: 0.7958 - val_accuracy: 0.8343\n","Epoch 40/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0159 - accuracy: 0.9961 - val_loss: 0.8334 - val_accuracy: 0.8429\n","Epoch 41/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0160 - accuracy: 0.9964 - val_loss: 0.8316 - val_accuracy: 0.8471\n","Epoch 42/100\n","44/44 [==============================] - 2s 49ms/step - loss: 0.0103 - accuracy: 0.9977 - val_loss: 0.8381 - val_accuracy: 0.8471\n","Epoch 43/100\n","44/44 [==============================] - 2s 51ms/step - loss: 0.0075 - accuracy: 0.9982 - val_loss: 0.9063 - val_accuracy: 0.8429\n","Epoch 44/100\n","44/44 [==============================] - 2s 50ms/step - loss: 0.0102 - accuracy: 0.9975 - val_loss: 0.8398 - val_accuracy: 0.8543\n","Epoch 45/100\n","44/44 [==============================] - 2s 49ms/step - loss: 0.0145 - accuracy: 0.9964 - val_loss: 0.8930 - val_accuracy: 0.8429\n","Epoch 46/100\n","44/44 [==============================] - 2s 49ms/step - loss: 0.0105 - accuracy: 0.9977 - val_loss: 0.8692 - val_accuracy: 0.8429\n","Epoch 47/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0096 - accuracy: 0.9980 - val_loss: 0.8830 - val_accuracy: 0.8486\n","Epoch 48/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0106 - accuracy: 0.9975 - val_loss: 0.8828 - val_accuracy: 0.8486\n","Epoch 49/100\n","44/44 [==============================] - 2s 47ms/step - loss: 0.0088 - accuracy: 0.9979 - val_loss: 0.8255 - val_accuracy: 0.8571\n","Epoch 50/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0140 - accuracy: 0.9966 - val_loss: 0.9375 - val_accuracy: 0.8314\n","Epoch 51/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0111 - accuracy: 0.9966 - val_loss: 0.8132 - val_accuracy: 0.8357\n","Epoch 52/100\n","44/44 [==============================] - 2s 51ms/step - loss: 0.0133 - accuracy: 0.9966 - val_loss: 0.8085 - val_accuracy: 0.8514\n","Epoch 53/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0164 - accuracy: 0.9955 - val_loss: 0.7447 - val_accuracy: 0.8500\n","Epoch 54/100\n","44/44 [==============================] - 2s 49ms/step - loss: 0.0137 - accuracy: 0.9964 - val_loss: 0.7494 - val_accuracy: 0.8586\n","Epoch 55/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0090 - accuracy: 0.9980 - val_loss: 0.7820 - val_accuracy: 0.8571\n","Epoch 56/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0095 - accuracy: 0.9973 - val_loss: 0.8016 - val_accuracy: 0.8586\n","Epoch 57/100\n","44/44 [==============================] - 2s 47ms/step - loss: 0.0099 - accuracy: 0.9982 - val_loss: 0.7905 - val_accuracy: 0.8543\n","Epoch 58/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0135 - accuracy: 0.9957 - val_loss: 0.8030 - val_accuracy: 0.8543\n","Epoch 59/100\n","44/44 [==============================] - 2s 47ms/step - loss: 0.0158 - accuracy: 0.9957 - val_loss: 0.8568 - val_accuracy: 0.8457\n","Epoch 60/100\n","44/44 [==============================] - 2s 47ms/step - loss: 0.0156 - accuracy: 0.9962 - val_loss: 0.8241 - val_accuracy: 0.8529\n","Epoch 61/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0043 - accuracy: 0.9989 - val_loss: 0.8288 - val_accuracy: 0.8557\n","Epoch 62/100\n","44/44 [==============================] - 2s 47ms/step - loss: 0.0076 - accuracy: 0.9979 - val_loss: 0.8082 - val_accuracy: 0.8600\n","Epoch 63/100\n","44/44 [==============================] - 2s 49ms/step - loss: 0.0096 - accuracy: 0.9971 - val_loss: 0.7427 - val_accuracy: 0.8700\n","Epoch 64/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0087 - accuracy: 0.9982 - val_loss: 0.7784 - val_accuracy: 0.8586\n","Epoch 65/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0082 - accuracy: 0.9980 - val_loss: 0.8061 - val_accuracy: 0.8671\n","Epoch 66/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0099 - accuracy: 0.9979 - val_loss: 0.8065 - val_accuracy: 0.8614\n","Epoch 67/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0085 - accuracy: 0.9975 - val_loss: 0.8558 - val_accuracy: 0.8514\n","Epoch 68/100\n","44/44 [==============================] - 2s 49ms/step - loss: 0.0077 - accuracy: 0.9979 - val_loss: 0.8471 - val_accuracy: 0.8543\n","Epoch 69/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0113 - accuracy: 0.9966 - val_loss: 0.8432 - val_accuracy: 0.8486\n","Epoch 70/100\n","44/44 [==============================] - 2s 48ms/step - loss: 0.0167 - accuracy: 0.9961 - val_loss: 0.8632 - val_accuracy: 0.8471\n","Epoch 71/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0102 - accuracy: 0.9975 - val_loss: 0.8105 - val_accuracy: 0.8529\n","Epoch 72/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0067 - accuracy: 0.9984 - val_loss: 0.7946 - val_accuracy: 0.8557\n","Epoch 73/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0086 - accuracy: 0.9982 - val_loss: 0.8191 - val_accuracy: 0.8571\n","Epoch 74/100\n","44/44 [==============================] - 2s 47ms/step - loss: 0.0068 - accuracy: 0.9977 - val_loss: 0.8254 - val_accuracy: 0.8529\n","Epoch 75/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0062 - accuracy: 0.9979 - val_loss: 0.8999 - val_accuracy: 0.8386\n","Epoch 76/100\n","44/44 [==============================] - 2s 47ms/step - loss: 0.0060 - accuracy: 0.9989 - val_loss: 0.8505 - val_accuracy: 0.8500\n","Epoch 77/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0057 - accuracy: 0.9989 - val_loss: 0.8671 - val_accuracy: 0.8614\n","Epoch 78/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0061 - accuracy: 0.9987 - val_loss: 0.9310 - val_accuracy: 0.8429\n","Epoch 79/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0048 - accuracy: 0.9989 - val_loss: 0.8657 - val_accuracy: 0.8571\n","Epoch 80/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0042 - accuracy: 0.9991 - val_loss: 0.9147 - val_accuracy: 0.8514\n","Epoch 81/100\n","44/44 [==============================] - 2s 47ms/step - loss: 0.0032 - accuracy: 0.9995 - val_loss: 0.9132 - val_accuracy: 0.8500\n","Epoch 82/100\n","44/44 [==============================] - 2s 47ms/step - loss: 0.0108 - accuracy: 0.9975 - val_loss: 0.9194 - val_accuracy: 0.8514\n","Epoch 83/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0088 - accuracy: 0.9982 - val_loss: 0.8702 - val_accuracy: 0.8586\n","Epoch 84/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0061 - accuracy: 0.9980 - val_loss: 0.8606 - val_accuracy: 0.8614\n","Epoch 85/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0065 - accuracy: 0.9980 - val_loss: 0.9496 - val_accuracy: 0.8457\n","Epoch 86/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0074 - accuracy: 0.9982 - val_loss: 0.8376 - val_accuracy: 0.8586\n","Epoch 87/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0053 - accuracy: 0.9987 - val_loss: 0.8571 - val_accuracy: 0.8557\n","Epoch 88/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0029 - accuracy: 0.9993 - val_loss: 0.8991 - val_accuracy: 0.8557\n","Epoch 89/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0031 - accuracy: 0.9995 - val_loss: 0.8900 - val_accuracy: 0.8529\n","Epoch 90/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0029 - accuracy: 0.9989 - val_loss: 0.8746 - val_accuracy: 0.8614\n","Epoch 91/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0052 - accuracy: 0.9986 - val_loss: 0.8478 - val_accuracy: 0.8629\n","Epoch 92/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0040 - accuracy: 0.9991 - val_loss: 0.9000 - val_accuracy: 0.8600\n","Epoch 93/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0051 - accuracy: 0.9991 - val_loss: 0.9471 - val_accuracy: 0.8500\n","Epoch 94/100\n","44/44 [==============================] - 2s 47ms/step - loss: 0.0090 - accuracy: 0.9982 - val_loss: 0.9176 - val_accuracy: 0.8486\n","Epoch 95/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0093 - accuracy: 0.9970 - val_loss: 0.8650 - val_accuracy: 0.8643\n","Epoch 96/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0064 - accuracy: 0.9979 - val_loss: 0.8243 - val_accuracy: 0.8700\n","Epoch 97/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0069 - accuracy: 0.9979 - val_loss: 0.8161 - val_accuracy: 0.8571\n","Epoch 98/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0069 - accuracy: 0.9982 - val_loss: 0.8922 - val_accuracy: 0.8543\n","Epoch 99/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0069 - accuracy: 0.9982 - val_loss: 0.8805 - val_accuracy: 0.8571\n","Epoch 100/100\n","44/44 [==============================] - 2s 46ms/step - loss: 0.0039 - accuracy: 0.9993 - val_loss: 0.9120 - val_accuracy: 0.8571\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f2c39953198>"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"10s9udsJChxm"},"source":[""],"execution_count":null,"outputs":[]}]}