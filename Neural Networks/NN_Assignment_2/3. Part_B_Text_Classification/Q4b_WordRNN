{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Q4b_WordRNN","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOewTfPiVYCcrPmETzb0Foy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"mnntH9ltL5cZ"},"source":["# Mount Drive"]},{"cell_type":"code","metadata":{"id":"-M48O3QXt0dc","executionInfo":{"status":"error","timestamp":1605223348203,"user_tz":-480,"elapsed":6440,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"ead0fbb0-994b-4626-a8ee-7705bee30950","colab":{"base_uri":"https://localhost:8080/","height":556}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    728\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 729\u001b[0;31m                 \u001b[0mident\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreply\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdin_socket\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    730\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/jupyter_client/session.py\u001b[0m in \u001b[0;36mrecv\u001b[0;34m(self, socket, mode, content, copy)\u001b[0m\n\u001b[1;32m    802\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 803\u001b[0;31m             \u001b[0mmsg_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_multipart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    804\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mzmq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mZMQError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/zmq/sugar/socket.py\u001b[0m in \u001b[0;36mrecv_multipart\u001b[0;34m(self, flags, copy, track)\u001b[0m\n\u001b[1;32m    490\u001b[0m         \"\"\"\n\u001b[0;32m--> 491\u001b[0;31m         \u001b[0mparts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrack\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    492\u001b[0m         \u001b[0;31m# have first part already, only loop while more to receive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.recv\u001b[0;34m()\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.recv\u001b[0;34m()\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket._recv_copy\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/zmq/backend/cython/checkrc.pxd\u001b[0m in \u001b[0;36mzmq.backend.cython.checkrc._check_rc\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: ","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-d5df0069828e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdrive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdrive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36mmount\u001b[0;34m(mountpoint, force_remount, timeout_ms, use_metadata_server)\u001b[0m\n\u001b[1;32m    248\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muse_tags\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'dfs-auth-dance'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    249\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfifo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'w'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfifo_file\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 250\u001b[0;31m           \u001b[0mfifo_file\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mget_code\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mauth_prompt\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m'\\n'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    251\u001b[0m       \u001b[0mwrote_to_fifo\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    252\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mcase\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    702\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    703\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 704\u001b[0;31m             \u001b[0mpassword\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    705\u001b[0m         )\n\u001b[1;32m    706\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    732\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    733\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 734\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    735\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    736\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"qZ9y3nOXL7ix"},"source":["# Install Libraries"]},{"cell_type":"code","metadata":{"id":"Z2gdCDhmybWe"},"source":["!pip install wandb -qqq"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aUnW2mpR502Y","executionInfo":{"status":"ok","timestamp":1605211297735,"user_tz":-480,"elapsed":3825,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"80e698dd-eac2-458a-c45a-65fbe895b6b4","colab":{"base_uri":"https://localhost:8080/"}},"source":["import nltk\n","nltk.download('punkt')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"ob3J7_w6L9wL"},"source":["# Run Model"]},{"cell_type":"code","metadata":{"id":"YV-vgOrwzbhT"},"source":["# Preprocessing Functions\n","def clean_str(text):\n","    text = re.sub(r\"[^A-Za-z0-9(),!?\\'\\`\\\"]\", \" \", text)\n","    text = re.sub(r\"\\s{2,}\", \" \", text)\n","    text = text.strip().lower()\n","\n","    return text\n","\n","\n","def build_word_dict(contents):\n","    words = list()\n","    for content in contents:\n","        for word in word_tokenize(clean_str(content)):\n","            words.append(word)\n","\n","    word_counter = collections.Counter(words).most_common()\n","    word_dict = dict()\n","    word_dict[\"<pad>\"] = 0\n","    word_dict[\"<unk>\"] = 1\n","    word_dict[\"<eos>\"] = 2\n","    for word, _ in word_counter:\n","        word_dict[word] = len(word_dict)\n","    return word_dict\n","\n","\n","def preprocess(contents, word_dict, document_max_len):\n","    x = list(map(lambda d: word_tokenize(clean_str(d)), contents))\n","    x = list(map(lambda d: list(map(lambda w: word_dict.get(w, word_dict[\"<unk>\"]), d)), x))\n","    x = list(map(lambda d: d + [word_dict[\"<eos>\"]], x))\n","    x = list(map(lambda d: d[:document_max_len], x))\n","    x = list(map(lambda d: d + (document_max_len - len(d)) * [word_dict[\"<pad>\"]], x))\n","    return x\n","\n","\n","def read_data_words():\n","    x_train, y_train, x_test, y_test = [], [], [], []\n","    cop = re.compile(\"[^a-z^A-Z^0-9^,^.^' ']\")\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/train_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_train.append(data)\n","            y_train.append(int(row[0]))\n","\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/test_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_test.append(data)\n","            y_test.append(int(row[0]))\n","\n","    word_dict = build_word_dict(x_train+x_test)\n","    x_train = preprocess(x_train, word_dict, 100)\n","    y_train = np.array(y_train)\n","    x_test = preprocess(x_test, word_dict, 100)\n","    y_test = np.array(y_test)\n","\n","    x_train = [x[:100] for x in x_train]\n","    x_test = [x[:100] for x in x_test]\n","    x_train = tf.constant(x_train, dtype=tf.int64)\n","    y_train = tf.constant(y_train, dtype=tf.int64)\n","    x_test = tf.constant(x_test, dtype=tf.int64)\n","    y_test = tf.constant(y_test, dtype=tf.int64)\n","\n","    vocab_size = tf.get_static_value(tf.reduce_max(x_train))\n","    vocab_size = max(vocab_size, tf.get_static_value(tf.reduce_max(x_test))) + 1\n","    return x_train, y_train, x_test, y_test, vocab_size"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CnWPz07jyrXz","executionInfo":{"status":"ok","timestamp":1605211602076,"user_tz":-480,"elapsed":41540,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"c2b5f9b0-8784-4eae-afb1-59326a12266b","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import wandb\n","from wandb.keras import WandbCallback\n","import collections\n","import numpy as np\n","import tensorflow as tf\n","from nltk.tokenize import word_tokenize\n","from tensorflow.keras import Model, layers, models\n","import csv\n","import re\n","\n","# Hyperparameters\n","defaults = {\n","    'embedding_size' : 50,\n","    'hidden_size' : 20,\n","    'batch_size' : 128,\n","    'epochs' : 100,\n","    'lr' : 0.01,\n","    'Dropout' : 'Yes'\n","}\n","\n","# Initiate wandb\n","wandb.init(config=defaults, resume=True, name='WordRNN Q4b DX2', project='NNA2 Part B Redo', notes='sanity check')\n","config = wandb.config\n","\n","# Fix lucky seed!\n","seed = 7\n","tf.random.set_seed(seed)\n","\n","# Train test split\n","x_train, y_train, x_test, y_test, vocab_size = read_data_words()\n","\n","# Use `tf.data` to batch and shuffle the dataset:\n","train_ds = tf.data.Dataset.from_tensor_slices(\n","    (x_train, y_train)).shuffle(10000).batch(config.batch_size)\n","test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(config.batch_size)\n","\n","# Define model\n","tf.keras.backend.set_floatx('float32')\n","model = models.Sequential()\n","model.add(layers.Embedding(vocab_size, config.embedding_size, input_length=100))\n","model.add(layers.Dropout(0.5))\n","model.add(layers.RNN(layers.GRUCell(config.hidden_size), unroll=True))\n","model.add(layers.Dropout(0.5))\n","model.add(layers.Dense(15, activation=None))\n","model.summary()\n","\n","# Choose optimizer and loss function\n","opt = tf.keras.optimizers.Adam(learning_rate=config.lr)\n","loss_object = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n","\n","# Compile model\n","model.compile(\n","    optimizer=opt,\n","    loss=loss_object,\n","    metrics=['accuracy'],\n",")\n","\n","# Train model\n","model.fit(\n","    train_ds,\n","    validation_data=test_ds,\n","    epochs=config.epochs,\n","    callbacks=[WandbCallback()],\n","    )"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mtodayisagreatday\u001b[0m (use `wandb login --relogin` to force relogin)\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.10<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">WordRNN Q4b SC-2</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo</a><br/>\n","                Run page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/2zcx59g6\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/2zcx59g6</a><br/>\n","                Run data is saved locally in <code>/content/wandb/run-20201112_200140-2zcx59g6</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding (Embedding)        (None, 100, 50)           1764350   \n","_________________________________________________________________\n","dropout (Dropout)            (None, 100, 50)           0         \n","_________________________________________________________________\n","rnn (RNN)                    (None, 20)                4320      \n","_________________________________________________________________\n","dense (Dense)                (None, 15)                315       \n","=================================================================\n","Total params: 1,768,985\n","Trainable params: 1,768,985\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/100\n","44/44 [==============================] - 5s 105ms/step - loss: 2.6648 - accuracy: 0.0723 - val_loss: 2.6485 - val_accuracy: 0.0714\n","Epoch 2/100\n","44/44 [==============================] - 3s 63ms/step - loss: 2.6499 - accuracy: 0.0727 - val_loss: 2.6430 - val_accuracy: 0.0729\n","Epoch 3/100\n","44/44 [==============================] - 3s 71ms/step - loss: 2.3959 - accuracy: 0.1386 - val_loss: 2.0819 - val_accuracy: 0.2200\n","Epoch 4/100\n","44/44 [==============================] - 3s 66ms/step - loss: 1.5904 - accuracy: 0.4443 - val_loss: 1.1766 - val_accuracy: 0.6514\n","Epoch 5/100\n","44/44 [==============================] - 3s 63ms/step - loss: 0.7832 - accuracy: 0.7727 - val_loss: 0.6991 - val_accuracy: 0.7871\n","Epoch 6/100\n","44/44 [==============================] - 3s 67ms/step - loss: 0.4288 - accuracy: 0.8652 - val_loss: 0.5639 - val_accuracy: 0.8443\n","Epoch 7/100\n","44/44 [==============================] - 3s 66ms/step - loss: 0.2638 - accuracy: 0.9282 - val_loss: 0.5364 - val_accuracy: 0.8529\n","Epoch 8/100\n","44/44 [==============================] - 3s 66ms/step - loss: 0.1741 - accuracy: 0.9539 - val_loss: 0.5131 - val_accuracy: 0.8614\n","Epoch 9/100\n","44/44 [==============================] - 3s 63ms/step - loss: 0.1144 - accuracy: 0.9709 - val_loss: 0.4511 - val_accuracy: 0.8971\n","Epoch 10/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0989 - accuracy: 0.9718 - val_loss: 0.4860 - val_accuracy: 0.8843\n","Epoch 11/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0705 - accuracy: 0.9825 - val_loss: 0.4417 - val_accuracy: 0.8957\n","Epoch 12/100\n","44/44 [==============================] - 3s 67ms/step - loss: 0.0560 - accuracy: 0.9868 - val_loss: 0.4309 - val_accuracy: 0.8929\n","Epoch 13/100\n","44/44 [==============================] - 3s 68ms/step - loss: 0.0419 - accuracy: 0.9893 - val_loss: 0.4253 - val_accuracy: 0.9029\n","Epoch 14/100\n","44/44 [==============================] - 3s 60ms/step - loss: 0.0328 - accuracy: 0.9923 - val_loss: 0.4589 - val_accuracy: 0.9043\n","Epoch 15/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0237 - accuracy: 0.9943 - val_loss: 0.4383 - val_accuracy: 0.9100\n","Epoch 16/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0206 - accuracy: 0.9946 - val_loss: 0.4036 - val_accuracy: 0.9129\n","Epoch 17/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0179 - accuracy: 0.9959 - val_loss: 0.4225 - val_accuracy: 0.9071\n","Epoch 18/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0149 - accuracy: 0.9964 - val_loss: 0.3970 - val_accuracy: 0.9129\n","Epoch 19/100\n","44/44 [==============================] - 3s 64ms/step - loss: 0.0173 - accuracy: 0.9950 - val_loss: 0.4371 - val_accuracy: 0.9100\n","Epoch 20/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0205 - accuracy: 0.9941 - val_loss: 0.4124 - val_accuracy: 0.9157\n","Epoch 21/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0148 - accuracy: 0.9961 - val_loss: 0.4815 - val_accuracy: 0.9014\n","Epoch 22/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0197 - accuracy: 0.9945 - val_loss: 0.4511 - val_accuracy: 0.8971\n","Epoch 23/100\n","44/44 [==============================] - 3s 64ms/step - loss: 0.0227 - accuracy: 0.9932 - val_loss: 0.4303 - val_accuracy: 0.9100\n","Epoch 24/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0207 - accuracy: 0.9941 - val_loss: 0.4128 - val_accuracy: 0.9086\n","Epoch 25/100\n","44/44 [==============================] - 3s 60ms/step - loss: 0.0166 - accuracy: 0.9962 - val_loss: 0.4372 - val_accuracy: 0.9129\n","Epoch 26/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0140 - accuracy: 0.9964 - val_loss: 0.4292 - val_accuracy: 0.9086\n","Epoch 27/100\n","44/44 [==============================] - 3s 64ms/step - loss: 0.0081 - accuracy: 0.9975 - val_loss: 0.4392 - val_accuracy: 0.9100\n","Epoch 28/100\n","44/44 [==============================] - 3s 66ms/step - loss: 0.0132 - accuracy: 0.9955 - val_loss: 0.4491 - val_accuracy: 0.9071\n","Epoch 29/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0095 - accuracy: 0.9975 - val_loss: 0.4704 - val_accuracy: 0.9000\n","Epoch 30/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0147 - accuracy: 0.9955 - val_loss: 0.4496 - val_accuracy: 0.9057\n","Epoch 31/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0138 - accuracy: 0.9966 - val_loss: 0.4514 - val_accuracy: 0.9200\n","Epoch 32/100\n","44/44 [==============================] - 3s 60ms/step - loss: 0.0108 - accuracy: 0.9973 - val_loss: 0.4958 - val_accuracy: 0.8986\n","Epoch 33/100\n","44/44 [==============================] - 3s 60ms/step - loss: 0.0131 - accuracy: 0.9968 - val_loss: 0.4136 - val_accuracy: 0.9057\n","Epoch 34/100\n","44/44 [==============================] - 3s 65ms/step - loss: 0.0134 - accuracy: 0.9962 - val_loss: 0.4622 - val_accuracy: 0.9000\n","Epoch 35/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0087 - accuracy: 0.9980 - val_loss: 0.4165 - val_accuracy: 0.9171\n","Epoch 36/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0112 - accuracy: 0.9971 - val_loss: 0.4152 - val_accuracy: 0.9086\n","Epoch 37/100\n","44/44 [==============================] - 3s 63ms/step - loss: 0.0115 - accuracy: 0.9968 - val_loss: 0.3719 - val_accuracy: 0.9171\n","Epoch 38/100\n","44/44 [==============================] - 3s 62ms/step - loss: 0.0074 - accuracy: 0.9982 - val_loss: 0.4585 - val_accuracy: 0.9100\n","Epoch 39/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0099 - accuracy: 0.9975 - val_loss: 0.4572 - val_accuracy: 0.9000\n","Epoch 40/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0057 - accuracy: 0.9987 - val_loss: 0.4229 - val_accuracy: 0.9114\n","Epoch 41/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0071 - accuracy: 0.9989 - val_loss: 0.5028 - val_accuracy: 0.9043\n","Epoch 42/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0075 - accuracy: 0.9980 - val_loss: 0.4151 - val_accuracy: 0.9086\n","Epoch 43/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.0084 - accuracy: 0.9973 - val_loss: 0.4404 - val_accuracy: 0.9071\n","Epoch 44/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0053 - accuracy: 0.9987 - val_loss: 0.4299 - val_accuracy: 0.9086\n","Epoch 45/100\n","44/44 [==============================] - 3s 66ms/step - loss: 0.0046 - accuracy: 0.9984 - val_loss: 0.5029 - val_accuracy: 0.8943\n","Epoch 46/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0191 - accuracy: 0.9959 - val_loss: 0.3957 - val_accuracy: 0.9014\n","Epoch 47/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.0086 - accuracy: 0.9986 - val_loss: 0.4089 - val_accuracy: 0.9143\n","Epoch 48/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0132 - accuracy: 0.9966 - val_loss: 0.3486 - val_accuracy: 0.9157\n","Epoch 49/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0099 - accuracy: 0.9975 - val_loss: 0.3829 - val_accuracy: 0.9157\n","Epoch 50/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.0074 - accuracy: 0.9979 - val_loss: 0.4305 - val_accuracy: 0.9071\n","Epoch 51/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0079 - accuracy: 0.9980 - val_loss: 0.4345 - val_accuracy: 0.9086\n","Epoch 52/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.0099 - accuracy: 0.9980 - val_loss: 0.3860 - val_accuracy: 0.9129\n","Epoch 53/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0044 - accuracy: 0.9993 - val_loss: 0.3959 - val_accuracy: 0.9029\n","Epoch 54/100\n","44/44 [==============================] - 3s 63ms/step - loss: 0.0049 - accuracy: 0.9989 - val_loss: 0.4050 - val_accuracy: 0.9100\n","Epoch 55/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0087 - accuracy: 0.9975 - val_loss: 0.4128 - val_accuracy: 0.9071\n","Epoch 56/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0053 - accuracy: 0.9986 - val_loss: 0.4132 - val_accuracy: 0.9057\n","Epoch 57/100\n","44/44 [==============================] - 3s 62ms/step - loss: 0.0072 - accuracy: 0.9989 - val_loss: 0.3773 - val_accuracy: 0.9071\n","Epoch 58/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.0089 - accuracy: 0.9971 - val_loss: 0.3651 - val_accuracy: 0.9086\n","Epoch 59/100\n","44/44 [==============================] - 3s 68ms/step - loss: 0.0083 - accuracy: 0.9979 - val_loss: 0.3639 - val_accuracy: 0.9086\n","Epoch 60/100\n","44/44 [==============================] - 3s 62ms/step - loss: 0.0038 - accuracy: 0.9991 - val_loss: 0.3847 - val_accuracy: 0.9157\n","Epoch 61/100\n","44/44 [==============================] - 3s 58ms/step - loss: 0.0067 - accuracy: 0.9979 - val_loss: 0.3875 - val_accuracy: 0.9114\n","Epoch 62/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0040 - accuracy: 0.9989 - val_loss: 0.3692 - val_accuracy: 0.9186\n","Epoch 63/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0086 - accuracy: 0.9970 - val_loss: 0.3779 - val_accuracy: 0.9186\n","Epoch 64/100\n","44/44 [==============================] - 3s 57ms/step - loss: 0.0113 - accuracy: 0.9971 - val_loss: 0.3600 - val_accuracy: 0.9100\n","Epoch 65/100\n","44/44 [==============================] - 3s 60ms/step - loss: 0.0051 - accuracy: 0.9982 - val_loss: 0.3468 - val_accuracy: 0.9214\n","Epoch 66/100\n","44/44 [==============================] - 3s 68ms/step - loss: 0.0063 - accuracy: 0.9984 - val_loss: 0.3730 - val_accuracy: 0.9129\n","Epoch 67/100\n","44/44 [==============================] - 3s 67ms/step - loss: 0.0025 - accuracy: 0.9995 - val_loss: 0.4027 - val_accuracy: 0.9100\n","Epoch 68/100\n","44/44 [==============================] - 3s 60ms/step - loss: 0.0062 - accuracy: 0.9986 - val_loss: 0.4218 - val_accuracy: 0.9043\n","Epoch 69/100\n","44/44 [==============================] - 3s 66ms/step - loss: 0.0038 - accuracy: 0.9995 - val_loss: 0.4239 - val_accuracy: 0.9014\n","Epoch 70/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0049 - accuracy: 0.9987 - val_loss: 0.4668 - val_accuracy: 0.9043\n","Epoch 71/100\n","44/44 [==============================] - 3s 64ms/step - loss: 0.0056 - accuracy: 0.9980 - val_loss: 0.4101 - val_accuracy: 0.9043\n","Epoch 72/100\n","44/44 [==============================] - 3s 60ms/step - loss: 0.0039 - accuracy: 0.9986 - val_loss: 0.3408 - val_accuracy: 0.9243\n","Epoch 73/100\n","44/44 [==============================] - 3s 63ms/step - loss: 0.0051 - accuracy: 0.9977 - val_loss: 0.3594 - val_accuracy: 0.9243\n","Epoch 74/100\n","44/44 [==============================] - 3s 64ms/step - loss: 0.0050 - accuracy: 0.9984 - val_loss: 0.4216 - val_accuracy: 0.9157\n","Epoch 75/100\n","44/44 [==============================] - 3s 60ms/step - loss: 0.0097 - accuracy: 0.9973 - val_loss: 0.4023 - val_accuracy: 0.9171\n","Epoch 76/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0057 - accuracy: 0.9980 - val_loss: 0.4048 - val_accuracy: 0.9086\n","Epoch 77/100\n","44/44 [==============================] - 3s 66ms/step - loss: 0.0053 - accuracy: 0.9982 - val_loss: 0.4308 - val_accuracy: 0.9029\n","Epoch 78/100\n","44/44 [==============================] - 3s 61ms/step - loss: 0.0063 - accuracy: 0.9977 - val_loss: 0.5784 - val_accuracy: 0.8843\n","Epoch 79/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0071 - accuracy: 0.9979 - val_loss: 0.4017 - val_accuracy: 0.9071\n","Epoch 80/100\n","44/44 [==============================] - 3s 64ms/step - loss: 0.0075 - accuracy: 0.9977 - val_loss: 0.3789 - val_accuracy: 0.9157\n","Epoch 81/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0078 - accuracy: 0.9977 - val_loss: 0.4095 - val_accuracy: 0.8914\n","Epoch 82/100\n","44/44 [==============================] - 3s 62ms/step - loss: 0.0046 - accuracy: 0.9987 - val_loss: 0.3888 - val_accuracy: 0.9129\n","Epoch 83/100\n","44/44 [==============================] - 3s 60ms/step - loss: 0.0050 - accuracy: 0.9986 - val_loss: 0.4601 - val_accuracy: 0.8986\n","Epoch 84/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0078 - accuracy: 0.9971 - val_loss: 0.4604 - val_accuracy: 0.8943\n","Epoch 85/100\n","44/44 [==============================] - 3s 71ms/step - loss: 0.0069 - accuracy: 0.9986 - val_loss: 0.4820 - val_accuracy: 0.9100\n","Epoch 86/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0125 - accuracy: 0.9962 - val_loss: 0.4440 - val_accuracy: 0.8929\n","Epoch 87/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0112 - accuracy: 0.9975 - val_loss: 0.3806 - val_accuracy: 0.9071\n","Epoch 88/100\n","44/44 [==============================] - 3s 60ms/step - loss: 0.0051 - accuracy: 0.9986 - val_loss: 0.3674 - val_accuracy: 0.9086\n","Epoch 89/100\n","44/44 [==============================] - 3s 62ms/step - loss: 0.0050 - accuracy: 0.9987 - val_loss: 0.3589 - val_accuracy: 0.9086\n","Epoch 90/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0037 - accuracy: 0.9989 - val_loss: 0.3887 - val_accuracy: 0.9029\n","Epoch 91/100\n","44/44 [==============================] - 3s 60ms/step - loss: 0.0061 - accuracy: 0.9982 - val_loss: 0.4231 - val_accuracy: 0.9057\n","Epoch 92/100\n","44/44 [==============================] - 3s 60ms/step - loss: 0.0054 - accuracy: 0.9989 - val_loss: 0.4228 - val_accuracy: 0.9071\n","Epoch 93/100\n","44/44 [==============================] - 3s 67ms/step - loss: 0.0040 - accuracy: 0.9995 - val_loss: 0.4300 - val_accuracy: 0.9086\n","Epoch 94/100\n","44/44 [==============================] - 3s 60ms/step - loss: 0.0052 - accuracy: 0.9989 - val_loss: 0.4526 - val_accuracy: 0.9071\n","Epoch 95/100\n","44/44 [==============================] - 3s 62ms/step - loss: 0.0035 - accuracy: 0.9989 - val_loss: 0.4198 - val_accuracy: 0.9129\n","Epoch 96/100\n","44/44 [==============================] - 3s 62ms/step - loss: 0.0124 - accuracy: 0.9964 - val_loss: 0.3520 - val_accuracy: 0.9086\n","Epoch 97/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0105 - accuracy: 0.9973 - val_loss: 0.4297 - val_accuracy: 0.8971\n","Epoch 98/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0061 - accuracy: 0.9982 - val_loss: 0.3973 - val_accuracy: 0.9057\n","Epoch 99/100\n","44/44 [==============================] - 3s 59ms/step - loss: 0.0061 - accuracy: 0.9982 - val_loss: 0.4067 - val_accuracy: 0.9114\n","Epoch 100/100\n","44/44 [==============================] - 3s 65ms/step - loss: 0.0033 - accuracy: 0.9993 - val_loss: 0.4668 - val_accuracy: 0.9029\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7fad81e15da0>"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"10s9udsJChxm"},"source":[""],"execution_count":null,"outputs":[]}]}