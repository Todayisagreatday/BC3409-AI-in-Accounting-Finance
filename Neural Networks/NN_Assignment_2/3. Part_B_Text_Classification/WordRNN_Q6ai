{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"WordRNN_Q6ai","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMxg/XC1M0xy2PxyHmhKrsZ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"-M48O3QXt0dc","executionInfo":{"status":"ok","timestamp":1605212384638,"user_tz":-480,"elapsed":53045,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"9e4546e3-2732-42a2-9c29-0d34d272323d","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Z2gdCDhmybWe","executionInfo":{"status":"ok","timestamp":1605212397047,"user_tz":-480,"elapsed":9496,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"bc0d4788-abcf-4819-e48a-251ffb6d6ccb","colab":{"base_uri":"https://localhost:8080/"}},"source":["!pip install wandb -qqq"],"execution_count":2,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 1.8MB 14.0MB/s \n","\u001b[K     |████████████████████████████████| 102kB 12.6MB/s \n","\u001b[K     |████████████████████████████████| 102kB 13.3MB/s \n","\u001b[K     |████████████████████████████████| 133kB 56.9MB/s \n","\u001b[K     |████████████████████████████████| 163kB 54.2MB/s \n","\u001b[K     |████████████████████████████████| 71kB 10.7MB/s \n","\u001b[?25h  Building wheel for subprocess32 (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for watchdog (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"aUnW2mpR502Y","executionInfo":{"status":"ok","timestamp":1605212398503,"user_tz":-480,"elapsed":10787,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"07d33e54-4ffa-4c6d-a453-ebbb69d0f3b1","colab":{"base_uri":"https://localhost:8080/"}},"source":["import nltk\n","nltk.download('punkt')"],"execution_count":3,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"YV-vgOrwzbhT","executionInfo":{"status":"ok","timestamp":1605212398505,"user_tz":-480,"elapsed":8343,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}}},"source":["# Preprocessing Functions\n","def clean_str(text):\n","    text = re.sub(r\"[^A-Za-z0-9(),!?\\'\\`\\\"]\", \" \", text)\n","    text = re.sub(r\"\\s{2,}\", \" \", text)\n","    text = text.strip().lower()\n","\n","    return text\n","\n","\n","def build_word_dict(contents):\n","    words = list()\n","    for content in contents:\n","        for word in word_tokenize(clean_str(content)):\n","            words.append(word)\n","\n","    word_counter = collections.Counter(words).most_common()\n","    word_dict = dict()\n","    word_dict[\"<pad>\"] = 0\n","    word_dict[\"<unk>\"] = 1\n","    word_dict[\"<eos>\"] = 2\n","    for word, _ in word_counter:\n","        word_dict[word] = len(word_dict)\n","    return word_dict\n","\n","\n","def preprocess(contents, word_dict, document_max_len):\n","    x = list(map(lambda d: word_tokenize(clean_str(d)), contents))\n","    x = list(map(lambda d: list(map(lambda w: word_dict.get(w, word_dict[\"<unk>\"]), d)), x))\n","    x = list(map(lambda d: d + [word_dict[\"<eos>\"]], x))\n","    x = list(map(lambda d: d[:document_max_len], x))\n","    x = list(map(lambda d: d + (document_max_len - len(d)) * [word_dict[\"<pad>\"]], x))\n","    return x\n","\n","\n","def read_data_words():\n","    x_train, y_train, x_test, y_test = [], [], [], []\n","    cop = re.compile(\"[^a-z^A-Z^0-9^,^.^' ']\")\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/train_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_train.append(data)\n","            y_train.append(int(row[0]))\n","\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/test_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_test.append(data)\n","            y_test.append(int(row[0]))\n","\n","    word_dict = build_word_dict(x_train+x_test)\n","    x_train = preprocess(x_train, word_dict, 100)\n","    y_train = np.array(y_train)\n","    x_test = preprocess(x_test, word_dict, 100)\n","    y_test = np.array(y_test)\n","\n","    x_train = [x[:100] for x in x_train]\n","    x_test = [x[:100] for x in x_test]\n","    x_train = tf.constant(x_train, dtype=tf.int64)\n","    y_train = tf.constant(y_train, dtype=tf.int64)\n","    x_test = tf.constant(x_test, dtype=tf.int64)\n","    y_test = tf.constant(y_test, dtype=tf.int64)\n","\n","    vocab_size = tf.get_static_value(tf.reduce_max(x_train))\n","    vocab_size = max(vocab_size, tf.get_static_value(tf.reduce_max(x_test))) + 1\n","    return x_train, y_train, x_test, y_test, vocab_size"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"CnWPz07jyrXz","executionInfo":{"status":"ok","timestamp":1605212617291,"user_tz":-480,"elapsed":208582,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"22a854b2-b005-4f18-893d-554425951980","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import wandb\n","from wandb.keras import WandbCallback\n","import collections\n","import numpy as np\n","import tensorflow as tf\n","from nltk.tokenize import word_tokenize\n","from tensorflow.keras import Model, layers, models\n","import csv\n","import re\n","\n","# Hyperparameters\n","defaults = {\n","    'embedding_size' : 50,\n","    'hidden_size' : 20,\n","    'batch_size' : 128,\n","    'epochs' : 100,\n","    'lr' : 0.01,\n","    'Dropout' : 'No'\n","}\n","\n","# Initiate wandb\n","wandb.init(config=defaults, resume=True, name='WordRNN Q6ai', project='NNA2 Part B Redo')\n","config = wandb.config\n","\n","# Fix lucky seed!\n","seed = 7\n","tf.random.set_seed(seed)\n","\n","# Train test split\n","x_train, y_train, x_test, y_test, vocab_size = read_data_words()\n","\n","# Use `tf.data` to batch and shuffle the dataset:\n","train_ds = tf.data.Dataset.from_tensor_slices(\n","    (x_train, y_train)).shuffle(10000).batch(config.batch_size)\n","test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(config.batch_size)\n","\n","# Define model\n","tf.keras.backend.set_floatx('float32')\n","model = models.Sequential()\n","model.add(layers.Embedding(vocab_size, config.embedding_size, input_length=100))\n","model.add(layers.Dropout(0.5))\n","model.add(layers.RNN(layers.SimpleRNNCell(config.hidden_size), unroll=True))\n","model.add(layers.Dense(15, activation=None))\n","model.summary()\n","\n","# Choose optimizer and loss function\n","opt = tf.keras.optimizers.SGD(learning_rate=config.lr)\n","loss_object = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n","\n","# Compile model\n","model.compile(\n","    optimizer=opt,\n","    loss=loss_object,\n","    metrics=['accuracy'],\n",")\n","\n","# Train model\n","model.fit(\n","    train_ds,\n","    validation_data=test_ds,\n","    epochs=config.epochs,\n","    callbacks=[WandbCallback()],\n","    )"],"execution_count":5,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","        window._wandbApiKey = new Promise((resolve, reject) => {\n","            function loadScript(url) {\n","            return new Promise(function(resolve, reject) {\n","                let newScript = document.createElement(\"script\");\n","                newScript.onerror = reject;\n","                newScript.onload = resolve;\n","                document.body.appendChild(newScript);\n","                newScript.src = url;\n","            });\n","            }\n","            loadScript(\"https://cdn.jsdelivr.net/npm/postmate/build/postmate.min.js\").then(() => {\n","            const iframe = document.createElement('iframe')\n","            iframe.style.cssText = \"width:0;height:0;border:none\"\n","            document.body.appendChild(iframe)\n","            const handshake = new Postmate({\n","                container: iframe,\n","                url: 'https://wandb.ai/authorize'\n","            });\n","            const timeout = setTimeout(() => reject(\"Couldn't auto authenticate\"), 5000)\n","            handshake.then(function(child) {\n","                child.on('authorize', data => {\n","                    clearTimeout(timeout)\n","                    resolve(data)\n","                });\n","            });\n","            })\n","        });\n","    "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n"],"name":"stderr"},{"output_type":"stream","text":["wandb: Paste an API key from your profile and hit enter: ··········\n"],"name":"stdout"},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.10<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">WordRNN Q6ai</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo</a><br/>\n","                Run page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/3vhz1qp6\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/3vhz1qp6</a><br/>\n","                Run data is saved locally in <code>/content/wandb/run-20201112_202203-3vhz1qp6</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding (Embedding)        (None, 100, 50)           1764350   \n","_________________________________________________________________\n","dropout (Dropout)            (None, 100, 50)           0         \n","_________________________________________________________________\n","rnn (RNN)                    (None, 20)                1420      \n","_________________________________________________________________\n","dense (Dense)                (None, 15)                315       \n","=================================================================\n","Total params: 1,766,085\n","Trainable params: 1,766,085\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/100\n","44/44 [==============================] - 2s 38ms/step - loss: 2.7001 - accuracy: 0.0780 - val_loss: 2.6846 - val_accuracy: 0.0886\n","Epoch 2/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6822 - accuracy: 0.0882 - val_loss: 2.6876 - val_accuracy: 0.0786\n","Epoch 3/100\n","44/44 [==============================] - 1s 17ms/step - loss: 2.6773 - accuracy: 0.0854 - val_loss: 2.6582 - val_accuracy: 0.1114\n","Epoch 4/100\n","44/44 [==============================] - 1s 17ms/step - loss: 2.6690 - accuracy: 0.0979 - val_loss: 2.6561 - val_accuracy: 0.1057\n","Epoch 5/100\n","44/44 [==============================] - 1s 17ms/step - loss: 2.6659 - accuracy: 0.0914 - val_loss: 2.6499 - val_accuracy: 0.0829\n","Epoch 6/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6568 - accuracy: 0.0913 - val_loss: 2.6403 - val_accuracy: 0.1100\n","Epoch 7/100\n","44/44 [==============================] - 1s 17ms/step - loss: 2.6543 - accuracy: 0.0916 - val_loss: 2.6373 - val_accuracy: 0.1143\n","Epoch 8/100\n","44/44 [==============================] - 1s 17ms/step - loss: 2.6510 - accuracy: 0.0961 - val_loss: 2.6487 - val_accuracy: 0.0914\n","Epoch 9/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6482 - accuracy: 0.1029 - val_loss: 2.6724 - val_accuracy: 0.0700\n","Epoch 10/100\n","44/44 [==============================] - 1s 17ms/step - loss: 2.6472 - accuracy: 0.1004 - val_loss: 2.6263 - val_accuracy: 0.1143\n","Epoch 11/100\n","44/44 [==============================] - 1s 17ms/step - loss: 2.6443 - accuracy: 0.0982 - val_loss: 2.6252 - val_accuracy: 0.0971\n","Epoch 12/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6470 - accuracy: 0.0996 - val_loss: 2.6278 - val_accuracy: 0.1129\n","Epoch 13/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6406 - accuracy: 0.1045 - val_loss: 2.6234 - val_accuracy: 0.1071\n","Epoch 14/100\n","44/44 [==============================] - 1s 18ms/step - loss: 2.6369 - accuracy: 0.1052 - val_loss: 2.6157 - val_accuracy: 0.1143\n","Epoch 15/100\n","44/44 [==============================] - 1s 17ms/step - loss: 2.6380 - accuracy: 0.0982 - val_loss: 2.6265 - val_accuracy: 0.0971\n","Epoch 16/100\n","44/44 [==============================] - 1s 18ms/step - loss: 2.6347 - accuracy: 0.0995 - val_loss: 2.6413 - val_accuracy: 0.0986\n","Epoch 17/100\n","44/44 [==============================] - 1s 19ms/step - loss: 2.6325 - accuracy: 0.1000 - val_loss: 2.6269 - val_accuracy: 0.1071\n","Epoch 18/100\n","44/44 [==============================] - 1s 19ms/step - loss: 2.6328 - accuracy: 0.1014 - val_loss: 2.6343 - val_accuracy: 0.0971\n","Epoch 19/100\n","44/44 [==============================] - 1s 21ms/step - loss: 2.6532 - accuracy: 0.0800 - val_loss: 2.6529 - val_accuracy: 0.0714\n","Epoch 20/100\n","44/44 [==============================] - 1s 20ms/step - loss: 2.6540 - accuracy: 0.0711 - val_loss: 2.6511 - val_accuracy: 0.0714\n","Epoch 21/100\n","44/44 [==============================] - 1s 17ms/step - loss: 2.6537 - accuracy: 0.0702 - val_loss: 2.6493 - val_accuracy: 0.0729\n","Epoch 22/100\n","44/44 [==============================] - 1s 17ms/step - loss: 2.6519 - accuracy: 0.0670 - val_loss: 2.6478 - val_accuracy: 0.0729\n","Epoch 23/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6505 - accuracy: 0.0677 - val_loss: 2.6475 - val_accuracy: 0.0743\n","Epoch 24/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6491 - accuracy: 0.0686 - val_loss: 2.6466 - val_accuracy: 0.0743\n","Epoch 25/100\n","44/44 [==============================] - 1s 20ms/step - loss: 2.6483 - accuracy: 0.0711 - val_loss: 2.6463 - val_accuracy: 0.0714\n","Epoch 26/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6481 - accuracy: 0.0704 - val_loss: 2.6457 - val_accuracy: 0.0729\n","Epoch 27/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6487 - accuracy: 0.0743 - val_loss: 2.6458 - val_accuracy: 0.0743\n","Epoch 28/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6481 - accuracy: 0.0646 - val_loss: 2.6452 - val_accuracy: 0.0714\n","Epoch 29/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6467 - accuracy: 0.0634 - val_loss: 2.6447 - val_accuracy: 0.0743\n","Epoch 30/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6460 - accuracy: 0.0691 - val_loss: 2.6447 - val_accuracy: 0.0743\n","Epoch 31/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6459 - accuracy: 0.0702 - val_loss: 2.6442 - val_accuracy: 0.0714\n","Epoch 32/100\n","44/44 [==============================] - 1s 17ms/step - loss: 2.6457 - accuracy: 0.0743 - val_loss: 2.6440 - val_accuracy: 0.0743\n","Epoch 33/100\n","44/44 [==============================] - 1s 20ms/step - loss: 2.6464 - accuracy: 0.0707 - val_loss: 2.6439 - val_accuracy: 0.0729\n","Epoch 34/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6464 - accuracy: 0.0675 - val_loss: 2.6437 - val_accuracy: 0.0729\n","Epoch 35/100\n","44/44 [==============================] - 1s 20ms/step - loss: 2.6445 - accuracy: 0.0746 - val_loss: 2.6435 - val_accuracy: 0.0729\n","Epoch 36/100\n","44/44 [==============================] - 1s 18ms/step - loss: 2.6450 - accuracy: 0.0704 - val_loss: 2.6434 - val_accuracy: 0.0743\n","Epoch 37/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6450 - accuracy: 0.0763 - val_loss: 2.6432 - val_accuracy: 0.0729\n","Epoch 38/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6456 - accuracy: 0.0668 - val_loss: 2.6431 - val_accuracy: 0.0714\n","Epoch 39/100\n","44/44 [==============================] - 1s 18ms/step - loss: 2.6443 - accuracy: 0.0779 - val_loss: 2.6430 - val_accuracy: 0.0729\n","Epoch 40/100\n","44/44 [==============================] - 1s 19ms/step - loss: 2.6440 - accuracy: 0.0688 - val_loss: 2.6427 - val_accuracy: 0.0743\n","Epoch 41/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6435 - accuracy: 0.0725 - val_loss: 2.6429 - val_accuracy: 0.0729\n","Epoch 42/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6446 - accuracy: 0.0723 - val_loss: 2.6425 - val_accuracy: 0.0743\n","Epoch 43/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6443 - accuracy: 0.0636 - val_loss: 2.6429 - val_accuracy: 0.0714\n","Epoch 44/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6438 - accuracy: 0.0739 - val_loss: 2.6423 - val_accuracy: 0.0743\n","Epoch 45/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6432 - accuracy: 0.0729 - val_loss: 2.6423 - val_accuracy: 0.0729\n","Epoch 46/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6437 - accuracy: 0.0686 - val_loss: 2.6421 - val_accuracy: 0.0729\n","Epoch 47/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6431 - accuracy: 0.0736 - val_loss: 2.6420 - val_accuracy: 0.0729\n","Epoch 48/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6435 - accuracy: 0.0712 - val_loss: 2.6420 - val_accuracy: 0.0743\n","Epoch 49/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6435 - accuracy: 0.0736 - val_loss: 2.6419 - val_accuracy: 0.0729\n","Epoch 50/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6434 - accuracy: 0.0721 - val_loss: 2.6420 - val_accuracy: 0.0714\n","Epoch 51/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6427 - accuracy: 0.0725 - val_loss: 2.6418 - val_accuracy: 0.0743\n","Epoch 52/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6440 - accuracy: 0.0684 - val_loss: 2.6417 - val_accuracy: 0.0714\n","Epoch 53/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6431 - accuracy: 0.0712 - val_loss: 2.6418 - val_accuracy: 0.0729\n","Epoch 54/100\n","44/44 [==============================] - 1s 17ms/step - loss: 2.6428 - accuracy: 0.0743 - val_loss: 2.6416 - val_accuracy: 0.0729\n","Epoch 55/100\n","44/44 [==============================] - 1s 19ms/step - loss: 2.6429 - accuracy: 0.0723 - val_loss: 2.6415 - val_accuracy: 0.0786\n","Epoch 56/100\n","44/44 [==============================] - 1s 17ms/step - loss: 2.6427 - accuracy: 0.0732 - val_loss: 2.6414 - val_accuracy: 0.0714\n","Epoch 57/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6425 - accuracy: 0.0696 - val_loss: 2.6414 - val_accuracy: 0.0729\n","Epoch 58/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6423 - accuracy: 0.0671 - val_loss: 2.6414 - val_accuracy: 0.0743\n","Epoch 59/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6428 - accuracy: 0.0720 - val_loss: 2.6412 - val_accuracy: 0.0729\n","Epoch 60/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6430 - accuracy: 0.0689 - val_loss: 2.6412 - val_accuracy: 0.0743\n","Epoch 61/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6429 - accuracy: 0.0677 - val_loss: 2.6411 - val_accuracy: 0.0714\n","Epoch 62/100\n","44/44 [==============================] - 1s 17ms/step - loss: 2.6417 - accuracy: 0.0736 - val_loss: 2.6412 - val_accuracy: 0.0714\n","Epoch 63/100\n","44/44 [==============================] - 1s 18ms/step - loss: 2.6422 - accuracy: 0.0718 - val_loss: 2.6411 - val_accuracy: 0.0743\n","Epoch 64/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6429 - accuracy: 0.0737 - val_loss: 2.6410 - val_accuracy: 0.0743\n","Epoch 65/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6414 - accuracy: 0.0739 - val_loss: 2.6409 - val_accuracy: 0.0729\n","Epoch 66/100\n","44/44 [==============================] - 1s 18ms/step - loss: 2.6426 - accuracy: 0.0625 - val_loss: 2.6410 - val_accuracy: 0.0714\n","Epoch 67/100\n","44/44 [==============================] - 1s 20ms/step - loss: 2.6420 - accuracy: 0.0741 - val_loss: 2.6410 - val_accuracy: 0.0729\n","Epoch 68/100\n","44/44 [==============================] - 1s 18ms/step - loss: 2.6426 - accuracy: 0.0668 - val_loss: 2.6409 - val_accuracy: 0.0729\n","Epoch 69/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6417 - accuracy: 0.0689 - val_loss: 2.6408 - val_accuracy: 0.0714\n","Epoch 70/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6420 - accuracy: 0.0727 - val_loss: 2.6408 - val_accuracy: 0.0743\n","Epoch 71/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6420 - accuracy: 0.0679 - val_loss: 2.6407 - val_accuracy: 0.0714\n","Epoch 72/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6415 - accuracy: 0.0707 - val_loss: 2.6407 - val_accuracy: 0.0729\n","Epoch 73/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6421 - accuracy: 0.0712 - val_loss: 2.6407 - val_accuracy: 0.0757\n","Epoch 74/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6420 - accuracy: 0.0680 - val_loss: 2.6407 - val_accuracy: 0.0743\n","Epoch 75/100\n","44/44 [==============================] - 1s 17ms/step - loss: 2.6420 - accuracy: 0.0693 - val_loss: 2.6407 - val_accuracy: 0.0729\n","Epoch 76/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6411 - accuracy: 0.0698 - val_loss: 2.6406 - val_accuracy: 0.0743\n","Epoch 77/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6416 - accuracy: 0.0675 - val_loss: 2.6406 - val_accuracy: 0.0714\n","Epoch 78/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6416 - accuracy: 0.0664 - val_loss: 2.6406 - val_accuracy: 0.0714\n","Epoch 79/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6419 - accuracy: 0.0712 - val_loss: 2.6406 - val_accuracy: 0.0729\n","Epoch 80/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6413 - accuracy: 0.0686 - val_loss: 2.6406 - val_accuracy: 0.0729\n","Epoch 81/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6413 - accuracy: 0.0714 - val_loss: 2.6405 - val_accuracy: 0.0714\n","Epoch 82/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6413 - accuracy: 0.0680 - val_loss: 2.6405 - val_accuracy: 0.0729\n","Epoch 83/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6415 - accuracy: 0.0630 - val_loss: 2.6404 - val_accuracy: 0.0729\n","Epoch 84/100\n","44/44 [==============================] - 1s 20ms/step - loss: 2.6416 - accuracy: 0.0646 - val_loss: 2.6404 - val_accuracy: 0.0714\n","Epoch 85/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6419 - accuracy: 0.0650 - val_loss: 2.6405 - val_accuracy: 0.0743\n","Epoch 86/100\n","44/44 [==============================] - 1s 17ms/step - loss: 2.6415 - accuracy: 0.0682 - val_loss: 2.6404 - val_accuracy: 0.0729\n","Epoch 87/100\n","44/44 [==============================] - 1s 17ms/step - loss: 2.6416 - accuracy: 0.0657 - val_loss: 2.6404 - val_accuracy: 0.0729\n","Epoch 88/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6411 - accuracy: 0.0754 - val_loss: 2.6404 - val_accuracy: 0.0714\n","Epoch 89/100\n","44/44 [==============================] - 1s 20ms/step - loss: 2.6421 - accuracy: 0.0634 - val_loss: 2.6404 - val_accuracy: 0.0729\n","Epoch 90/100\n","44/44 [==============================] - 1s 19ms/step - loss: 2.6410 - accuracy: 0.0725 - val_loss: 2.6403 - val_accuracy: 0.0714\n","Epoch 91/100\n","44/44 [==============================] - 1s 17ms/step - loss: 2.6408 - accuracy: 0.0739 - val_loss: 2.6403 - val_accuracy: 0.0729\n","Epoch 92/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6412 - accuracy: 0.0652 - val_loss: 2.6404 - val_accuracy: 0.0729\n","Epoch 93/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6417 - accuracy: 0.0641 - val_loss: 2.6403 - val_accuracy: 0.0743\n","Epoch 94/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6414 - accuracy: 0.0620 - val_loss: 2.6403 - val_accuracy: 0.0729\n","Epoch 95/100\n","44/44 [==============================] - 1s 18ms/step - loss: 2.6413 - accuracy: 0.0702 - val_loss: 2.6403 - val_accuracy: 0.0729\n","Epoch 96/100\n","44/44 [==============================] - 1s 21ms/step - loss: 2.6410 - accuracy: 0.0711 - val_loss: 2.6402 - val_accuracy: 0.0714\n","Epoch 97/100\n","44/44 [==============================] - 1s 19ms/step - loss: 2.6413 - accuracy: 0.0720 - val_loss: 2.6402 - val_accuracy: 0.0729\n","Epoch 98/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6410 - accuracy: 0.0737 - val_loss: 2.6402 - val_accuracy: 0.0729\n","Epoch 99/100\n","44/44 [==============================] - 1s 15ms/step - loss: 2.6415 - accuracy: 0.0666 - val_loss: 2.6402 - val_accuracy: 0.0714\n","Epoch 100/100\n","44/44 [==============================] - 1s 16ms/step - loss: 2.6409 - accuracy: 0.0677 - val_loss: 2.6402 - val_accuracy: 0.0729\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f6ffab789b0>"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"10s9udsJChxm"},"source":[""],"execution_count":null,"outputs":[]}]}