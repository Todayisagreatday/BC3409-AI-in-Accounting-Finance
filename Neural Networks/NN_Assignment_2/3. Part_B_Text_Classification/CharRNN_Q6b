{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CharRNN_Q6b","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNZoKjMrx6zb/XUjlynUg4n"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"MsObL7B7Siou","executionInfo":{"status":"ok","timestamp":1604858238563,"user_tz":-480,"elapsed":1191,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"879a776e-7dd3-468a-aab7-205da1a7d42d","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"NdaTK82wnP1b","executionInfo":{"status":"ok","timestamp":1604858241173,"user_tz":-480,"elapsed":3792,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}}},"source":["!pip install wandb -qqq"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"9oGQD0F_dqYS","executionInfo":{"status":"ok","timestamp":1604858241174,"user_tz":-480,"elapsed":3788,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}}},"source":["# Preprocessing Functions\n","def vocabulary(strings):\n","    chars = sorted(list(set(list(''.join(strings)))))\n","    char_to_ix = { ch:i for i,ch in enumerate(chars) }\n","    vocab_size = len(chars)\n","    return vocab_size, char_to_ix\n","\n","def preprocess(strings, char_to_ix, MAX_LENGTH):\n","    data_chars = [list(d.lower()) for _, d in enumerate(strings)]\n","    for i, d in enumerate(data_chars):\n","        if len(d)>MAX_LENGTH:\n","            d = d[:MAX_LENGTH]\n","        elif len(d) < MAX_LENGTH:\n","            d += [' '] * (MAX_LENGTH - len(d))\n","            \n","    data_ids = np.zeros([len(data_chars), MAX_LENGTH], dtype=np.int64)\n","    for i in range(len(data_chars)):\n","        for j in range(MAX_LENGTH):\n","            data_ids[i, j] = char_to_ix[data_chars[i][j]]\n","    return np.array(data_ids)\n","\n","def read_data_chars():\n","    x_train, y_train, x_test, y_test = [], [], [], []\n","    cop = re.compile(\"[^a-z^A-Z^0-9^,^.^' ']\")\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/train_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_train.append(data)\n","            y_train.append(int(row[0]))\n","\n","    with open('/content/drive/My Drive/Neural Networks/NN_Assignment_2/Part_B_Text_Classification/test_medium.csv', encoding='utf-8') as filex:\n","        reader = csv.reader(filex)\n","        for row in reader:\n","            data = cop.sub(\"\", row[1])\n","            x_test.append(data)\n","            y_test.append(int(row[0]))\n","\n","\n","    vocab_size, char_to_ix = vocabulary(x_train+x_test)\n","    x_train = preprocess(x_train, char_to_ix, 100)\n","    y_train = np.array(y_train)\n","    x_test = preprocess(x_test, char_to_ix, 100)\n","    y_test = np.array(y_test)\n","\n","    x_train = tf.constant(x_train, dtype=tf.int64)\n","    y_train = tf.constant(y_train, dtype=tf.int64)\n","    x_test = tf.constant(x_test, dtype=tf.int64)\n","    y_test = tf.constant(y_test, dtype=tf.int64)\n","\n","    return x_train, y_train, x_test, y_test\n","\n","def OneHot(input_dim=None, input_length=None):\n","    # Check if inputs were supplied correctly\n","    if input_dim is None or input_length is None:\n","        raise TypeError(\"input_dim or input_length is not set\")\n","\n","    # Helper method (not inlined for clarity)\n","    def _one_hot(x, num_classes):\n","        return K.one_hot(K.cast(x, 'uint8'),\n","                          num_classes=num_classes)\n","\n","    # Final layer representation as a Lambda layer\n","    return layers.Lambda(_one_hot,\n","                  arguments={'num_classes': input_dim},\n","                  input_shape=(input_length,))"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ugg05UW4QnW8","executionInfo":{"status":"ok","timestamp":1604858655786,"user_tz":-480,"elapsed":418393,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"a12f940b-1773-42e3-afdf-22f376921528","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import wandb\n","from wandb.keras import WandbCallback\n","from keras.preprocessing.text import Tokenizer\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow.keras import Model, layers, models\n","from keras import backend as K\n","import csv\n","import re\n","\n","# Hyperparameters\n","defaults = {\n","    'embedding_size' : 50,\n","    'hidden_size' : 20,\n","    'batch_size' : 128,\n","    'epochs' : 100,\n","    'lr' : 0.01,\n","    'Dropout' : 'Yes'\n","}\n","\n","# Initiate wandb\n","wandb.init(config=defaults, resume=True, name='CharRNN Q6b', project='NNA2 Part B Redo')\n","config = wandb.config\n","\n","# Fix lucky seed!\n","seed = 7\n","tf.random.set_seed(seed)\n","\n","# Train test split\n","x_train, y_train, x_test, y_test = read_data_chars()\n","\n","# Use `tf.data` to batch and shuffle the dataset:\n","train_ds = tf.data.Dataset.from_tensor_slices(\n","    (x_train, y_train)).shuffle(10000).batch(config.batch_size)\n","test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(config.batch_size)\n","\n","# Define model\n","tf.keras.backend.set_floatx('float32')\n","model = models.Sequential()\n","model.add(OneHot(input_dim=256, input_length=100))\n","model.add(layers.RNN(layers.GRUCell(config.hidden_size), unroll=True, return_sequences=True))\n","model.add(layers.RNN(layers.GRUCell(config.hidden_size), unroll=True))\n","model.add(layers.Dropout(0.5))\n","model.add(layers.Dense(15, activation=None))\n","model.summary()\n","\n","# Choose optimizer and loss function\n","opt = tf.keras.optimizers.Adam(learning_rate=config.lr)\n","loss_object = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n","\n","# Compile model\n","model.compile(\n","    optimizer=opt,\n","    loss=loss_object,\n","    metrics=['accuracy'],\n",")\n","\n","# Train model\n","model.fit(\n","    train_ds,\n","    validation_data=test_ds,\n","    epochs=config.epochs,\n","    callbacks=[WandbCallback()],\n","    )"],"execution_count":4,"outputs":[{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mtodayisagreatday\u001b[0m (use `wandb login --relogin` to force relogin)\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.9<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">CharRNN Q6b</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo</a><br/>\n","                Run page: <a href=\"https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/k7iyeh9i\" target=\"_blank\">https://wandb.ai/todayisagreatday/NNA2%20Part%20B%20Redo/runs/k7iyeh9i</a><br/>\n","                Run data is saved locally in <code>wandb/run-20201108_175721-k7iyeh9i</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","lambda (Lambda)              (None, 100, 256)          0         \n","_________________________________________________________________\n","rnn (RNN)                    (None, 100, 20)           16680     \n","_________________________________________________________________\n","rnn_1 (RNN)                  (None, 20)                2520      \n","_________________________________________________________________\n","dropout (Dropout)            (None, 20)                0         \n","_________________________________________________________________\n","dense (Dense)                (None, 15)                315       \n","=================================================================\n","Total params: 19,515\n","Trainable params: 19,515\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/100\n","44/44 [==============================] - 8s 182ms/step - loss: 2.6688 - accuracy: 0.0866 - val_loss: 2.6083 - val_accuracy: 0.0914\n","Epoch 2/100\n","44/44 [==============================] - 4s 82ms/step - loss: 2.6117 - accuracy: 0.1037 - val_loss: 2.4984 - val_accuracy: 0.1843\n","Epoch 3/100\n","44/44 [==============================] - 4s 84ms/step - loss: 2.4502 - accuracy: 0.1500 - val_loss: 2.2871 - val_accuracy: 0.1714\n","Epoch 4/100\n","44/44 [==============================] - 4s 83ms/step - loss: 2.1886 - accuracy: 0.2130 - val_loss: 2.0224 - val_accuracy: 0.3171\n","Epoch 5/100\n","44/44 [==============================] - 4s 83ms/step - loss: 1.9099 - accuracy: 0.3164 - val_loss: 1.6793 - val_accuracy: 0.3929\n","Epoch 6/100\n","44/44 [==============================] - 4s 83ms/step - loss: 1.6404 - accuracy: 0.4121 - val_loss: 1.4640 - val_accuracy: 0.4771\n","Epoch 7/100\n","44/44 [==============================] - 4s 83ms/step - loss: 1.4741 - accuracy: 0.4739 - val_loss: 1.3483 - val_accuracy: 0.4943\n","Epoch 8/100\n","44/44 [==============================] - 4s 83ms/step - loss: 1.3488 - accuracy: 0.5123 - val_loss: 1.2668 - val_accuracy: 0.5371\n","Epoch 9/100\n","44/44 [==============================] - 4s 83ms/step - loss: 1.2443 - accuracy: 0.5562 - val_loss: 1.1658 - val_accuracy: 0.5757\n","Epoch 10/100\n","44/44 [==============================] - 4s 82ms/step - loss: 1.1440 - accuracy: 0.5911 - val_loss: 1.0846 - val_accuracy: 0.5871\n","Epoch 11/100\n","44/44 [==============================] - 4s 84ms/step - loss: 1.0972 - accuracy: 0.6052 - val_loss: 1.0553 - val_accuracy: 0.6286\n","Epoch 12/100\n","44/44 [==============================] - 4s 85ms/step - loss: 1.0506 - accuracy: 0.6225 - val_loss: 1.0286 - val_accuracy: 0.6429\n","Epoch 13/100\n","44/44 [==============================] - 4s 83ms/step - loss: 1.0031 - accuracy: 0.6420 - val_loss: 1.0119 - val_accuracy: 0.6600\n","Epoch 14/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.9583 - accuracy: 0.6552 - val_loss: 0.9952 - val_accuracy: 0.6557\n","Epoch 15/100\n","44/44 [==============================] - 4s 83ms/step - loss: 0.9422 - accuracy: 0.6641 - val_loss: 0.9761 - val_accuracy: 0.6671\n","Epoch 16/100\n","44/44 [==============================] - 4s 84ms/step - loss: 0.8791 - accuracy: 0.6896 - val_loss: 0.9724 - val_accuracy: 0.6957\n","Epoch 17/100\n","44/44 [==============================] - 4s 83ms/step - loss: 0.8617 - accuracy: 0.6980 - val_loss: 0.9689 - val_accuracy: 0.6943\n","Epoch 18/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.8337 - accuracy: 0.7061 - val_loss: 0.9471 - val_accuracy: 0.6971\n","Epoch 19/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.8099 - accuracy: 0.7184 - val_loss: 0.9776 - val_accuracy: 0.7186\n","Epoch 20/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.7803 - accuracy: 0.7311 - val_loss: 0.8887 - val_accuracy: 0.7157\n","Epoch 21/100\n","44/44 [==============================] - 4s 84ms/step - loss: 0.7461 - accuracy: 0.7454 - val_loss: 0.9367 - val_accuracy: 0.7214\n","Epoch 22/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.7346 - accuracy: 0.7496 - val_loss: 1.0019 - val_accuracy: 0.7200\n","Epoch 23/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.7245 - accuracy: 0.7555 - val_loss: 0.9557 - val_accuracy: 0.7114\n","Epoch 24/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.7138 - accuracy: 0.7638 - val_loss: 0.9589 - val_accuracy: 0.7143\n","Epoch 25/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.7216 - accuracy: 0.7552 - val_loss: 0.8977 - val_accuracy: 0.7271\n","Epoch 26/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.6504 - accuracy: 0.7821 - val_loss: 0.9317 - val_accuracy: 0.7171\n","Epoch 27/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.6681 - accuracy: 0.7730 - val_loss: 1.0123 - val_accuracy: 0.6957\n","Epoch 28/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.6834 - accuracy: 0.7741 - val_loss: 0.9098 - val_accuracy: 0.7286\n","Epoch 29/100\n","44/44 [==============================] - 4s 83ms/step - loss: 0.6241 - accuracy: 0.7855 - val_loss: 0.9354 - val_accuracy: 0.7229\n","Epoch 30/100\n","44/44 [==============================] - 4s 83ms/step - loss: 0.6195 - accuracy: 0.7929 - val_loss: 0.9238 - val_accuracy: 0.7243\n","Epoch 31/100\n","44/44 [==============================] - 4s 83ms/step - loss: 0.6156 - accuracy: 0.7916 - val_loss: 0.9788 - val_accuracy: 0.7214\n","Epoch 32/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.6186 - accuracy: 0.7970 - val_loss: 0.8657 - val_accuracy: 0.7357\n","Epoch 33/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.5932 - accuracy: 0.8011 - val_loss: 0.9041 - val_accuracy: 0.7429\n","Epoch 34/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.5870 - accuracy: 0.8089 - val_loss: 0.9199 - val_accuracy: 0.7214\n","Epoch 35/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.5725 - accuracy: 0.8096 - val_loss: 0.9252 - val_accuracy: 0.7443\n","Epoch 36/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.5686 - accuracy: 0.8032 - val_loss: 0.9345 - val_accuracy: 0.7329\n","Epoch 37/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.5486 - accuracy: 0.8138 - val_loss: 0.9043 - val_accuracy: 0.7400\n","Epoch 38/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.5480 - accuracy: 0.8186 - val_loss: 0.9746 - val_accuracy: 0.7400\n","Epoch 39/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.5431 - accuracy: 0.8239 - val_loss: 0.9229 - val_accuracy: 0.7514\n","Epoch 40/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.5508 - accuracy: 0.8245 - val_loss: 0.8763 - val_accuracy: 0.7657\n","Epoch 41/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.5238 - accuracy: 0.8259 - val_loss: 0.9248 - val_accuracy: 0.7371\n","Epoch 42/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.5362 - accuracy: 0.8234 - val_loss: 0.9466 - val_accuracy: 0.7471\n","Epoch 43/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.5311 - accuracy: 0.8218 - val_loss: 0.9271 - val_accuracy: 0.7543\n","Epoch 44/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.4998 - accuracy: 0.8293 - val_loss: 0.9778 - val_accuracy: 0.7557\n","Epoch 45/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.5421 - accuracy: 0.8252 - val_loss: 0.9490 - val_accuracy: 0.7543\n","Epoch 46/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.4773 - accuracy: 0.8452 - val_loss: 0.9431 - val_accuracy: 0.7457\n","Epoch 47/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.4914 - accuracy: 0.8404 - val_loss: 1.0420 - val_accuracy: 0.7429\n","Epoch 48/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.5158 - accuracy: 0.8238 - val_loss: 0.8987 - val_accuracy: 0.7443\n","Epoch 49/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.4646 - accuracy: 0.8545 - val_loss: 0.9947 - val_accuracy: 0.7500\n","Epoch 50/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.4739 - accuracy: 0.8441 - val_loss: 1.0181 - val_accuracy: 0.7371\n","Epoch 51/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.4805 - accuracy: 0.8423 - val_loss: 0.9881 - val_accuracy: 0.7400\n","Epoch 52/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.4729 - accuracy: 0.8470 - val_loss: 1.0268 - val_accuracy: 0.7600\n","Epoch 53/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.4669 - accuracy: 0.8487 - val_loss: 1.0100 - val_accuracy: 0.7557\n","Epoch 54/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.4668 - accuracy: 0.8496 - val_loss: 1.0178 - val_accuracy: 0.7571\n","Epoch 55/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.4544 - accuracy: 0.8459 - val_loss: 0.9950 - val_accuracy: 0.7586\n","Epoch 56/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.4540 - accuracy: 0.8516 - val_loss: 1.0072 - val_accuracy: 0.7529\n","Epoch 57/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.4793 - accuracy: 0.8443 - val_loss: 0.8821 - val_accuracy: 0.7486\n","Epoch 58/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.4742 - accuracy: 0.8466 - val_loss: 1.0122 - val_accuracy: 0.7543\n","Epoch 59/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.4421 - accuracy: 0.8595 - val_loss: 0.9841 - val_accuracy: 0.7586\n","Epoch 60/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.4524 - accuracy: 0.8505 - val_loss: 1.0017 - val_accuracy: 0.7600\n","Epoch 61/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.4126 - accuracy: 0.8636 - val_loss: 0.9381 - val_accuracy: 0.7629\n","Epoch 62/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.4292 - accuracy: 0.8602 - val_loss: 0.9594 - val_accuracy: 0.7600\n","Epoch 63/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.4483 - accuracy: 0.8512 - val_loss: 0.9945 - val_accuracy: 0.7443\n","Epoch 64/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.3976 - accuracy: 0.8754 - val_loss: 1.0522 - val_accuracy: 0.7486\n","Epoch 65/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.4167 - accuracy: 0.8698 - val_loss: 1.0310 - val_accuracy: 0.7543\n","Epoch 66/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.4663 - accuracy: 0.8507 - val_loss: 1.0107 - val_accuracy: 0.7586\n","Epoch 67/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.4054 - accuracy: 0.8657 - val_loss: 0.9495 - val_accuracy: 0.7543\n","Epoch 68/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.4161 - accuracy: 0.8684 - val_loss: 1.0253 - val_accuracy: 0.7429\n","Epoch 69/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.4440 - accuracy: 0.8527 - val_loss: 1.1216 - val_accuracy: 0.7429\n","Epoch 70/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.5238 - accuracy: 0.8293 - val_loss: 0.9607 - val_accuracy: 0.7514\n","Epoch 71/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.4514 - accuracy: 0.8559 - val_loss: 0.9911 - val_accuracy: 0.7300\n","Epoch 72/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.6427 - accuracy: 0.7959 - val_loss: 0.9339 - val_accuracy: 0.7586\n","Epoch 73/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.4580 - accuracy: 0.8496 - val_loss: 0.8745 - val_accuracy: 0.7643\n","Epoch 74/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.4181 - accuracy: 0.8691 - val_loss: 0.9803 - val_accuracy: 0.7629\n","Epoch 75/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.4250 - accuracy: 0.8586 - val_loss: 1.0286 - val_accuracy: 0.7629\n","Epoch 76/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.4583 - accuracy: 0.8529 - val_loss: 0.9112 - val_accuracy: 0.7514\n","Epoch 77/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.4162 - accuracy: 0.8679 - val_loss: 0.9460 - val_accuracy: 0.7600\n","Epoch 78/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.3854 - accuracy: 0.8771 - val_loss: 0.9856 - val_accuracy: 0.7700\n","Epoch 79/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.3629 - accuracy: 0.8839 - val_loss: 1.0501 - val_accuracy: 0.7600\n","Epoch 80/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.3511 - accuracy: 0.8877 - val_loss: 1.0902 - val_accuracy: 0.7600\n","Epoch 81/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.4045 - accuracy: 0.8691 - val_loss: 0.9691 - val_accuracy: 0.7557\n","Epoch 82/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.4044 - accuracy: 0.8682 - val_loss: 1.0569 - val_accuracy: 0.7514\n","Epoch 83/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.3798 - accuracy: 0.8741 - val_loss: 1.0337 - val_accuracy: 0.7529\n","Epoch 84/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.4246 - accuracy: 0.8627 - val_loss: 1.0178 - val_accuracy: 0.7471\n","Epoch 85/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.3623 - accuracy: 0.8807 - val_loss: 1.0026 - val_accuracy: 0.7500\n","Epoch 86/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.3738 - accuracy: 0.8802 - val_loss: 1.0232 - val_accuracy: 0.7514\n","Epoch 87/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.3753 - accuracy: 0.8805 - val_loss: 1.1538 - val_accuracy: 0.7386\n","Epoch 88/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.4093 - accuracy: 0.8737 - val_loss: 1.0026 - val_accuracy: 0.7614\n","Epoch 89/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.3877 - accuracy: 0.8804 - val_loss: 1.0780 - val_accuracy: 0.7571\n","Epoch 90/100\n","44/44 [==============================] - 4s 82ms/step - loss: 0.3639 - accuracy: 0.8848 - val_loss: 1.0050 - val_accuracy: 0.7671\n","Epoch 91/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.3568 - accuracy: 0.8854 - val_loss: 1.0892 - val_accuracy: 0.7443\n","Epoch 92/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.3648 - accuracy: 0.8830 - val_loss: 1.0941 - val_accuracy: 0.7514\n","Epoch 93/100\n","44/44 [==============================] - 3s 79ms/step - loss: 0.3870 - accuracy: 0.8732 - val_loss: 1.0484 - val_accuracy: 0.7371\n","Epoch 94/100\n","44/44 [==============================] - 4s 83ms/step - loss: 0.4195 - accuracy: 0.8616 - val_loss: 1.1135 - val_accuracy: 0.7571\n","Epoch 95/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.3843 - accuracy: 0.8771 - val_loss: 1.0728 - val_accuracy: 0.7457\n","Epoch 96/100\n","44/44 [==============================] - 3s 79ms/step - loss: 0.4699 - accuracy: 0.8523 - val_loss: 1.1649 - val_accuracy: 0.7471\n","Epoch 97/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.3772 - accuracy: 0.8720 - val_loss: 1.0801 - val_accuracy: 0.7586\n","Epoch 98/100\n","44/44 [==============================] - 4s 80ms/step - loss: 0.3457 - accuracy: 0.8868 - val_loss: 1.2243 - val_accuracy: 0.7486\n","Epoch 99/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.3482 - accuracy: 0.8875 - val_loss: 1.1377 - val_accuracy: 0.7571\n","Epoch 100/100\n","44/44 [==============================] - 4s 81ms/step - loss: 0.4049 - accuracy: 0.8684 - val_loss: 1.1586 - val_accuracy: 0.7414\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7ff83523a080>"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"C-60Y8FPS7Ki","executionInfo":{"status":"ok","timestamp":1604858655791,"user_tz":-480,"elapsed":418393,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}}},"source":[""],"execution_count":4,"outputs":[]}]}