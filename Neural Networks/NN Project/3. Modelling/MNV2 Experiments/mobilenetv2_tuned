{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"mobilenetv2_tuned","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPrVVKgV1fxgn+H8wWi0ZfF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"T2IvTdM77oii","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606101761634,"user_tz":-480,"elapsed":9183,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"72d47900-f2c2-4c4b-da03-0bebc5b594fb"},"source":["!pip install wandb -qqq"],"execution_count":1,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 1.8MB 27.0MB/s \n","\u001b[K     |████████████████████████████████| 102kB 13.6MB/s \n","\u001b[K     |████████████████████████████████| 163kB 53.8MB/s \n","\u001b[K     |████████████████████████████████| 133kB 61.5MB/s \n","\u001b[K     |████████████████████████████████| 102kB 14.4MB/s \n","\u001b[K     |████████████████████████████████| 71kB 12.5MB/s \n","\u001b[?25h  Building wheel for watchdog (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for subprocess32 (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GqyCQTBf8gqO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606101946190,"user_tz":-480,"elapsed":58978,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"9396a0d5-bd6b-46c8-9610-934adb9594e2"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5CBaAkSa7_IT","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1606106899928,"user_tz":-480,"elapsed":4953730,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"e9bced99-dde3-47e6-e73c-06abbae6d59d"},"source":["import wandb\n","from wandb.keras import WandbCallback\n","import numpy as np\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","import pandas as pd\n","import tensorflow as tf\n","from sklearn.model_selection import train_test_split\n","\n","# GPU Configuration\n","gpus = tf.config.experimental.list_physical_devices('GPU')\n","if gpus:\n","    try:\n","        for gpu in gpus:\n","            tf.config.experimental.set_memory_growth(gpu, True)\n","        logical_gpus = tf.config.experimental.list_logical_devices('GPU')\n","        print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPUs\")\n","    except RuntimeError as e:\n","        print(e)\n","\n","# Hyperparameters\n","defaults = {\n","    'epochs': 20,\n","    'batch_size': 64,\n","    'fc1_num_neurons': 512,\n","    'fc2_num_neurons': 512,\n","    'fc3_num_neurons': 512,\n","    'seed': 7,\n","    'learning_rate': 5e-4,\n","    'weight_decay' : 0.001,\n","    'optimizer': 'adam',\n","    'hidden_activation': 'relu',\n","    'output_activation': 'sigmoid',\n","    'loss_function': 'binary_crossentropy',\n","    'metrics': ['accuracy'],\n","}\n","\n","wandb.init(config=defaults, resume=True, name='MNV2 Tuned', project='nn_project_tuning', notes='no pretraining')\n","config = wandb.config\n","np.random.seed(config.seed)\n","tf.random.set_seed(config.seed)\n","\n","\n","# Load dataset as dataframe\n","df = pd.read_csv(\"/content/drive/My Drive/Y4 Sem 1/NN Project/aligned_gender.txt\", sep='\\t')\n","train_df, test_df = train_test_split(df, test_size=0.2)\n","train_df['datadir'] = '/content/drive/My Drive/Y4 Sem 1/NN Project/' + train_df['datadir'].astype(str)\n","test_df['datadir'] = '/content/drive/My Drive/Y4 Sem 1/NN Project/' + test_df['datadir'].astype(str)\n","\n","# Load images into keras image generator \n","datagen_train = ImageDataGenerator(\n","    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input,\n",")\n","datagen_test = ImageDataGenerator(\n","    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input,\n",")\n","\n","train_generator = datagen_train.flow_from_dataframe(\n","    dataframe=train_df,\n","    x_col='datadir',\n","    y_col='gender',\n","    batch_size=config.batch_size,\n","    seed=config.seed,\n","    shuffle=True,\n","    class_mode='raw',\n","    target_size=(224,224),\n",")\n","\n","test_generator = datagen_test.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='datadir',\n","    y_col='gender',\n","    batch_size=config.batch_size,\n","    seed=config.seed,\n","    shuffle=True,\n","    class_mode='raw',\n","    target_size=(224,224),\n",")\n","\n","# Define model\n","mobile_net_v2 = tf.keras.applications.MobileNetV2(\n","    include_top=False,\n","    pooling='avg',\n","    weights='imagenet',\n","    input_shape=(224,224,3),\n",")\n","\n","# Set mobilenetv2 to true\n","mobile_net_v2.trainable = True\n","\n","fc1 = tf.keras.layers.Dense(\n","    config.fc1_num_neurons,\n","    activation=config.hidden_activation,\n","    kernel_regularizer=tf.keras.regularizers.L2(l2=config.weight_decay)\n",")\n","\n","fc2 = tf.keras.layers.Dense(\n","    config.fc2_num_neurons,\n","    activation=config.hidden_activation,\n","    kernel_regularizer=tf.keras.regularizers.L2(l2=config.weight_decay)\n",")\n","\n","fc3 = tf.keras.layers.Dense(\n","    config.fc2_num_neurons,\n","    activation=config.hidden_activation,\n","    kernel_regularizer=tf.keras.regularizers.L2(l2=config.weight_decay)\n",")\n","\n","bn1 = tf.keras.layers.BatchNormalization()\n","bn2 = tf.keras.layers.BatchNormalization()\n","bn3 = tf.keras.layers.BatchNormalization()\n","bn4 = tf.keras.layers.BatchNormalization()\n","\n","model = tf.keras.models.Sequential([\n","    mobile_net_v2,\n","    tf.keras.layers.Flatten(),\n","    bn1,\n","    fc1,\n","    tf.keras.layers.Dropout(0.5),\n","    bn2,\n","    fc2,\n","    tf.keras.layers.Dropout(0.5),\n","    bn3,\n","    fc3,\n","    tf.keras.layers.Dropout(0),\n","    bn4,\n","    tf.keras.layers.Dense(1, activation=config.output_activation),\n","])\n","model.summary()\n","\n","# Compile model \n","model.compile(\n","    optimizer=tf.keras.optimizers.Adam(learning_rate=config.learning_rate),\n","    loss=config.loss_function,\n","    metrics=config.metrics,\n",")\n","\n","# Fit model\n","model.fit(\n","    train_generator,\n","    validation_data=test_generator,\n","    epochs=config.epochs,\n","    callbacks=[WandbCallback()],\n",")\n","model.save_weights('adience_tune.h5') "],"execution_count":3,"outputs":[{"output_type":"stream","text":["1 Physical GPUs, 1 Logical GPUs\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/javascript":["\n","        window._wandbApiKey = new Promise((resolve, reject) => {\n","            function loadScript(url) {\n","            return new Promise(function(resolve, reject) {\n","                let newScript = document.createElement(\"script\");\n","                newScript.onerror = reject;\n","                newScript.onload = resolve;\n","                document.body.appendChild(newScript);\n","                newScript.src = url;\n","            });\n","            }\n","            loadScript(\"https://cdn.jsdelivr.net/npm/postmate/build/postmate.min.js\").then(() => {\n","            const iframe = document.createElement('iframe')\n","            iframe.style.cssText = \"width:0;height:0;border:none\"\n","            document.body.appendChild(iframe)\n","            const handshake = new Postmate({\n","                container: iframe,\n","                url: 'https://wandb.ai/authorize'\n","            });\n","            const timeout = setTimeout(() => reject(\"Couldn't auto authenticate\"), 5000)\n","            handshake.then(function(child) {\n","                child.on('authorize', data => {\n","                    clearTimeout(timeout)\n","                    resolve(data)\n","                });\n","            });\n","            })\n","        });\n","    "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n"],"name":"stderr"},{"output_type":"stream","text":["wandb: Paste an API key from your profile and hit enter: ··········\n"],"name":"stdout"},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.11<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">MNV2 Tuned</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/burntice/nn_project_tuning\" target=\"_blank\">https://wandb.ai/burntice/nn_project_tuning</a><br/>\n","                Run page: <a href=\"https://wandb.ai/burntice/nn_project_tuning/runs/11r4twuv\" target=\"_blank\">https://wandb.ai/burntice/nn_project_tuning/runs/11r4twuv</a><br/>\n","                Run data is saved locally in <code>/content/wandb/run-20201123_032626-11r4twuv</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:46: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:47: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"],"name":"stderr"},{"output_type":"stream","text":["Found 9755 validated image filenames.\n","Found 2439 validated image filenames.\n","Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/mobilenet_v2/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_1.0_224_no_top.h5\n","9412608/9406464 [==============================] - 0s 0us/step\n","Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","mobilenetv2_1.00_224 (Functi (None, 1280)              2257984   \n","_________________________________________________________________\n","flatten (Flatten)            (None, 1280)              0         \n","_________________________________________________________________\n","batch_normalization (BatchNo (None, 1280)              5120      \n","_________________________________________________________________\n","dense (Dense)                (None, 512)               655872    \n","_________________________________________________________________\n","dropout (Dropout)            (None, 512)               0         \n","_________________________________________________________________\n","batch_normalization_1 (Batch (None, 512)               2048      \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 512)               262656    \n","_________________________________________________________________\n","dropout_1 (Dropout)          (None, 512)               0         \n","_________________________________________________________________\n","batch_normalization_2 (Batch (None, 512)               2048      \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 512)               262656    \n","_________________________________________________________________\n","dropout_2 (Dropout)          (None, 512)               0         \n","_________________________________________________________________\n","batch_normalization_3 (Batch (None, 512)               2048      \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 1)                 513       \n","=================================================================\n","Total params: 3,450,945\n","Trainable params: 3,411,201\n","Non-trainable params: 39,744\n","_________________________________________________________________\n","Epoch 1/20\n","153/153 [==============================] - 1972s 13s/step - loss: 2.0796 - accuracy: 0.8230 - val_loss: 2.5720 - val_accuracy: 0.7999\n","Epoch 2/20\n","153/153 [==============================] - 153s 998ms/step - loss: 1.6475 - accuracy: 0.9387 - val_loss: 3.5758 - val_accuracy: 0.6503\n","Epoch 3/20\n","153/153 [==============================] - 152s 990ms/step - loss: 1.3624 - accuracy: 0.9610 - val_loss: 1.5168 - val_accuracy: 0.9016\n","Epoch 4/20\n","153/153 [==============================] - 151s 984ms/step - loss: 1.1173 - accuracy: 0.9733 - val_loss: 2.3032 - val_accuracy: 0.7306\n","Epoch 5/20\n","153/153 [==============================] - 149s 972ms/step - loss: 0.9130 - accuracy: 0.9761 - val_loss: 1.8459 - val_accuracy: 0.8106\n","Epoch 6/20\n","153/153 [==============================] - 149s 973ms/step - loss: 0.7199 - accuracy: 0.9825 - val_loss: 2.1119 - val_accuracy: 0.7577\n","Epoch 7/20\n","153/153 [==============================] - 149s 973ms/step - loss: 0.5709 - accuracy: 0.9820 - val_loss: 5.4120 - val_accuracy: 0.6027\n","Epoch 8/20\n","153/153 [==============================] - 150s 978ms/step - loss: 0.4467 - accuracy: 0.9831 - val_loss: 0.8432 - val_accuracy: 0.8581\n","Epoch 9/20\n","153/153 [==============================] - 149s 972ms/step - loss: 0.3488 - accuracy: 0.9836 - val_loss: 0.9805 - val_accuracy: 0.8508\n","Epoch 10/20\n","153/153 [==============================] - 149s 976ms/step - loss: 0.2545 - accuracy: 0.9890 - val_loss: 0.5684 - val_accuracy: 0.9295\n","Epoch 11/20\n","153/153 [==============================] - 148s 970ms/step - loss: 0.2162 - accuracy: 0.9838 - val_loss: 1.1818 - val_accuracy: 0.8971\n","Epoch 12/20\n","153/153 [==============================] - 149s 973ms/step - loss: 0.1663 - accuracy: 0.9880 - val_loss: 1.6026 - val_accuracy: 0.8171\n","Epoch 13/20\n","153/153 [==============================] - 149s 971ms/step - loss: 0.1419 - accuracy: 0.9853 - val_loss: 0.4912 - val_accuracy: 0.9246\n","Epoch 14/20\n","153/153 [==============================] - 150s 979ms/step - loss: 0.1239 - accuracy: 0.9844 - val_loss: 0.5273 - val_accuracy: 0.8934\n","Epoch 15/20\n","153/153 [==============================] - 149s 974ms/step - loss: 0.1043 - accuracy: 0.9869 - val_loss: 0.3086 - val_accuracy: 0.9184\n","Epoch 16/20\n","153/153 [==============================] - 151s 986ms/step - loss: 0.0899 - accuracy: 0.9875 - val_loss: 0.3218 - val_accuracy: 0.9307\n","Epoch 17/20\n","153/153 [==============================] - 149s 976ms/step - loss: 0.0878 - accuracy: 0.9842 - val_loss: 1.5539 - val_accuracy: 0.8540\n","Epoch 18/20\n","153/153 [==============================] - 149s 974ms/step - loss: 0.0632 - accuracy: 0.9900 - val_loss: 0.8743 - val_accuracy: 0.8598\n","Epoch 19/20\n","153/153 [==============================] - 148s 970ms/step - loss: 0.0650 - accuracy: 0.9877 - val_loss: 1.0577 - val_accuracy: 0.8036\n","Epoch 20/20\n","153/153 [==============================] - 149s 975ms/step - loss: 0.0628 - accuracy: 0.9887 - val_loss: 0.5201 - val_accuracy: 0.9340\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"awQnqIQh9pLL"},"source":[""],"execution_count":null,"outputs":[]}]}