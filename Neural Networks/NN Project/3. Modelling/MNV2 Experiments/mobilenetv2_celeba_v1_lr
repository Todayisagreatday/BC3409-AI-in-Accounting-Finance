{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"mobilenetv2_celeba_v1_lr","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyP53h1kMdw/R6W27/5Nwdhg"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"6a81532488f64f5ca1ccff7431c2ab7a":{"model_module":"@jupyter-widgets/controls","model_name":"VBoxModel","state":{"_view_name":"VBoxView","_dom_classes":[],"_model_name":"VBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_28a4f5d540384636a71af088fc0ab038","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_7f3a3c481d4d4972b327507edf9f0399","IPY_MODEL_202afaee34b74beb9ed6a1d2b64dfb8a"]}},"28a4f5d540384636a71af088fc0ab038":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7f3a3c481d4d4972b327507edf9f0399":{"model_module":"@jupyter-widgets/controls","model_name":"LabelModel","state":{"_view_name":"LabelView","style":"IPY_MODEL_9f468f3f8bd04f20805fb8782dd467fd","_dom_classes":[],"description":"","_model_name":"LabelModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 50.62MB of 50.62MB uploaded (0.00MB deduped)\r","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_2f285b7746574fa79ed12b1ed054568c"}},"202afaee34b74beb9ed6a1d2b64dfb8a":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_4dc2e9cc32a84fcbb6ba167da4ad5dd2","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_1afd015f65ad4fa2954d625da521fe3c"}},"9f468f3f8bd04f20805fb8782dd467fd":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"2f285b7746574fa79ed12b1ed054568c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"4dc2e9cc32a84fcbb6ba167da4ad5dd2":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"1afd015f65ad4fa2954d625da521fe3c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"code","metadata":{"id":"T2IvTdM77oii","executionInfo":{"status":"ok","timestamp":1604807100697,"user_tz":-480,"elapsed":10501,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"bda920fe-2cb7-493f-9992-39abc80f9328","colab":{"base_uri":"https://localhost:8080/"}},"source":["!pip install wandb -qqq"],"execution_count":1,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 1.8MB 4.7MB/s \n","\u001b[K     |████████████████████████████████| 133kB 32.8MB/s \n","\u001b[K     |████████████████████████████████| 102kB 11.7MB/s \n","\u001b[K     |████████████████████████████████| 163kB 28.7MB/s \n","\u001b[K     |████████████████████████████████| 102kB 10.9MB/s \n","\u001b[K     |████████████████████████████████| 71kB 11.0MB/s \n","\u001b[?25h  Building wheel for subprocess32 (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for watchdog (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GqyCQTBf8gqO","executionInfo":{"status":"ok","timestamp":1604807147507,"user_tz":-480,"elapsed":45284,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"42c00aaa-3208-4938-a7f1-440b27040e2a","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5CBaAkSa7_IT","executionInfo":{"status":"ok","timestamp":1604819692859,"user_tz":-480,"elapsed":3168683,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"c071053f-5681-4856-8e1a-71f6176f860c","colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["6a81532488f64f5ca1ccff7431c2ab7a","28a4f5d540384636a71af088fc0ab038","7f3a3c481d4d4972b327507edf9f0399","202afaee34b74beb9ed6a1d2b64dfb8a","9f468f3f8bd04f20805fb8782dd467fd","2f285b7746574fa79ed12b1ed054568c","4dc2e9cc32a84fcbb6ba167da4ad5dd2","1afd015f65ad4fa2954d625da521fe3c"]}},"source":["import wandb\n","from wandb.keras import WandbCallback\n","import numpy as np\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","import pandas as pd\n","import tensorflow as tf\n","from sklearn.model_selection import train_test_split\n","\n","# GPU Configuration\n","gpus = tf.config.experimental.list_physical_devices('GPU')\n","if gpus:\n","    try:\n","        for gpu in gpus:\n","            tf.config.experimental.set_memory_growth(gpu, True)\n","        logical_gpus = tf.config.experimental.list_logical_devices('GPU')\n","        print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPUs\")\n","    except RuntimeError as e:\n","        print(e)\n","\n","# Hyperparameters\n","defaults = {\n","    'epochs': 20,\n","    'batch_size': 128,\n","    'fc1_num_neurons': 1024,\n","    'fc2_num_neurons': 512,\n","    'fc3_num_neurons': 256,\n","    'seed': 7,\n","    'learning_rate': 1e-5,\n","    'optimizer': 'adam',\n","    'hidden_activation': 'relu',\n","    'output_activation': 'sigmoid',\n","    'loss_function': 'binary_crossentropy',\n","    'metrics': ['accuracy'],\n","}\n","\n","wandb.init(config=defaults, resume=True, name='CelebA LR-C2', project='cz4042', notes='small lr')\n","config = wandb.config\n","\n","# Load dataset as dataframe\n","df = pd.read_csv(\"/content/drive/My Drive/Y4 Sem 1/NN Project/aligned_gender.txt\", sep='\\t')\n","train_df, test_df = train_test_split(df, test_size=0.2)\n","train_df['datadir'] = '/content/drive/My Drive/Y4 Sem 1/NN Project/' + train_df['datadir'].astype(str)\n","test_df['datadir'] = '/content/drive/My Drive/Y4 Sem 1/NN Project/' + test_df['datadir'].astype(str)\n","\n","# Load images into keras image generator \n","datagen_train = ImageDataGenerator(\n","    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input,\n",")\n","datagen_test = ImageDataGenerator(\n","    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input,\n",")\n","\n","train_generator = datagen_train.flow_from_dataframe(\n","    dataframe=train_df,\n","    x_col='datadir',\n","    y_col='gender',\n","    batch_size=config.batch_size,\n","    seed=config.seed,\n","    shuffle=True,\n","    class_mode='raw',\n","    target_size=(224,224),\n",")\n","\n","test_generator = datagen_test.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='datadir',\n","    y_col='gender',\n","    batch_size=config.batch_size,\n","    seed=config.seed,\n","    shuffle=True,\n","    class_mode='raw',\n","    target_size=(224,224),\n",")\n","\n","# Define model\n","mobile_net_v2 = tf.keras.applications.MobileNetV2(\n","    include_top=False,\n","    pooling='avg',\n","    weights=None,\n","    input_shape=(224,224,3),\n",")\n","\n","mobile_net_v2.trainable = True\n","\n","fc1 = tf.keras.layers.Dense(\n","    config.fc1_num_neurons,\n","    activation=config.hidden_activation,\n",")\n","\n","fc2 = tf.keras.layers.Dense(\n","    config.fc2_num_neurons,\n","    activation=config.hidden_activation,\n",")\n","\n","fc3 = tf.keras.layers.Dense(\n","    config.fc2_num_neurons,\n","    activation=config.hidden_activation,\n",")\n","\n","model = tf.keras.models.Sequential([\n","    mobile_net_v2,\n","    tf.keras.layers.Flatten(),\n","    tf.keras.layers.BatchNormalization(),\n","    fc1,\n","    tf.keras.layers.BatchNormalization(),\n","    fc2,\n","    tf.keras.layers.BatchNormalization(),\n","    fc3,\n","    tf.keras.layers.BatchNormalization(),\n","    tf.keras.layers.Dense(1, activation=config.output_activation),\n","])\n","# Load model weights\n","model.load_weights('/content/drive/My Drive/Y4 Sem 1/NN Project/pretrained_adience_v1_lr_cont.h5')\n","model.summary()\n","\n","# Compile model \n","model.compile(\n","    optimizer=tf.keras.optimizers.Adam(learning_rate=config.learning_rate),\n","    loss=config.loss_function,\n","    metrics=config.metrics,\n",")\n","\n","model.fit(\n","    train_generator,\n","    validation_data=test_generator,\n","    epochs=config.epochs,\n","    callbacks=[WandbCallback()],\n",")\n","model.save_weights('pretrained_adience_v1_lr_cont_2.h5') \n","# run.finish()"],"execution_count":5,"outputs":[{"output_type":"stream","text":["1 Physical GPUs, 1 Logical GPUs\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<br/>Waiting for W&B process to finish, PID 826<br/>Program ended successfully."],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"6a81532488f64f5ca1ccff7431c2ab7a","version_minor":0,"version_major":2},"text/plain":["VBox(children=(Label(value=' 50.42MB of 50.42MB uploaded (0.00MB deduped)\\r'), FloatProgress(value=1.0, max=1.…"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["Find user logs for this run at: <code>wandb/run-20201108_053821-182ir845/logs/debug.log</code>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["Find internal logs for this run at: <code>wandb/run-20201108_053821-182ir845/logs/debug-internal.log</code>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<h3>Run summary:</h3><br/><style>\n","    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n","    </style><table class=\"wandb\">\n","<tr><td>best_epoch</td><td>14</td></tr><tr><td>best_val_loss</td><td>0.26861</td></tr><tr><td>loss</td><td>0.26835</td></tr><tr><td>accuracy</td><td>0.89093</td></tr><tr><td>val_loss</td><td>0.26861</td></tr><tr><td>_timestamp</td><td>1604816257</td></tr><tr><td>_step</td><td>29</td></tr><tr><td>epoch</td><td>14</td></tr><tr><td>_runtime</td><td>8973</td></tr><tr><td>val_accuracy</td><td>0.89545</td></tr></table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<h3>Run history:</h3><br/><style>\n","    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n","    </style><table class=\"wandb\">\n","<tr><td>epoch</td><td>▁▁▂▃▃▃▄▅▅▅▆▇▇▇█</td></tr><tr><td>loss</td><td>█▇▆▅▅▄▄▃▃▂▂▂▂▁▁</td></tr><tr><td>accuracy</td><td>▁▂▃▃▃▅▅▅▆▆▇▇▇██</td></tr><tr><td>val_loss</td><td>█▇▆▆▅▅▄▃▃▃▂▂▂▁▁</td></tr><tr><td>val_accuracy</td><td>▁▂▄▄▄▅▅▅▅▆▆▇▇██</td></tr><tr><td>_step</td><td>▁▁▂▃▃▃▄▅▅▅▆▇▇▇█</td></tr><tr><td>_runtime</td><td>▁▂▂▂▃▃▄▄▅▅▆▆▇▇█</td></tr><tr><td>_timestamp</td><td>▁▂▂▂▃▃▄▄▅▅▆▆▇▇█</td></tr></table><br/>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["Synced 5 W&B file(s), 1 media file(s), 0 artifact file(s) and 1 other file(s)"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["\n","                    <br/>Synced <strong style=\"color:#cdcd00\">CelebA LR-continue</strong>: <a href=\"https://wandb.ai/todayisagreatday/cz4042/runs/182ir845\" target=\"_blank\">https://wandb.ai/todayisagreatday/cz4042/runs/182ir845</a><br/>\n","                "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.9<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">CelebA LR-C2</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/todayisagreatday/cz4042\" target=\"_blank\">https://wandb.ai/todayisagreatday/cz4042</a><br/>\n","                Run page: <a href=\"https://wandb.ai/todayisagreatday/cz4042/runs/3h4r6us7\" target=\"_blank\">https://wandb.ai/todayisagreatday/cz4042/runs/3h4r6us7</a><br/>\n","                Run data is saved locally in <code>wandb/run-20201108_062204-3h4r6us7</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:41: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:42: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"],"name":"stderr"},{"output_type":"stream","text":["Found 9755 validated image filenames.\n","Found 2439 validated image filenames.\n","Model: \"sequential_2\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","mobilenetv2_1.00_224 (Functi (None, 1280)              2257984   \n","_________________________________________________________________\n","flatten_2 (Flatten)          (None, 1280)              0         \n","_________________________________________________________________\n","batch_normalization_8 (Batch (None, 1280)              5120      \n","_________________________________________________________________\n","dense_8 (Dense)              (None, 1024)              1311744   \n","_________________________________________________________________\n","batch_normalization_9 (Batch (None, 1024)              4096      \n","_________________________________________________________________\n","dense_9 (Dense)              (None, 512)               524800    \n","_________________________________________________________________\n","batch_normalization_10 (Batc (None, 512)               2048      \n","_________________________________________________________________\n","dense_10 (Dense)             (None, 512)               262656    \n","_________________________________________________________________\n","batch_normalization_11 (Batc (None, 512)               2048      \n","_________________________________________________________________\n","dense_11 (Dense)             (None, 1)                 513       \n","=================================================================\n","Total params: 4,371,009\n","Trainable params: 4,330,241\n","Non-trainable params: 40,768\n","_________________________________________________________________\n","Epoch 1/20\n","77/77 [==============================] - 157s 2s/step - loss: 0.2576 - accuracy: 0.8912 - val_loss: 0.2645 - val_accuracy: 0.8983\n","Epoch 2/20\n","77/77 [==============================] - 157s 2s/step - loss: 0.2539 - accuracy: 0.8936 - val_loss: 0.2601 - val_accuracy: 0.8987\n","Epoch 3/20\n","77/77 [==============================] - 157s 2s/step - loss: 0.2440 - accuracy: 0.8975 - val_loss: 0.2562 - val_accuracy: 0.9000\n","Epoch 4/20\n","77/77 [==============================] - 153s 2s/step - loss: 0.2408 - accuracy: 0.8977 - val_loss: 0.2532 - val_accuracy: 0.9016\n","Epoch 5/20\n","77/77 [==============================] - 149s 2s/step - loss: 0.2389 - accuracy: 0.8971 - val_loss: 0.2503 - val_accuracy: 0.9032\n","Epoch 6/20\n","77/77 [==============================] - 149s 2s/step - loss: 0.2313 - accuracy: 0.9006 - val_loss: 0.2476 - val_accuracy: 0.9045\n","Epoch 7/20\n","77/77 [==============================] - 149s 2s/step - loss: 0.2277 - accuracy: 0.8998 - val_loss: 0.2450 - val_accuracy: 0.9053\n","Epoch 8/20\n","77/77 [==============================] - 149s 2s/step - loss: 0.2224 - accuracy: 0.9028 - val_loss: 0.2428 - val_accuracy: 0.9065\n","Epoch 9/20\n","77/77 [==============================] - 152s 2s/step - loss: 0.2171 - accuracy: 0.9039 - val_loss: 0.2402 - val_accuracy: 0.9082\n","Epoch 10/20\n","77/77 [==============================] - 154s 2s/step - loss: 0.2189 - accuracy: 0.9038 - val_loss: 0.2382 - val_accuracy: 0.9102\n","Epoch 11/20\n","77/77 [==============================] - 156s 2s/step - loss: 0.2100 - accuracy: 0.9066 - val_loss: 0.2369 - val_accuracy: 0.9094\n","Epoch 12/20\n","77/77 [==============================] - 154s 2s/step - loss: 0.2069 - accuracy: 0.9075 - val_loss: 0.2351 - val_accuracy: 0.9102\n","Epoch 13/20\n","77/77 [==============================] - 155s 2s/step - loss: 0.2072 - accuracy: 0.9093 - val_loss: 0.2335 - val_accuracy: 0.9098\n","Epoch 14/20\n","77/77 [==============================] - 157s 2s/step - loss: 0.2012 - accuracy: 0.9100 - val_loss: 0.2320 - val_accuracy: 0.9110\n","Epoch 15/20\n","77/77 [==============================] - 158s 2s/step - loss: 0.2008 - accuracy: 0.9130 - val_loss: 0.2304 - val_accuracy: 0.9123\n","Epoch 16/20\n","77/77 [==============================] - 160s 2s/step - loss: 0.1968 - accuracy: 0.9133 - val_loss: 0.2292 - val_accuracy: 0.9139\n","Epoch 17/20\n","77/77 [==============================] - 160s 2s/step - loss: 0.1961 - accuracy: 0.9131 - val_loss: 0.2282 - val_accuracy: 0.9131\n","Epoch 18/20\n","77/77 [==============================] - 161s 2s/step - loss: 0.1921 - accuracy: 0.9134 - val_loss: 0.2270 - val_accuracy: 0.9139\n","Epoch 19/20\n","77/77 [==============================] - 158s 2s/step - loss: 0.1873 - accuracy: 0.9172 - val_loss: 0.2263 - val_accuracy: 0.9143\n","Epoch 20/20\n","77/77 [==============================] - 159s 2s/step - loss: 0.1865 - accuracy: 0.9178 - val_loss: 0.2248 - val_accuracy: 0.9147\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"awQnqIQh9pLL"},"source":[""],"execution_count":null,"outputs":[]}]}