{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"mobilenetv2_celeba_v4","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMV6N3u6Q54ilh4DrVW+jBk"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"6f1d5dbcdaf946e999421c59b3450cea":{"model_module":"@jupyter-widgets/controls","model_name":"VBoxModel","state":{"_view_name":"VBoxView","_dom_classes":[],"_model_name":"VBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_1db8dfbe1d4f49fea850c424c62f45db","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_62f1fd4b39ab48e39bfb4fe4a154b8db","IPY_MODEL_6e5345c323b1480891fd2928a17b9788"]}},"1db8dfbe1d4f49fea850c424c62f45db":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"62f1fd4b39ab48e39bfb4fe4a154b8db":{"model_module":"@jupyter-widgets/controls","model_name":"LabelModel","state":{"_view_name":"LabelView","style":"IPY_MODEL_7e7fd0ffac6e416398ebec8f666a9749","_dom_classes":[],"description":"","_model_name":"LabelModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 0.01MB of 0.01MB uploaded (0.00MB deduped)\r","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_1b5a509a4c984f4c9c97b96920e9bfd8"}},"6e5345c323b1480891fd2928a17b9788":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_79a9faf27c044aa8ac4d803d8011ca86","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_373c09eb69c24becb0d3307371d278d9"}},"7e7fd0ffac6e416398ebec8f666a9749":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"1b5a509a4c984f4c9c97b96920e9bfd8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"79a9faf27c044aa8ac4d803d8011ca86":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"373c09eb69c24becb0d3307371d278d9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"code","metadata":{"id":"T2IvTdM77oii","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605756231557,"user_tz":-480,"elapsed":10693,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"43d7505f-d8f0-4e1a-d952-4a09c7877f80"},"source":["!pip install wandb -qqq"],"execution_count":1,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 1.8MB 9.2MB/s \n","\u001b[K     |████████████████████████████████| 133kB 30.4MB/s \n","\u001b[K     |████████████████████████████████| 163kB 19.5MB/s \n","\u001b[K     |████████████████████████████████| 102kB 9.5MB/s \n","\u001b[K     |████████████████████████████████| 102kB 12.0MB/s \n","\u001b[K     |████████████████████████████████| 71kB 11.3MB/s \n","\u001b[?25h  Building wheel for watchdog (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for subprocess32 (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GqyCQTBf8gqO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605756296798,"user_tz":-480,"elapsed":75891,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"9949d52c-0c72-46f9-9261-9d19c9456f37"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5CBaAkSa7_IT","colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["6f1d5dbcdaf946e999421c59b3450cea","1db8dfbe1d4f49fea850c424c62f45db","62f1fd4b39ab48e39bfb4fe4a154b8db","6e5345c323b1480891fd2928a17b9788","7e7fd0ffac6e416398ebec8f666a9749","1b5a509a4c984f4c9c97b96920e9bfd8","79a9faf27c044aa8ac4d803d8011ca86","373c09eb69c24becb0d3307371d278d9"]},"executionInfo":{"status":"ok","timestamp":1605768045831,"user_tz":-480,"elapsed":11241697,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"2eec7551-a589-4deb-fa7d-4dd4034c4c63"},"source":["import wandb\n","from wandb.keras import WandbCallback\n","import numpy as np\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","import pandas as pd\n","import tensorflow as tf\n","from sklearn.model_selection import train_test_split\n","\n","# GPU Configuration\n","gpus = tf.config.experimental.list_physical_devices('GPU')\n","if gpus:\n","    try:\n","        for gpu in gpus:\n","            tf.config.experimental.set_memory_growth(gpu, True)\n","        logical_gpus = tf.config.experimental.list_logical_devices('GPU')\n","        print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPUs\")\n","    except RuntimeError as e:\n","        print(e)\n","\n","# Hyperparameters\n","defaults = {\n","    'epochs': 45,\n","    'batch_size': 128,\n","    'fc1_num_neurons': 1024,\n","    'fc2_num_neurons': 512,\n","    'fc3_num_neurons': 256,\n","    'seed': 7,\n","    'learning_rate': 1e-5,\n","    'optimizer': 'adam',\n","    'hidden_activation': 'relu',\n","    'output_activation': 'sigmoid',\n","    'loss_function': 'binary_crossentropy',\n","    'metrics': ['accuracy'],\n","}\n","\n","wandb.init(config=defaults, resume=True, name='No Val Part 2', project='transfer_learning_mnv2', notes='unfreeze model')\n","config = wandb.config\n","np.random.seed(config.seed)\n","tf.random.set_seed(config.seed)\n","\n","\n","# Load dataset as dataframe\n","df = pd.read_csv(\"/content/drive/My Drive/Y4 Sem 1/NN Project/aligned_gender.txt\", sep='\\t')\n","train_df, test_df = train_test_split(df, test_size=0.2)\n","train_df['datadir'] = '/content/drive/My Drive/Y4 Sem 1/NN Project/' + train_df['datadir'].astype(str)\n","test_df['datadir'] = '/content/drive/My Drive/Y4 Sem 1/NN Project/' + test_df['datadir'].astype(str)\n","\n","# Load images into keras image generator \n","datagen_train = ImageDataGenerator(\n","    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input,\n",")\n","datagen_test = ImageDataGenerator(\n","    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input,\n",")\n","\n","train_generator = datagen_train.flow_from_dataframe(\n","    dataframe=train_df,\n","    x_col='datadir',\n","    y_col='gender',\n","    batch_size=config.batch_size,\n","    seed=config.seed,\n","    shuffle=True,\n","    class_mode='raw',\n","    target_size=(224,224),\n",")\n","\n","test_generator = datagen_test.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='datadir',\n","    y_col='gender',\n","    batch_size=config.batch_size,\n","    seed=config.seed,\n","    shuffle=True,\n","    class_mode='raw',\n","    target_size=(224,224),\n",")\n","\n","# Define model\n","mobile_net_v2 = tf.keras.applications.MobileNetV2(\n","    include_top=False,\n","    pooling='avg',\n","    weights=None,\n","    input_shape=(224,224,3),\n",")\n","\n","# Set mobilenetv2 to true\n","mobile_net_v2.trainable = False\n","\n","fc1 = tf.keras.layers.Dense(\n","    config.fc1_num_neurons,\n","    activation=config.hidden_activation,\n",")\n","\n","fc2 = tf.keras.layers.Dense(\n","    config.fc2_num_neurons,\n","    activation=config.hidden_activation,\n",")\n","\n","fc3 = tf.keras.layers.Dense(\n","    config.fc2_num_neurons,\n","    activation=config.hidden_activation,\n",")\n","\n","bn1 = tf.keras.layers.BatchNormalization()\n","bn2 = tf.keras.layers.BatchNormalization()\n","bn3 = tf.keras.layers.BatchNormalization()\n","bn4 = tf.keras.layers.BatchNormalization()\n","\n","model = tf.keras.models.Sequential([\n","    mobile_net_v2,\n","    tf.keras.layers.Flatten(),\n","    bn1,\n","    fc1,\n","    bn2,\n","    fc2,\n","    bn3,\n","    fc3,\n","    bn4,\n","    tf.keras.layers.Dense(1, activation=config.output_activation),\n","])\n","\n","# Load model weights\n","model.load_weights('/content/drive/My Drive/Y4 Sem 1/NN Project/pretrained_adience_v4.h5')\n","mobile_net_v2.trainable = True\n","model.summary()\n","\n","# Compile model \n","model.compile(\n","    optimizer=tf.keras.optimizers.Adam(learning_rate=config.learning_rate),\n","    loss=config.loss_function,\n","    metrics=config.metrics,\n",")\n","\n","# Fit model\n","model.fit(\n","    train_generator,\n","    validation_data=test_generator,\n","    epochs=config.epochs,\n","    callbacks=[WandbCallback()],\n",")\n","model.save_weights('pretrained_adience_v4_cont.h5') "],"execution_count":7,"outputs":[{"output_type":"stream","text":["1 Physical GPUs, 1 Logical GPUs\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["Finishing last run (ID:1q05okkz) before initializing another..."],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<br/>Waiting for W&B process to finish, PID 475<br/>Program ended successfully."],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"6f1d5dbcdaf946e999421c59b3450cea","version_minor":0,"version_major":2},"text/plain":["VBox(children=(Label(value=' 0.00MB of 0.00MB uploaded (0.00MB deduped)\\r'), FloatProgress(value=1.0, max=1.0)…"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["Find user logs for this run at: <code>/content/wandb/run-20201119_032943-1q05okkz/logs/debug.log</code>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["Find internal logs for this run at: <code>/content/wandb/run-20201119_032943-1q05okkz/logs/debug-internal.log</code>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 0 other file(s)"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["\n","                    <br/>Synced <strong style=\"color:#cdcd00\">No Val Part 2</strong>: <a href=\"https://wandb.ai/todayisagreatday/transfer_learning_mnv2/runs/1q05okkz\" target=\"_blank\">https://wandb.ai/todayisagreatday/transfer_learning_mnv2/runs/1q05okkz</a><br/>\n","                "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["...Successfully finished last run (ID:1q05okkz). Initializing new run:<br/><br/>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.11<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">No Val Part 2</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/todayisagreatday/transfer_learning_mnv2\" target=\"_blank\">https://wandb.ai/todayisagreatday/transfer_learning_mnv2</a><br/>\n","                Run page: <a href=\"https://wandb.ai/todayisagreatday/transfer_learning_mnv2/runs/1wwmy25l\" target=\"_blank\">https://wandb.ai/todayisagreatday/transfer_learning_mnv2/runs/1wwmy25l</a><br/>\n","                Run data is saved locally in <code>/content/wandb/run-20201119_033323-1wwmy25l</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:45: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:46: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"],"name":"stderr"},{"output_type":"stream","text":["Found 9755 validated image filenames.\n","Found 2439 validated image filenames.\n","Model: \"sequential_4\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","mobilenetv2_1.00_224 (Functi (None, 1280)              2257984   \n","_________________________________________________________________\n","flatten_4 (Flatten)          (None, 1280)              0         \n","_________________________________________________________________\n","batch_normalization_16 (Batc (None, 1280)              5120      \n","_________________________________________________________________\n","dense_16 (Dense)             (None, 1024)              1311744   \n","_________________________________________________________________\n","batch_normalization_17 (Batc (None, 1024)              4096      \n","_________________________________________________________________\n","dense_17 (Dense)             (None, 512)               524800    \n","_________________________________________________________________\n","batch_normalization_18 (Batc (None, 512)               2048      \n","_________________________________________________________________\n","dense_18 (Dense)             (None, 512)               262656    \n","_________________________________________________________________\n","batch_normalization_19 (Batc (None, 512)               2048      \n","_________________________________________________________________\n","dense_19 (Dense)             (None, 1)                 513       \n","=================================================================\n","Total params: 4,371,009\n","Trainable params: 4,330,241\n","Non-trainable params: 40,768\n","_________________________________________________________________\n","Epoch 1/45\n","77/77 [==============================] - 4295s 56s/step - loss: 0.5121 - accuracy: 0.7725 - val_loss: 0.4588 - val_accuracy: 0.7975\n","Epoch 2/45\n","77/77 [==============================] - 152s 2s/step - loss: 0.4732 - accuracy: 0.7861 - val_loss: 0.4470 - val_accuracy: 0.8032\n","Epoch 3/45\n","77/77 [==============================] - 151s 2s/step - loss: 0.4474 - accuracy: 0.7964 - val_loss: 0.4337 - val_accuracy: 0.8134\n","Epoch 4/45\n","77/77 [==============================] - 153s 2s/step - loss: 0.4275 - accuracy: 0.8035 - val_loss: 0.4200 - val_accuracy: 0.8196\n","Epoch 5/45\n","77/77 [==============================] - 153s 2s/step - loss: 0.4070 - accuracy: 0.8149 - val_loss: 0.4084 - val_accuracy: 0.8266\n","Epoch 6/45\n","77/77 [==============================] - 154s 2s/step - loss: 0.3942 - accuracy: 0.8204 - val_loss: 0.3981 - val_accuracy: 0.8303\n","Epoch 7/45\n","77/77 [==============================] - 153s 2s/step - loss: 0.3834 - accuracy: 0.8274 - val_loss: 0.3891 - val_accuracy: 0.8352\n","Epoch 8/45\n","77/77 [==============================] - 153s 2s/step - loss: 0.3692 - accuracy: 0.8323 - val_loss: 0.3796 - val_accuracy: 0.8380\n","Epoch 9/45\n","77/77 [==============================] - 152s 2s/step - loss: 0.3567 - accuracy: 0.8395 - val_loss: 0.3708 - val_accuracy: 0.8454\n","Epoch 10/45\n","77/77 [==============================] - 152s 2s/step - loss: 0.3471 - accuracy: 0.8454 - val_loss: 0.3623 - val_accuracy: 0.8479\n","Epoch 11/45\n","77/77 [==============================] - 152s 2s/step - loss: 0.3362 - accuracy: 0.8495 - val_loss: 0.3543 - val_accuracy: 0.8516\n","Epoch 12/45\n","77/77 [==============================] - 152s 2s/step - loss: 0.3264 - accuracy: 0.8533 - val_loss: 0.3473 - val_accuracy: 0.8540\n","Epoch 13/45\n","77/77 [==============================] - 152s 2s/step - loss: 0.3191 - accuracy: 0.8575 - val_loss: 0.3410 - val_accuracy: 0.8573\n","Epoch 14/45\n","77/77 [==============================] - 151s 2s/step - loss: 0.3098 - accuracy: 0.8603 - val_loss: 0.3352 - val_accuracy: 0.8598\n","Epoch 15/45\n","77/77 [==============================] - 151s 2s/step - loss: 0.3030 - accuracy: 0.8653 - val_loss: 0.3289 - val_accuracy: 0.8614\n","Epoch 16/45\n","77/77 [==============================] - 153s 2s/step - loss: 0.2961 - accuracy: 0.8696 - val_loss: 0.3242 - val_accuracy: 0.8635\n","Epoch 17/45\n","77/77 [==============================] - 151s 2s/step - loss: 0.2874 - accuracy: 0.8715 - val_loss: 0.3195 - val_accuracy: 0.8667\n","Epoch 18/45\n","77/77 [==============================] - 152s 2s/step - loss: 0.2871 - accuracy: 0.8698 - val_loss: 0.3150 - val_accuracy: 0.8700\n","Epoch 19/45\n","77/77 [==============================] - 152s 2s/step - loss: 0.2764 - accuracy: 0.8775 - val_loss: 0.3113 - val_accuracy: 0.8729\n","Epoch 20/45\n","77/77 [==============================] - 152s 2s/step - loss: 0.2711 - accuracy: 0.8829 - val_loss: 0.3073 - val_accuracy: 0.8754\n","Epoch 21/45\n","77/77 [==============================] - 152s 2s/step - loss: 0.2648 - accuracy: 0.8844 - val_loss: 0.3032 - val_accuracy: 0.8770\n","Epoch 22/45\n","77/77 [==============================] - 153s 2s/step - loss: 0.2599 - accuracy: 0.8859 - val_loss: 0.2996 - val_accuracy: 0.8790\n","Epoch 23/45\n","77/77 [==============================] - 153s 2s/step - loss: 0.2533 - accuracy: 0.8888 - val_loss: 0.2954 - val_accuracy: 0.8803\n","Epoch 24/45\n","77/77 [==============================] - 153s 2s/step - loss: 0.2483 - accuracy: 0.8921 - val_loss: 0.2922 - val_accuracy: 0.8848\n","Epoch 25/45\n","77/77 [==============================] - 154s 2s/step - loss: 0.2439 - accuracy: 0.8947 - val_loss: 0.2887 - val_accuracy: 0.8848\n","Epoch 26/45\n","77/77 [==============================] - 155s 2s/step - loss: 0.2430 - accuracy: 0.8962 - val_loss: 0.2852 - val_accuracy: 0.8872\n","Epoch 27/45\n","77/77 [==============================] - 154s 2s/step - loss: 0.2328 - accuracy: 0.8999 - val_loss: 0.2820 - val_accuracy: 0.8909\n","Epoch 28/45\n","77/77 [==============================] - 155s 2s/step - loss: 0.2306 - accuracy: 0.9013 - val_loss: 0.2789 - val_accuracy: 0.8930\n","Epoch 29/45\n","77/77 [==============================] - 155s 2s/step - loss: 0.2268 - accuracy: 0.9028 - val_loss: 0.2765 - val_accuracy: 0.8938\n","Epoch 30/45\n","77/77 [==============================] - 155s 2s/step - loss: 0.2227 - accuracy: 0.9060 - val_loss: 0.2749 - val_accuracy: 0.8942\n","Epoch 31/45\n","77/77 [==============================] - 156s 2s/step - loss: 0.2165 - accuracy: 0.9076 - val_loss: 0.2716 - val_accuracy: 0.8946\n","Epoch 32/45\n","77/77 [==============================] - 155s 2s/step - loss: 0.2143 - accuracy: 0.9081 - val_loss: 0.2694 - val_accuracy: 0.8959\n","Epoch 33/45\n","77/77 [==============================] - 154s 2s/step - loss: 0.2084 - accuracy: 0.9120 - val_loss: 0.2678 - val_accuracy: 0.8971\n","Epoch 34/45\n","77/77 [==============================] - 153s 2s/step - loss: 0.2039 - accuracy: 0.9155 - val_loss: 0.2661 - val_accuracy: 0.9004\n","Epoch 35/45\n","77/77 [==============================] - 151s 2s/step - loss: 0.2005 - accuracy: 0.9155 - val_loss: 0.2644 - val_accuracy: 0.8995\n","Epoch 36/45\n","77/77 [==============================] - 151s 2s/step - loss: 0.1996 - accuracy: 0.9168 - val_loss: 0.2629 - val_accuracy: 0.8995\n","Epoch 37/45\n","77/77 [==============================] - 154s 2s/step - loss: 0.1954 - accuracy: 0.9183 - val_loss: 0.2613 - val_accuracy: 0.9000\n","Epoch 38/45\n","77/77 [==============================] - 154s 2s/step - loss: 0.1911 - accuracy: 0.9225 - val_loss: 0.2596 - val_accuracy: 0.9008\n","Epoch 39/45\n","77/77 [==============================] - 152s 2s/step - loss: 0.1869 - accuracy: 0.9240 - val_loss: 0.2586 - val_accuracy: 0.9028\n","Epoch 40/45\n","77/77 [==============================] - 152s 2s/step - loss: 0.1845 - accuracy: 0.9253 - val_loss: 0.2570 - val_accuracy: 0.9028\n","Epoch 41/45\n","77/77 [==============================] - 151s 2s/step - loss: 0.1806 - accuracy: 0.9263 - val_loss: 0.2557 - val_accuracy: 0.9041\n","Epoch 42/45\n","77/77 [==============================] - 151s 2s/step - loss: 0.1780 - accuracy: 0.9273 - val_loss: 0.2542 - val_accuracy: 0.9036\n","Epoch 43/45\n","77/77 [==============================] - 151s 2s/step - loss: 0.1717 - accuracy: 0.9322 - val_loss: 0.2534 - val_accuracy: 0.9053\n","Epoch 44/45\n","77/77 [==============================] - 151s 2s/step - loss: 0.1699 - accuracy: 0.9320 - val_loss: 0.2524 - val_accuracy: 0.9053\n","Epoch 45/45\n","77/77 [==============================] - 151s 2s/step - loss: 0.1665 - accuracy: 0.9325 - val_loss: 0.2515 - val_accuracy: 0.9061\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"awQnqIQh9pLL"},"source":[""],"execution_count":null,"outputs":[]}]}