{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"mobilenetv2_celeba_v1","provenance":[],"authorship_tag":"ABX9TyMXUguk+BhUGk9RwYhAuRXq"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"35d7685b2dec43fea30f44e5458a8838":{"model_module":"@jupyter-widgets/controls","model_name":"VBoxModel","state":{"_view_name":"VBoxView","_dom_classes":[],"_model_name":"VBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_929c16cd29894114bf6adaf528928381","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_ad07b99d191c48988cddd7b89badeb9e","IPY_MODEL_36926e7c8e93468f82902b430852536e"]}},"929c16cd29894114bf6adaf528928381":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"ad07b99d191c48988cddd7b89badeb9e":{"model_module":"@jupyter-widgets/controls","model_name":"LabelModel","state":{"_view_name":"LabelView","style":"IPY_MODEL_1b7782c670b54a27a6c20fc1082795da","_dom_classes":[],"description":"","_model_name":"LabelModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 33.16MB of 33.16MB uploaded (0.00MB deduped)\r","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_b82fd144737241429b26879e3e942196"}},"36926e7c8e93468f82902b430852536e":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_37585d4fea9b433eaa004a5a87f5b69c","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_8309c1c35939493486affd55523c9a43"}},"1b7782c670b54a27a6c20fc1082795da":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"b82fd144737241429b26879e3e942196":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"37585d4fea9b433eaa004a5a87f5b69c":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"8309c1c35939493486affd55523c9a43":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"code","metadata":{"id":"T2IvTdM77oii","executionInfo":{"status":"ok","timestamp":1604505539059,"user_tz":-480,"elapsed":4207,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}}},"source":["!pip install wandb -qqq"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"GqyCQTBf8gqO","executionInfo":{"status":"ok","timestamp":1604505577861,"user_tz":-480,"elapsed":1078,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"373a9721-6c1d-4b0e-9966-5e79c46cf31c","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5CBaAkSa7_IT","executionInfo":{"status":"ok","timestamp":1604514220068,"user_tz":-480,"elapsed":2479181,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"2733dad4-b440-47ca-f770-9263c394d8f3","colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["35d7685b2dec43fea30f44e5458a8838","929c16cd29894114bf6adaf528928381","ad07b99d191c48988cddd7b89badeb9e","36926e7c8e93468f82902b430852536e","1b7782c670b54a27a6c20fc1082795da","b82fd144737241429b26879e3e942196","37585d4fea9b433eaa004a5a87f5b69c","8309c1c35939493486affd55523c9a43"]}},"source":["import wandb\n","from wandb.keras import WandbCallback\n","import numpy as np\n","from tensorflow.keras.applications.resnet50 import preprocess_input\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.preprocessing.image import load_img, img_to_array\n","import pandas as pd\n","import tensorflow as tf\n","from sklearn.model_selection import train_test_split\n","\n","# GPU Configuration\n","gpus = tf.config.experimental.list_physical_devices('GPU')\n","if gpus:\n","    try:\n","        for gpu in gpus:\n","            tf.config.experimental.set_memory_growth(gpu, True)\n","        logical_gpus = tf.config.experimental.list_logical_devices('GPU')\n","        print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPUs\")\n","    except RuntimeError as e:\n","        print(e)\n","\n","defaults = {\n","    'epochs': 15,\n","    'batch_size': 128,\n","    'fc1_num_neurons': 1024,\n","    'fc2_num_neurons': 512,\n","    'fc3_num_neurons': 256,\n","    'seed': 7,\n","    'learning_rate': 1e-3,\n","    'optimizer': 'adam',\n","    'hidden_activation': 'relu',\n","    'output_activation': 'sigmoid',\n","    'loss_function': 'binary_crossentropy',\n","    'metrics': ['accuracy'],\n","}\n","\n","WANDB_API_KEY=\"aa601783a9e0b5f4bde1480428fb5318ad3dc0f2\"\n","wandb.init(config=defaults, resume=True, name='MobilenetV2', project='cz4042', notes='pretrained with celeba')\n","config = wandb.config\n","\n","# Load dataset as dataframe\n","df = pd.read_csv(\"/content/drive/My Drive/Y4 Sem 1/NN Project/aligned_gender.txt\", sep='\\t')\n","train_df, test_df = train_test_split(df, test_size=0.2)\n","train_df['datadir'] = '/content/drive/My Drive/Y4 Sem 1/NN Project/' + train_df['datadir'].astype(str)\n","test_df['datadir'] = '/content/drive/My Drive/Y4 Sem 1/NN Project/' + test_df['datadir'].astype(str)\n","\n","# Load images into keras image generator \n","datagen_train = ImageDataGenerator(\n","    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input,\n",")\n","datagen_test = ImageDataGenerator(\n","    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input,\n",")\n","\n","train_generator = datagen_train.flow_from_dataframe(\n","    dataframe=train_df,\n","    x_col='datadir',\n","    y_col='gender',\n","    batch_size=config.batch_size,\n","    seed=config.seed,\n","    shuffle=True,\n","    class_mode='raw',\n","    target_size=(224,224),\n",")\n","\n","test_generator = datagen_test.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='datadir',\n","    y_col='gender',\n","    batch_size=config.batch_size,\n","    seed=config.seed,\n","    shuffle=True,\n","    class_mode='raw',\n","    target_size=(224,224),\n",")\n","\n","# Define model\n","mobile_net_v2 = tf.keras.applications.MobileNetV2(\n","    include_top=False,\n","    pooling='avg',\n","    weights=None,\n","    input_shape=(224,224,3),\n",")\n","\n","# Set mobilenetv2 to true (to match CelebA architecture, we turn it off later)\n","mobile_net_v2.trainable = True\n","\n","fc1 = tf.keras.layers.Dense(\n","    config.fc1_num_neurons,\n","    activation=config.hidden_activation,\n",")\n","\n","fc2 = tf.keras.layers.Dense(\n","    config.fc2_num_neurons,\n","    activation=config.hidden_activation,\n",")\n","\n","fc3 = tf.keras.layers.Dense(\n","    config.fc2_num_neurons,\n","    activation=config.hidden_activation,\n",")\n","\n","model = tf.keras.models.Sequential([\n","    mobile_net_v2,\n","    tf.keras.layers.Flatten(),\n","    tf.keras.layers.BatchNormalization(),\n","    fc1,\n","    tf.keras.layers.BatchNormalization(),\n","    fc2,\n","    tf.keras.layers.BatchNormalization(),\n","    fc3,\n","    tf.keras.layers.BatchNormalization(),\n","    tf.keras.layers.Dense(1, activation=config.output_activation),\n","])\n","# Load model weights\n","model.load_weights('/content/drive/My Drive/Y4 Sem 1/NN Project/model_celeba.h5')\n","# Set trainable weights to false again\n","mobile_net_v2.trainable = False\n","model.summary()\n","\n","# Compile model \n","model.compile(\n","    optimizer=tf.keras.optimizers.Adam(learning_rate=config.learning_rate),\n","    loss=config.loss_function,\n","    metrics=config.metrics,\n",")\n","\n","model.fit(\n","    train_generator,\n","    validation_data=test_generator,\n","    epochs=config.epochs,\n","    callbacks=[WandbCallback()],\n",")\n","model.save_weights('pretrained_adience_v1.h5') \n","# run.finish()"],"execution_count":10,"outputs":[{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m Calling wandb.login() after wandb.init() has no effect.\n"],"name":"stderr"},{"output_type":"stream","text":["1 Physical GPUs, 1 Logical GPUs\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<br/>Waiting for W&B process to finish, PID 1032<br/>Program ended successfully."],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"35d7685b2dec43fea30f44e5458a8838","version_minor":0,"version_major":2},"text/plain":["VBox(children=(Label(value=' 33.09MB of 33.09MB uploaded (0.00MB deduped)\\r'), FloatProgress(value=1.0, max=1.…"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["Find user logs for this run at: <code>wandb/run-20201104_163426-g3o1805c/logs/debug.log</code>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["Find internal logs for this run at: <code>wandb/run-20201104_163426-g3o1805c/logs/debug-internal.log</code>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<h3>Run summary:</h3><br/><style>\n","    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n","    </style><table class=\"wandb\">\n","<tr><td>epoch</td><td>4</td></tr><tr><td>loss</td><td>0.49489</td></tr><tr><td>accuracy</td><td>0.75469</td></tr><tr><td>val_loss</td><td>0.51521</td></tr><tr><td>val_accuracy</td><td>0.74621</td></tr><tr><td>_step</td><td>4</td></tr><tr><td>_runtime</td><td>4042</td></tr><tr><td>_timestamp</td><td>1604511711</td></tr><tr><td>best_val_loss</td><td>0.51521</td></tr><tr><td>best_epoch</td><td>4</td></tr></table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<h3>Run history:</h3><br/><style>\n","    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n","    </style><table class=\"wandb\">\n","<tr><td>epoch</td><td>▁▃▅▆█</td></tr><tr><td>loss</td><td>█▁▁▁▁</td></tr><tr><td>accuracy</td><td>▁▆▇█▇</td></tr><tr><td>val_loss</td><td>█▄▁▂▁</td></tr><tr><td>val_accuracy</td><td>▁▇███</td></tr><tr><td>_step</td><td>▁▃▅▆█</td></tr><tr><td>_runtime</td><td>▁▃▅▆█</td></tr><tr><td>_timestamp</td><td>▁▃▅▆█</td></tr></table><br/>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["Synced 5 W&B file(s), 1 media file(s), 0 artifact file(s) and 1 other file(s)"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["\n","                    <br/>Synced <strong style=\"color:#cdcd00\">MobilenetV2</strong>: <a href=\"https://wandb.ai/todayisagreatday/cz4042/runs/g3o1805c\" target=\"_blank\">https://wandb.ai/todayisagreatday/cz4042/runs/g3o1805c</a><br/>\n","                "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.8<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">MobilenetV2</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/todayisagreatday/cz4042\" target=\"_blank\">https://wandb.ai/todayisagreatday/cz4042</a><br/>\n","                Run page: <a href=\"https://wandb.ai/todayisagreatday/cz4042/runs/23njc7sx\" target=\"_blank\">https://wandb.ai/todayisagreatday/cz4042/runs/23njc7sx</a><br/>\n","                Run data is saved locally in <code>wandb/run-20201104_174221-23njc7sx</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:44: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:45: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"],"name":"stderr"},{"output_type":"stream","text":["Found 9755 validated image filenames.\n","Found 2439 validated image filenames.\n","Model: \"sequential_5\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","mobilenetv2_1.00_224 (Functi (None, 1280)              2257984   \n","_________________________________________________________________\n","flatten_5 (Flatten)          (None, 1280)              0         \n","_________________________________________________________________\n","batch_normalization_20 (Batc (None, 1280)              5120      \n","_________________________________________________________________\n","dense_20 (Dense)             (None, 1024)              1311744   \n","_________________________________________________________________\n","batch_normalization_21 (Batc (None, 1024)              4096      \n","_________________________________________________________________\n","dense_21 (Dense)             (None, 512)               524800    \n","_________________________________________________________________\n","batch_normalization_22 (Batc (None, 512)               2048      \n","_________________________________________________________________\n","dense_22 (Dense)             (None, 512)               262656    \n","_________________________________________________________________\n","batch_normalization_23 (Batc (None, 512)               2048      \n","_________________________________________________________________\n","dense_23 (Dense)             (None, 1)                 513       \n","=================================================================\n","Total params: 4,371,009\n","Trainable params: 2,106,369\n","Non-trainable params: 2,264,640\n","_________________________________________________________________\n","Epoch 1/15\n","77/77 [==============================] - 161s 2s/step - loss: 0.7231 - accuracy: 0.7444 - val_loss: 0.5879 - val_accuracy: 0.6593\n","Epoch 2/15\n","77/77 [==============================] - 163s 2s/step - loss: 0.5026 - accuracy: 0.7480 - val_loss: 0.5380 - val_accuracy: 0.7384\n","Epoch 3/15\n","77/77 [==============================] - 162s 2s/step - loss: 0.4999 - accuracy: 0.7515 - val_loss: 0.5201 - val_accuracy: 0.7413\n","Epoch 4/15\n","77/77 [==============================] - 163s 2s/step - loss: 0.4961 - accuracy: 0.7524 - val_loss: 0.5123 - val_accuracy: 0.7401\n","Epoch 5/15\n","77/77 [==============================] - 162s 2s/step - loss: 0.4938 - accuracy: 0.7518 - val_loss: 0.5116 - val_accuracy: 0.7425\n","Epoch 6/15\n","77/77 [==============================] - 162s 2s/step - loss: 0.4930 - accuracy: 0.7561 - val_loss: 0.5115 - val_accuracy: 0.7450\n","Epoch 7/15\n","77/77 [==============================] - 163s 2s/step - loss: 0.4874 - accuracy: 0.7597 - val_loss: 0.5085 - val_accuracy: 0.7495\n","Epoch 8/15\n","77/77 [==============================] - 161s 2s/step - loss: 0.4807 - accuracy: 0.7679 - val_loss: 0.5120 - val_accuracy: 0.7474\n","Epoch 9/15\n","77/77 [==============================] - 163s 2s/step - loss: 0.4685 - accuracy: 0.7723 - val_loss: 0.4956 - val_accuracy: 0.7548\n","Epoch 10/15\n","77/77 [==============================] - 162s 2s/step - loss: 0.4654 - accuracy: 0.7777 - val_loss: 0.4904 - val_accuracy: 0.7675\n","Epoch 11/15\n","77/77 [==============================] - 162s 2s/step - loss: 0.4608 - accuracy: 0.7821 - val_loss: 0.4843 - val_accuracy: 0.7634\n","Epoch 12/15\n","77/77 [==============================] - 161s 2s/step - loss: 0.4559 - accuracy: 0.7840 - val_loss: 0.4722 - val_accuracy: 0.7749\n","Epoch 13/15\n","77/77 [==============================] - 162s 2s/step - loss: 0.4541 - accuracy: 0.7851 - val_loss: 0.4660 - val_accuracy: 0.7823\n","Epoch 14/15\n","77/77 [==============================] - 161s 2s/step - loss: 0.4489 - accuracy: 0.7871 - val_loss: 0.4528 - val_accuracy: 0.7852\n","Epoch 15/15\n","77/77 [==============================] - 161s 2s/step - loss: 0.4480 - accuracy: 0.7892 - val_loss: 0.4557 - val_accuracy: 0.7868\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"awQnqIQh9pLL"},"source":[""],"execution_count":null,"outputs":[]}]}