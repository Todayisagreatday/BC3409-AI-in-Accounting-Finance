{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"mobilenetv2_celeba_v3","provenance":[],"authorship_tag":"ABX9TyMb+EB8hWXgKV4/8pHkoe4h"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"T2IvTdM77oii","executionInfo":{"status":"ok","timestamp":1604649322983,"user_tz":-480,"elapsed":10251,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"b8ea0146-c0f9-4c8d-c848-af498360312d","colab":{"base_uri":"https://localhost:8080/"}},"source":["!pip install wandb -qqq"],"execution_count":1,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 1.8MB 5.4MB/s \n","\u001b[K     |████████████████████████████████| 102kB 9.7MB/s \n","\u001b[K     |████████████████████████████████| 133kB 18.0MB/s \n","\u001b[K     |████████████████████████████████| 102kB 9.9MB/s \n","\u001b[K     |████████████████████████████████| 163kB 18.3MB/s \n","\u001b[K     |████████████████████████████████| 71kB 8.8MB/s \n","\u001b[?25h  Building wheel for subprocess32 (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for watchdog (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GqyCQTBf8gqO","executionInfo":{"status":"ok","timestamp":1604649514472,"user_tz":-480,"elapsed":40913,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"6e7aa4a7-3f38-4ec3-cd32-9d99e9b5a63d","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5CBaAkSa7_IT","executionInfo":{"status":"ok","timestamp":1604655609496,"user_tz":-480,"elapsed":6007389,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"cec01daf-8641-46ed-d198-2477fabd15b2","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import wandb\n","from wandb.keras import WandbCallback\n","import numpy as np\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","import pandas as pd\n","import tensorflow as tf\n","from sklearn.model_selection import train_test_split\n","\n","# GPU Configuration\n","gpus = tf.config.experimental.list_physical_devices('GPU')\n","if gpus:\n","    try:\n","        for gpu in gpus:\n","            tf.config.experimental.set_memory_growth(gpu, True)\n","        logical_gpus = tf.config.experimental.list_logical_devices('GPU')\n","        print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPUs\")\n","    except RuntimeError as e:\n","        print(e)\n","\n","defaults = {\n","    'epochs': 15,\n","    'batch_size': 128,\n","    'fc1_num_neurons': 1024,\n","    'fc2_num_neurons': 512,\n","    'fc3_num_neurons': 256,\n","    'seed': 7,\n","    'learning_rate': 1e-3,\n","    'optimizer': 'adam',\n","    'hidden_activation': 'relu',\n","    'output_activation': 'sigmoid',\n","    'loss_function': 'binary_crossentropy',\n","    'metrics': ['accuracy'],\n","}\n","\n","WANDB_API_KEY=\"aa601783a9e0b5f4bde1480428fb5318ad3dc0f2\"\n","wandb.init(config=defaults, resume=True, name='MN-V3', project='cz4042', notes='image size 112')\n","config = wandb.config\n","\n","# Load dataset as dataframe\n","df = pd.read_csv(\"/content/drive/My Drive/Y4 Sem 1/NN Project/aligned_gender.txt\", sep='\\t')\n","train_df, test_df = train_test_split(df, test_size=0.2)\n","train_df['datadir'] = '/content/drive/My Drive/Y4 Sem 1/NN Project/' + train_df['datadir'].astype(str)\n","test_df['datadir'] = '/content/drive/My Drive/Y4 Sem 1/NN Project/' + test_df['datadir'].astype(str)\n","\n","# Load images into keras image generator \n","datagen_train = ImageDataGenerator(\n","    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input,\n",")\n","datagen_test = ImageDataGenerator(\n","    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input,\n",")\n","\n","train_generator = datagen_train.flow_from_dataframe(\n","    dataframe=train_df,\n","    x_col='datadir',\n","    y_col='gender',\n","    batch_size=config.batch_size,\n","    seed=config.seed,\n","    shuffle=True,\n","    class_mode='raw',\n","    target_size=(224,224),\n",")\n","\n","test_generator = datagen_test.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='datadir',\n","    y_col='gender',\n","    batch_size=config.batch_size,\n","    seed=config.seed,\n","    shuffle=True,\n","    class_mode='raw',\n","    target_size=(224,224),\n",")\n","\n","# Define model\n","mobile_net_v2 = tf.keras.applications.MobileNetV2(\n","    include_top=False,\n","    pooling='avg',\n","    weights=None,\n","    input_shape=(224,224,3),\n",")\n","\n","# Set mobilenetv2 to true (to match CelebA architecture, we turn it off later)\n","mobile_net_v2.trainable = True\n","\n","fc1 = tf.keras.layers.Dense(\n","    config.fc1_num_neurons,\n","    activation=config.hidden_activation,\n",")\n","\n","fc2 = tf.keras.layers.Dense(\n","    config.fc2_num_neurons,\n","    activation=config.hidden_activation,\n",")\n","\n","fc3 = tf.keras.layers.Dense(\n","    config.fc2_num_neurons,\n","    activation=config.hidden_activation,\n",")\n","\n","model = tf.keras.models.Sequential([\n","    mobile_net_v2,\n","    tf.keras.layers.Flatten(),\n","    tf.keras.layers.BatchNormalization(),\n","    fc1,\n","    tf.keras.layers.BatchNormalization(),\n","    fc2,\n","    tf.keras.layers.BatchNormalization(),\n","    fc3,\n","    tf.keras.layers.BatchNormalization(),\n","    tf.keras.layers.Dense(1, activation=config.output_activation),\n","])\n","# Load model weights\n","model.load_weights('/content/drive/My Drive/Y4 Sem 1/NN Project/model_celeba_resized_zerow.h5')\n","# Set trainable weights to false again\n","mobile_net_v2.trainable = False\n","model.summary()\n","\n","# Compile model \n","model.compile(\n","    optimizer=tf.keras.optimizers.Adam(learning_rate=config.learning_rate),\n","    loss=config.loss_function,\n","    metrics=config.metrics,\n",")\n","\n","model.fit(\n","    train_generator,\n","    validation_data=test_generator,\n","    epochs=config.epochs,\n","    callbacks=[WandbCallback()],\n",")\n","model.save_weights('pretrained_adience_v3.h5') \n","print('Run complete')"],"execution_count":3,"outputs":[{"output_type":"stream","text":["1 Physical GPUs, 1 Logical GPUs\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/javascript":["\n","        window._wandbApiKey = new Promise((resolve, reject) => {\n","            function loadScript(url) {\n","            return new Promise(function(resolve, reject) {\n","                let newScript = document.createElement(\"script\");\n","                newScript.onerror = reject;\n","                newScript.onload = resolve;\n","                document.body.appendChild(newScript);\n","                newScript.src = url;\n","            });\n","            }\n","            loadScript(\"https://cdn.jsdelivr.net/npm/postmate/build/postmate.min.js\").then(() => {\n","            const iframe = document.createElement('iframe')\n","            iframe.style.cssText = \"width:0;height:0;border:none\"\n","            document.body.appendChild(iframe)\n","            const handshake = new Postmate({\n","                container: iframe,\n","                url: 'https://wandb.ai/authorize'\n","            });\n","            const timeout = setTimeout(() => reject(\"Couldn't auto authenticate\"), 5000)\n","            handshake.then(function(child) {\n","                child.on('authorize', data => {\n","                    clearTimeout(timeout)\n","                    resolve(data)\n","                });\n","            });\n","            })\n","        });\n","    "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n"],"name":"stderr"},{"output_type":"stream","text":["wandb: Paste an API key from your profile and hit enter: ··········\n"],"name":"stdout"},{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.9<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">MN-V3</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/todayisagreatday/cz4042\" target=\"_blank\">https://wandb.ai/todayisagreatday/cz4042</a><br/>\n","                Run page: <a href=\"https://wandb.ai/todayisagreatday/cz4042/runs/2vvxtnwp\" target=\"_blank\">https://wandb.ai/todayisagreatday/cz4042/runs/2vvxtnwp</a><br/>\n","                Run data is saved locally in <code>wandb/run-20201106_080025-2vvxtnwp</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:42: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:43: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"],"name":"stderr"},{"output_type":"stream","text":["Found 9755 validated image filenames.\n","Found 2439 validated image filenames.\n","Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","mobilenetv2_1.00_224 (Functi (None, 1280)              2257984   \n","_________________________________________________________________\n","flatten (Flatten)            (None, 1280)              0         \n","_________________________________________________________________\n","batch_normalization (BatchNo (None, 1280)              5120      \n","_________________________________________________________________\n","dense (Dense)                (None, 1024)              1311744   \n","_________________________________________________________________\n","batch_normalization_1 (Batch (None, 1024)              4096      \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 512)               524800    \n","_________________________________________________________________\n","batch_normalization_2 (Batch (None, 512)               2048      \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 512)               262656    \n","_________________________________________________________________\n","batch_normalization_3 (Batch (None, 512)               2048      \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 1)                 513       \n","=================================================================\n","Total params: 4,371,009\n","Trainable params: 2,106,369\n","Non-trainable params: 2,264,640\n","_________________________________________________________________\n","Epoch 1/15\n","77/77 [==============================] - 3982s 52s/step - loss: 0.9018 - accuracy: 0.5696 - val_loss: 0.6950 - val_accuracy: 0.4797\n","Epoch 2/15\n","77/77 [==============================] - 129s 2s/step - loss: 0.6729 - accuracy: 0.5837 - val_loss: 0.6767 - val_accuracy: 0.5937\n","Epoch 3/15\n","77/77 [==============================] - 133s 2s/step - loss: 0.6676 - accuracy: 0.5930 - val_loss: 0.6798 - val_accuracy: 0.5638\n","Epoch 4/15\n","77/77 [==============================] - 132s 2s/step - loss: 0.6687 - accuracy: 0.5979 - val_loss: 0.6797 - val_accuracy: 0.5650\n","Epoch 5/15\n","77/77 [==============================] - 133s 2s/step - loss: 0.6630 - accuracy: 0.6005 - val_loss: 0.6840 - val_accuracy: 0.5740\n","Epoch 6/15\n","77/77 [==============================] - 131s 2s/step - loss: 0.6562 - accuracy: 0.6119 - val_loss: 0.6585 - val_accuracy: 0.6068\n","Epoch 7/15\n","77/77 [==============================] - 128s 2s/step - loss: 0.6543 - accuracy: 0.6210 - val_loss: 0.6559 - val_accuracy: 0.6171\n","Epoch 8/15\n","77/77 [==============================] - 128s 2s/step - loss: 0.6554 - accuracy: 0.6156 - val_loss: 0.6555 - val_accuracy: 0.6216\n","Epoch 9/15\n","77/77 [==============================] - 128s 2s/step - loss: 0.6514 - accuracy: 0.6201 - val_loss: 0.6653 - val_accuracy: 0.6158\n","Epoch 10/15\n","77/77 [==============================] - 129s 2s/step - loss: 0.6476 - accuracy: 0.6254 - val_loss: 0.6570 - val_accuracy: 0.6068\n","Epoch 11/15\n","77/77 [==============================] - 128s 2s/step - loss: 0.6463 - accuracy: 0.6276 - val_loss: 0.6654 - val_accuracy: 0.6093\n","Epoch 12/15\n","77/77 [==============================] - 129s 2s/step - loss: 0.6433 - accuracy: 0.6278 - val_loss: 0.6521 - val_accuracy: 0.6154\n","Epoch 13/15\n","77/77 [==============================] - 131s 2s/step - loss: 0.6423 - accuracy: 0.6336 - val_loss: 0.6573 - val_accuracy: 0.6248\n","Epoch 14/15\n","77/77 [==============================] - 133s 2s/step - loss: 0.6394 - accuracy: 0.6323 - val_loss: 0.6446 - val_accuracy: 0.6228\n","Epoch 15/15\n","77/77 [==============================] - 132s 2s/step - loss: 0.6355 - accuracy: 0.6387 - val_loss: 0.6652 - val_accuracy: 0.6052\n","Run complete\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"awQnqIQh9pLL"},"source":[""],"execution_count":null,"outputs":[]}]}