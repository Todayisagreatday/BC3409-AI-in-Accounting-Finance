{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"mobilenetv2_celeba_v5","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyN5TxXOQEn1V+I/JNibmTn7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"a5709dd2ec8a403290c8b28b6b8d17e8":{"model_module":"@jupyter-widgets/controls","model_name":"VBoxModel","state":{"_view_name":"VBoxView","_dom_classes":[],"_model_name":"VBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_39ace3e7f9784821a07a39cd16eb4ccb","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_218aa6c881d04b8d864ee7e66bb9c85e","IPY_MODEL_2c359bbd64a445e7ab1d1493b365b962"]}},"39ace3e7f9784821a07a39cd16eb4ccb":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"218aa6c881d04b8d864ee7e66bb9c85e":{"model_module":"@jupyter-widgets/controls","model_name":"LabelModel","state":{"_view_name":"LabelView","style":"IPY_MODEL_71f9a8f1731f4fbc92610a3eaeff14d9","_dom_classes":[],"description":"","_model_name":"LabelModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 51.06MB of 51.06MB uploaded (0.00MB deduped)\r","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_1c04ba11dd0e42ae831714d168ba1a44"}},"2c359bbd64a445e7ab1d1493b365b962":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_eda4903220d54a9997d84d52bc113f24","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_4e2b3e467c4741429a80ddcbe4d057b5"}},"71f9a8f1731f4fbc92610a3eaeff14d9":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"1c04ba11dd0e42ae831714d168ba1a44":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"eda4903220d54a9997d84d52bc113f24":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"4e2b3e467c4741429a80ddcbe4d057b5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"code","metadata":{"id":"T2IvTdM77oii","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605768275203,"user_tz":-480,"elapsed":10579,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"caa1a9f1-e49b-4c30-cb95-968db9ec76e8"},"source":["!pip install wandb -qqq"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 1.8MB 13.2MB/s \n","\u001b[K     |████████████████████████████████| 133kB 56.6MB/s \n","\u001b[K     |████████████████████████████████| 163kB 51.3MB/s \n","\u001b[K     |████████████████████████████████| 102kB 14.4MB/s \n","\u001b[K     |████████████████████████████████| 102kB 14.5MB/s \n","\u001b[K     |████████████████████████████████| 71kB 11.8MB/s \n","\u001b[?25h  Building wheel for watchdog (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for subprocess32 (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GqyCQTBf8gqO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605768328253,"user_tz":-480,"elapsed":63619,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"81a22212-993f-442f-a2de-b49c3702daf7"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5CBaAkSa7_IT","colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["a5709dd2ec8a403290c8b28b6b8d17e8","39ace3e7f9784821a07a39cd16eb4ccb","218aa6c881d04b8d864ee7e66bb9c85e","2c359bbd64a445e7ab1d1493b365b962","71f9a8f1731f4fbc92610a3eaeff14d9","1c04ba11dd0e42ae831714d168ba1a44","eda4903220d54a9997d84d52bc113f24","4e2b3e467c4741429a80ddcbe4d057b5"]},"executionInfo":{"status":"ok","timestamp":1605788080872,"user_tz":-480,"elapsed":4795605,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"5d3a3fb7-ebfd-44e6-f5a5-6ffe7a1a18bd"},"source":["import wandb\n","from wandb.keras import WandbCallback\n","import numpy as np\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","import pandas as pd\n","import tensorflow as tf\n","from sklearn.model_selection import train_test_split\n","\n","# GPU Configuration\n","gpus = tf.config.experimental.list_physical_devices('GPU')\n","if gpus:\n","    try:\n","        for gpu in gpus:\n","            tf.config.experimental.set_memory_growth(gpu, True)\n","        logical_gpus = tf.config.experimental.list_logical_devices('GPU')\n","        print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPUs\")\n","    except RuntimeError as e:\n","        print(e)\n","\n","# Hyperparameters\n","defaults = {\n","    'epochs': 30,\n","    'batch_size': 128,\n","    'fc1_num_neurons': 1024,\n","    'fc2_num_neurons': 512,\n","    'fc3_num_neurons': 256,\n","    'seed': 7,\n","    'learning_rate': 1e-5,\n","    'optimizer': 'adam',\n","    'hidden_activation': 'relu',\n","    'output_activation': 'sigmoid',\n","    'loss_function': 'binary_crossentropy',\n","    'metrics': ['accuracy'],\n","}\n","\n","wandb.init(config=defaults, resume=True, name='No Val Part 2', project='transfer_learning_mnv2', notes='unfreeze model')\n","config = wandb.config\n","np.random.seed(config.seed)\n","tf.random.set_seed(config.seed)\n","\n","\n","# Load dataset as dataframe\n","df = pd.read_csv(\"/content/drive/My Drive/Y4 Sem 1/NN Project/aligned_gender.txt\", sep='\\t')\n","train_df, test_df = train_test_split(df, test_size=0.2)\n","train_df['datadir'] = '/content/drive/My Drive/Y4 Sem 1/NN Project/' + train_df['datadir'].astype(str)\n","test_df['datadir'] = '/content/drive/My Drive/Y4 Sem 1/NN Project/' + test_df['datadir'].astype(str)\n","\n","# Load images into keras image generator \n","datagen_train = ImageDataGenerator(\n","    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input,\n",")\n","datagen_test = ImageDataGenerator(\n","    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input,\n",")\n","\n","train_generator = datagen_train.flow_from_dataframe(\n","    dataframe=train_df,\n","    x_col='datadir',\n","    y_col='gender',\n","    batch_size=config.batch_size,\n","    seed=config.seed,\n","    shuffle=True,\n","    class_mode='raw',\n","    target_size=(224,224),\n",")\n","\n","test_generator = datagen_test.flow_from_dataframe(\n","    dataframe=test_df,\n","    x_col='datadir',\n","    y_col='gender',\n","    batch_size=config.batch_size,\n","    seed=config.seed,\n","    shuffle=True,\n","    class_mode='raw',\n","    target_size=(224,224),\n",")\n","\n","# Define model\n","mobile_net_v2 = tf.keras.applications.MobileNetV2(\n","    include_top=False,\n","    pooling='avg',\n","    weights=None,\n","    input_shape=(224,224,3),\n",")\n","\n","# Set mobilenetv2 to true\n","mobile_net_v2.trainable = True\n","\n","fc1 = tf.keras.layers.Dense(\n","    config.fc1_num_neurons,\n","    activation=config.hidden_activation,\n",")\n","\n","fc2 = tf.keras.layers.Dense(\n","    config.fc2_num_neurons,\n","    activation=config.hidden_activation,\n",")\n","\n","fc3 = tf.keras.layers.Dense(\n","    config.fc2_num_neurons,\n","    activation=config.hidden_activation,\n",")\n","\n","bn1 = tf.keras.layers.BatchNormalization()\n","bn2 = tf.keras.layers.BatchNormalization()\n","bn3 = tf.keras.layers.BatchNormalization()\n","bn4 = tf.keras.layers.BatchNormalization()\n","\n","model = tf.keras.models.Sequential([\n","    mobile_net_v2,\n","    tf.keras.layers.Flatten(),\n","    bn1,\n","    fc1,\n","    bn2,\n","    fc2,\n","    bn3,\n","    fc3,\n","    bn4,\n","    tf.keras.layers.Dense(1, activation=config.output_activation),\n","])\n","\n","# Load model weights\n","model.load_weights('/content/drive/My Drive/Y4 Sem 1/NN Project/pretrained_adience_v5.h5')\n","model.summary()\n","\n","# Compile model \n","model.compile(\n","    optimizer=tf.keras.optimizers.Adam(learning_rate=config.learning_rate),\n","    loss=config.loss_function,\n","    metrics=config.metrics,\n",")\n","\n","# Fit model\n","model.fit(\n","    train_generator,\n","    validation_data=test_generator,\n","    epochs=config.epochs,\n","    callbacks=[WandbCallback()],\n",")\n","model.save_weights('pretrained_adience_v5_cont.h5') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["1 Physical GPUs, 1 Logical GPUs\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["Finishing last run (ID:jctbqudv) before initializing another..."],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<br/>Waiting for W&B process to finish, PID 419<br/>Program ended successfully."],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"a5709dd2ec8a403290c8b28b6b8d17e8","version_minor":0,"version_major":2},"text/plain":["VBox(children=(Label(value=' 50.42MB of 50.42MB uploaded (0.00MB deduped)\\r'), FloatProgress(value=1.0, max=1.…"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["Find user logs for this run at: <code>/content/wandb/run-20201119_064743-jctbqudv/logs/debug.log</code>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["Find internal logs for this run at: <code>/content/wandb/run-20201119_064743-jctbqudv/logs/debug-internal.log</code>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<h3>Run summary:</h3><br/><style>\n","    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n","    </style><table class=\"wandb\">\n","<tr><td>epoch</td><td>49</td></tr><tr><td>loss</td><td>0.18294</td></tr><tr><td>accuracy</td><td>0.92035</td></tr><tr><td>val_loss</td><td>0.2764</td></tr><tr><td>val_accuracy</td><td>0.89996</td></tr><tr><td>_step</td><td>49</td></tr><tr><td>_runtime</td><td>14721</td></tr><tr><td>_timestamp</td><td>1605783104</td></tr><tr><td>best_val_loss</td><td>0.2764</td></tr><tr><td>best_epoch</td><td>49</td></tr></table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<h3>Run history:</h3><br/><style>\n","    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n","    </style><table class=\"wandb\">\n","<tr><td>epoch</td><td>▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███</td></tr><tr><td>loss</td><td>█▇▆▅▄▃▃▃▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>accuracy</td><td>▁▂▂▃▄▄▄▅▅▅▅▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇████████</td></tr><tr><td>val_loss</td><td>█▇▆▆▅▄▄▄▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>val_accuracy</td><td>▁▂▃▃▄▄▄▄▅▅▅▅▅▆▆▆▆▆▆▆▇▇▇▇▇▇▇▇▇▇▇▇████████</td></tr><tr><td>_step</td><td>▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███</td></tr><tr><td>_runtime</td><td>▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███</td></tr><tr><td>_timestamp</td><td>▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███</td></tr></table><br/>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["Synced 5 W&B file(s), 1 media file(s), 0 artifact file(s) and 1 other file(s)"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["\n","                    <br/>Synced <strong style=\"color:#cdcd00\">No Val</strong>: <a href=\"https://wandb.ai/todayisagreatday/transfer_learning_mnv2/runs/jctbqudv\" target=\"_blank\">https://wandb.ai/todayisagreatday/transfer_learning_mnv2/runs/jctbqudv</a><br/>\n","                "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["...Successfully finished last run (ID:jctbqudv). Initializing new run:<br/><br/>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.11<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">No Val Part 2</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/todayisagreatday/transfer_learning_mnv2\" target=\"_blank\">https://wandb.ai/todayisagreatday/transfer_learning_mnv2</a><br/>\n","                Run page: <a href=\"https://wandb.ai/todayisagreatday/transfer_learning_mnv2/runs/2f5isn9i\" target=\"_blank\">https://wandb.ai/todayisagreatday/transfer_learning_mnv2/runs/2f5isn9i</a><br/>\n","                Run data is saved locally in <code>/content/wandb/run-20201119_105445-2f5isn9i</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:45: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:46: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"],"name":"stderr"},{"output_type":"stream","text":["Found 9755 validated image filenames.\n","Found 2439 validated image filenames.\n","Model: \"sequential_2\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","mobilenetv2_1.00_224 (Functi (None, 1280)              2257984   \n","_________________________________________________________________\n","flatten_2 (Flatten)          (None, 1280)              0         \n","_________________________________________________________________\n","batch_normalization_8 (Batch (None, 1280)              5120      \n","_________________________________________________________________\n","dense_8 (Dense)              (None, 1024)              1311744   \n","_________________________________________________________________\n","batch_normalization_9 (Batch (None, 1024)              4096      \n","_________________________________________________________________\n","dense_9 (Dense)              (None, 512)               524800    \n","_________________________________________________________________\n","batch_normalization_10 (Batc (None, 512)               2048      \n","_________________________________________________________________\n","dense_10 (Dense)             (None, 512)               262656    \n","_________________________________________________________________\n","batch_normalization_11 (Batc (None, 512)               2048      \n","_________________________________________________________________\n","dense_11 (Dense)             (None, 1)                 513       \n","=================================================================\n","Total params: 4,371,009\n","Trainable params: 4,330,241\n","Non-trainable params: 40,768\n","_________________________________________________________________\n","Epoch 1/30\n","77/77 [==============================] - 162s 2s/step - loss: 0.1826 - accuracy: 0.9224 - val_loss: 0.2752 - val_accuracy: 0.9016\n","Epoch 2/30\n","77/77 [==============================] - 159s 2s/step - loss: 0.1745 - accuracy: 0.9257 - val_loss: 0.2731 - val_accuracy: 0.9012\n","Epoch 3/30\n","77/77 [==============================] - 159s 2s/step - loss: 0.1743 - accuracy: 0.9274 - val_loss: 0.2713 - val_accuracy: 0.9028\n","Epoch 4/30\n","77/77 [==============================] - 159s 2s/step - loss: 0.1693 - accuracy: 0.9269 - val_loss: 0.2699 - val_accuracy: 0.9045\n","Epoch 5/30\n","77/77 [==============================] - 159s 2s/step - loss: 0.1647 - accuracy: 0.9302 - val_loss: 0.2679 - val_accuracy: 0.9049\n","Epoch 6/30\n","77/77 [==============================] - 157s 2s/step - loss: 0.1612 - accuracy: 0.9335 - val_loss: 0.2660 - val_accuracy: 0.9065\n","Epoch 7/30\n","77/77 [==============================] - 159s 2s/step - loss: 0.1607 - accuracy: 0.9342 - val_loss: 0.2644 - val_accuracy: 0.9077\n","Epoch 8/30\n","77/77 [==============================] - 160s 2s/step - loss: 0.1560 - accuracy: 0.9352 - val_loss: 0.2634 - val_accuracy: 0.9082\n","Epoch 9/30\n","77/77 [==============================] - 158s 2s/step - loss: 0.1524 - accuracy: 0.9376 - val_loss: 0.2623 - val_accuracy: 0.9082\n","Epoch 10/30\n","77/77 [==============================] - 160s 2s/step - loss: 0.1499 - accuracy: 0.9392 - val_loss: 0.2609 - val_accuracy: 0.9090\n","Epoch 11/30\n","77/77 [==============================] - 157s 2s/step - loss: 0.1449 - accuracy: 0.9396 - val_loss: 0.2592 - val_accuracy: 0.9098\n","Epoch 12/30\n","77/77 [==============================] - 158s 2s/step - loss: 0.1414 - accuracy: 0.9430 - val_loss: 0.2581 - val_accuracy: 0.9106\n","Epoch 13/30\n","77/77 [==============================] - 157s 2s/step - loss: 0.1403 - accuracy: 0.9430 - val_loss: 0.2571 - val_accuracy: 0.9110\n","Epoch 14/30\n","77/77 [==============================] - 158s 2s/step - loss: 0.1373 - accuracy: 0.9438 - val_loss: 0.2563 - val_accuracy: 0.9118\n","Epoch 15/30\n","77/77 [==============================] - 158s 2s/step - loss: 0.1332 - accuracy: 0.9477 - val_loss: 0.2545 - val_accuracy: 0.9110\n","Epoch 16/30\n","77/77 [==============================] - 159s 2s/step - loss: 0.1314 - accuracy: 0.9491 - val_loss: 0.2541 - val_accuracy: 0.9123\n","Epoch 17/30\n","77/77 [==============================] - 158s 2s/step - loss: 0.1284 - accuracy: 0.9495 - val_loss: 0.2535 - val_accuracy: 0.9131\n","Epoch 18/30\n","77/77 [==============================] - 157s 2s/step - loss: 0.1284 - accuracy: 0.9505 - val_loss: 0.2529 - val_accuracy: 0.9123\n","Epoch 19/30\n","77/77 [==============================] - 157s 2s/step - loss: 0.1218 - accuracy: 0.9517 - val_loss: 0.2523 - val_accuracy: 0.9131\n","Epoch 20/30\n","77/77 [==============================] - 158s 2s/step - loss: 0.1195 - accuracy: 0.9545 - val_loss: 0.2517 - val_accuracy: 0.9135\n","Epoch 21/30\n","77/77 [==============================] - 153s 2s/step - loss: 0.1149 - accuracy: 0.9563 - val_loss: 0.2521 - val_accuracy: 0.9139\n","Epoch 22/30\n","77/77 [==============================] - 151s 2s/step - loss: 0.1117 - accuracy: 0.9572 - val_loss: 0.2521 - val_accuracy: 0.9139\n","Epoch 23/30\n","77/77 [==============================] - 153s 2s/step - loss: 0.1102 - accuracy: 0.9586 - val_loss: 0.2521 - val_accuracy: 0.9147\n","Epoch 24/30\n","77/77 [==============================] - 155s 2s/step - loss: 0.1073 - accuracy: 0.9604 - val_loss: 0.2516 - val_accuracy: 0.9164\n","Epoch 25/30\n","77/77 [==============================] - 156s 2s/step - loss: 0.1059 - accuracy: 0.9583 - val_loss: 0.2519 - val_accuracy: 0.9159\n","Epoch 26/30\n","77/77 [==============================] - 154s 2s/step - loss: 0.1039 - accuracy: 0.9620 - val_loss: 0.2522 - val_accuracy: 0.9164\n","Epoch 27/30\n","77/77 [==============================] - 157s 2s/step - loss: 0.0980 - accuracy: 0.9626 - val_loss: 0.2526 - val_accuracy: 0.9168\n","Epoch 28/30\n","77/77 [==============================] - 155s 2s/step - loss: 0.0960 - accuracy: 0.9670 - val_loss: 0.2528 - val_accuracy: 0.9176\n","Epoch 29/30\n","77/77 [==============================] - 154s 2s/step - loss: 0.0961 - accuracy: 0.9641 - val_loss: 0.2531 - val_accuracy: 0.9172\n","Epoch 30/30\n","77/77 [==============================] - 154s 2s/step - loss: 0.0928 - accuracy: 0.9666 - val_loss: 0.2538 - val_accuracy: 0.9172\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"awQnqIQh9pLL"},"source":[""],"execution_count":null,"outputs":[]}]}