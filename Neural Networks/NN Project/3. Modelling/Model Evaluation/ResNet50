{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ResNet50","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"WmCOv5VCoEaC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606125106197,"user_tz":-480,"elapsed":691,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"32260589-26bd-4efd-eb24-4c191ec87687"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"C3mxkJ8w1hdq","executionInfo":{"status":"ok","timestamp":1606125109472,"user_tz":-480,"elapsed":2816,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}}},"source":["!pip install wandb -qqq"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"pesT_L5JoWYW","colab":{"base_uri":"https://localhost:8080/","height":319},"executionInfo":{"status":"ok","timestamp":1606125121309,"user_tz":-480,"elapsed":3396,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"b6407f17-7bbf-44d1-a7c0-029975282012"},"source":["import wandb\n","from wandb.keras import WandbCallback\n","import numpy as np\n","# import tensorflow as tf\n","from tensorflow.keras.applications import ResNet50\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Flatten, GlobalAveragePooling2D, BatchNormalization, Dropout\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.applications import resnet50\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","\n","# Hyperparameters\n","defaults=dict(\n","    # Model \n","    epochs = 20,\n","    batch_size = 64,\n","    fc_layer_1 = 1024,\n","    fc_layer_2 = 512,\n","    fc_layer_3 = 256,\n","    learning_rate = 1e-3,\n","    optimizer = 'Adam'\n","\n",")\n","\n","wandb.init(config=defaults, resume=True, name='Delete This', project='cz4042', notes='eval')\n","config = wandb.config\n","\n","# Load dataset as dataframe\n","df = pd.read_csv(\"/content/drive/MyDrive/Y4 Sem 1/NN Project/3. Modelling/aligned_gender.txt\", sep='\\t')\n","train_df, test_df = train_test_split(df, test_size=0.2)\n","train_df['datadir'] = '/content/drive/My Drive/Y4 Sem 1/NN Project/' + train_df['datadir'].astype(str)\n","test_df['datadir'] = '/content/drive/My Drive/Y4 Sem 1/NN Project/' + test_df['datadir'].astype(str)"],"execution_count":3,"outputs":[{"output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mtodayisagreatday\u001b[0m (use `wandb login --relogin` to force relogin)\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","                Tracking run with wandb version 0.10.11<br/>\n","                Syncing run <strong style=\"color:#cdcd00\">Delete This</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n","                Project page: <a href=\"https://wandb.ai/todayisagreatday/cz4042\" target=\"_blank\">https://wandb.ai/todayisagreatday/cz4042</a><br/>\n","                Run page: <a href=\"https://wandb.ai/todayisagreatday/cz4042/runs/1lhk6nzb\" target=\"_blank\">https://wandb.ai/todayisagreatday/cz4042/runs/1lhk6nzb</a><br/>\n","                Run data is saved locally in <code>/content/wandb/run-20201123_095159-1lhk6nzb</code><br/><br/>\n","            "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:32: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:33: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BQQAqPtjhBQG","executionInfo":{"status":"ok","timestamp":1606125176782,"user_tz":-480,"elapsed":3559,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"be0fe46f-06bb-482b-f7d9-3f51fd60f2c4"},"source":["# Load images into keras image generator \n","datagen_train = ImageDataGenerator(rescale=1./255, preprocessing_function=resnet50.preprocess_input)\n","datagen_valid = ImageDataGenerator(rescale=1./255, preprocessing_function=resnet50.preprocess_input)\n","# For train generator\n","train_generator = datagen_train.flow_from_dataframe(\n","    dataframe = train_df,\n","    directory=None,\n","    x_col=\"datadir\",\n","    y_col=\"gender\",\n","    batch_size=config.batch_size,\n","    seed=7,\n","    class_mode='raw',\n","    target_size=(224,224))\n","# For test generator \n","valid_generator = datagen_valid.flow_from_dataframe(\n","    dataframe = test_df,\n","    directory=None,\n","    x_col=\"datadir\",\n","    y_col=\"gender\",\n","    batch_size=config.batch_size,\n","    seed=7,\n","    class_mode='raw',\n","    target_size=(224,224))"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Found 9755 validated image filenames.\n","Found 2439 validated image filenames.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4bdEhF3ZhTm7","executionInfo":{"status":"ok","timestamp":1606125767661,"user_tz":-480,"elapsed":580698,"user":{"displayName":"Kenneth Ng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgKwZnZ2dHsOvtWnGFQksMtsfZc2QK_Fv86edRayg=s64","userId":"07556015887030206568"}},"outputId":"88ff9fa8-ef1c-4aff-bbb5-162219727538"},"source":["# Define model\n","model = Sequential()\n","model.add(ResNet50(include_top=False, pooling='avg', weights='imagenet'))\n","model.add(Flatten())\n","model.add(BatchNormalization())\n","model.add(Dense(config.fc_layer_1, activation='relu'))\n","model.add(BatchNormalization())\n","model.add(Dense(config.fc_layer_2, activation='relu'))\n","model.add(BatchNormalization())\n","model.add(Dense(config.fc_layer_3, activation='relu'))\n","model.add(BatchNormalization())\n","model.add(Dense(1, activation='sigmoid'))\n","model.layers[0].trainable = False\n","\n","model.load_weights('/content/drive/MyDrive/Y4 Sem 1/NN Project/5. Saved Weights/Model Evaluation/resnet_eval.h5')\n","model.summary()\n","\n","# Compile model \n","model.compile(\n","    optimizer='Adam',\n","    loss='binary_crossentropy',\n","    metrics=['accuracy'],\n",")\n","\n","# Fit and save model\n","# model.fit(train_generator, epochs=config.epochs, validation_data=valid_generator, callbacks=[WandbCallback()])\n","# model.save_weights('resnet_eval.h5') \n","\n","results = model.evaluate(\n","    valid_generator,\n","    callbacks=[WandbCallback()],\n",")"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","resnet50 (Functional)        (None, 2048)              23587712  \n","_________________________________________________________________\n","flatten (Flatten)            (None, 2048)              0         \n","_________________________________________________________________\n","batch_normalization (BatchNo (None, 2048)              8192      \n","_________________________________________________________________\n","dense (Dense)                (None, 1024)              2098176   \n","_________________________________________________________________\n","batch_normalization_1 (Batch (None, 1024)              4096      \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 512)               524800    \n","_________________________________________________________________\n","batch_normalization_2 (Batch (None, 512)               2048      \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 256)               131328    \n","_________________________________________________________________\n","batch_normalization_3 (Batch (None, 256)               1024      \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 1)                 257       \n","=================================================================\n","Total params: 26,357,633\n","Trainable params: 2,762,241\n","Non-trainable params: 23,595,392\n","_________________________________________________________________\n","39/39 [==============================] - 559s 14s/step - loss: 0.2386 - accuracy: 0.9118\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"B1qtkTvshW9i"},"source":[""],"execution_count":null,"outputs":[]}]}